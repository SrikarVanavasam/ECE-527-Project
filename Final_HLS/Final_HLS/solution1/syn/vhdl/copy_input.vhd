-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity copy_input is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_x_in_AWVALID : OUT STD_LOGIC;
    m_axi_x_in_AWREADY : IN STD_LOGIC;
    m_axi_x_in_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_x_in_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_x_in_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_x_in_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_x_in_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_x_in_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_x_in_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_x_in_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_x_in_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_x_in_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_x_in_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_x_in_WVALID : OUT STD_LOGIC;
    m_axi_x_in_WREADY : IN STD_LOGIC;
    m_axi_x_in_WDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_x_in_WSTRB : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_x_in_WLAST : OUT STD_LOGIC;
    m_axi_x_in_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_x_in_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_x_in_ARVALID : OUT STD_LOGIC;
    m_axi_x_in_ARREADY : IN STD_LOGIC;
    m_axi_x_in_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_x_in_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_x_in_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_x_in_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_x_in_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_x_in_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_x_in_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_x_in_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_x_in_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_x_in_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_x_in_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_x_in_RVALID : IN STD_LOGIC;
    m_axi_x_in_RREADY : OUT STD_LOGIC;
    m_axi_x_in_RDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    m_axi_x_in_RLAST : IN STD_LOGIC;
    m_axi_x_in_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_x_in_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_x_in_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_x_in_BVALID : IN STD_LOGIC;
    m_axi_x_in_BREADY : OUT STD_LOGIC;
    m_axi_x_in_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_x_in_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_x_in_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    x_in_offset : IN STD_LOGIC_VECTOR (28 downto 0);
    x_int_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    x_int_V_ce0 : OUT STD_LOGIC;
    x_int_V_we0 : OUT STD_LOGIC;
    x_int_V_d0 : OUT STD_LOGIC_VECTOR (11 downto 0) );
end;


architecture behav of copy_input is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv54_0 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv12_433 : STD_LOGIC_VECTOR (11 downto 0) := "010000110011";
    constant ap_const_lv12_8 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_const_lv12_FF8 : STD_LOGIC_VECTOR (11 downto 0) := "111111111000";
    constant ap_const_lv12_36 : STD_LOGIC_VECTOR (11 downto 0) := "000000110110";
    constant ap_const_lv12_C : STD_LOGIC_VECTOR (11 downto 0) := "000000001100";
    constant ap_const_lv12_FFF : STD_LOGIC_VECTOR (11 downto 0) := "111111111111";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal x_in_blk_n_AR : STD_LOGIC;
    signal x_in_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal icmp_ln14_fu_126_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_132_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_422 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_state8 : BOOLEAN;
    signal x_in_addr_read_reg_427 : STD_LOGIC_VECTOR (63 downto 0);
    signal man_V_2_fu_189_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal man_V_2_reg_432 : STD_LOGIC_VECTOR (53 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal icmp_ln571_fu_197_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln571_reg_437 : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_amt_fu_227_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_amt_reg_442 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln582_fu_235_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln582_reg_447 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln583_fu_241_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln583_reg_452 : STD_LOGIC_VECTOR (11 downto 0);
    signal and_ln585_fu_297_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln585_reg_457 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln603_fu_321_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln603_reg_462 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln603_fu_327_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln603_reg_467 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln603_1_fu_333_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln603_1_reg_473 : STD_LOGIC_VECTOR (11 downto 0);
    signal i_0_reg_103 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal zext_ln15_fu_341_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln13_fu_115_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ireg_V_fu_138_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal exp_tmp_V_fu_153_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln565_fu_167_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_fu_171_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal p_Result_1_fu_179_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal p_Result_s_fu_145_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal man_V_1_fu_183_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal trunc_ln556_fu_141_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln461_fu_163_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal F2_fu_203_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln581_fu_209_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln581_fu_215_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln581_fu_221_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_6_fu_257_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln582_fu_273_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln582_fu_279_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln585_fu_245_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln581_fu_285_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln585_fu_291_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln581_fu_309_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln603_fu_251_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln581_fu_315_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln585_1_fu_303_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln588_fu_265_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln581_fu_346_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln586_fu_349_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal ashr_ln586_fu_353_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal sext_ln581cast_fu_362_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal xor_ln571_fu_371_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln604_fu_366_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln586_fu_358_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal and_ln582_fu_376_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln603_fu_381_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_ln603_1_fu_388_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln603_2_fu_399_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln603_2_fu_393_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_0_reg_103_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                i_0_reg_103 <= i_reg_422;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                i_0_reg_103 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                and_ln585_reg_457 <= and_ln585_fu_297_p2;
                and_ln603_reg_462 <= and_ln603_fu_321_p2;
                icmp_ln571_reg_437 <= icmp_ln571_fu_197_p2;
                icmp_ln582_reg_447 <= icmp_ln582_fu_235_p2;
                man_V_2_reg_432 <= man_V_2_fu_189_p3;
                or_ln603_reg_467 <= or_ln603_fu_327_p2;
                select_ln603_1_reg_473 <= select_ln603_1_fu_333_p3;
                sh_amt_reg_442 <= sh_amt_fu_227_p3;
                trunc_ln583_reg_452 <= trunc_ln583_fu_241_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln14_fu_126_p2 = ap_const_lv1_0) and (m_axi_x_in_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                i_reg_422 <= i_fu_132_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln14_fu_126_p2 = ap_const_lv1_0) and (m_axi_x_in_RVALID = ap_const_logic_0))) and (icmp_ln14_fu_126_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                x_in_addr_read_reg_427 <= m_axi_x_in_RDATA;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, m_axi_x_in_ARREADY, m_axi_x_in_RVALID, ap_CS_fsm_state8, icmp_ln14_fu_126_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((m_axi_x_in_ARREADY = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if ((not(((icmp_ln14_fu_126_p2 = ap_const_lv1_0) and (m_axi_x_in_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln14_fu_126_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif ((not(((icmp_ln14_fu_126_p2 = ap_const_lv1_0) and (m_axi_x_in_RVALID = ap_const_logic_0))) and (icmp_ln14_fu_126_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
    F2_fu_203_p2 <= std_logic_vector(unsigned(ap_const_lv12_433) - unsigned(zext_ln461_fu_163_p1));
    add_ln581_fu_215_p2 <= std_logic_vector(signed(ap_const_lv12_FF8) + signed(F2_fu_203_p2));
    and_ln581_fu_285_p2 <= (xor_ln582_fu_279_p2 and icmp_ln581_fu_209_p2);
    and_ln582_fu_376_p2 <= (xor_ln571_fu_371_p2 and icmp_ln582_reg_447);
    and_ln585_1_fu_303_p2 <= (icmp_ln585_fu_245_p2 and and_ln581_fu_285_p2);
    and_ln585_fu_297_p2 <= (xor_ln585_fu_291_p2 and and_ln581_fu_285_p2);
    and_ln603_fu_321_p2 <= (xor_ln581_fu_315_p2 and icmp_ln603_fu_251_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state8_assign_proc : process(m_axi_x_in_RVALID, icmp_ln14_fu_126_p2)
    begin
                ap_block_state8 <= ((icmp_ln14_fu_126_p2 = ap_const_lv1_0) and (m_axi_x_in_RVALID = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, m_axi_x_in_RVALID, ap_CS_fsm_state8, icmp_ln14_fu_126_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or (not(((icmp_ln14_fu_126_p2 = ap_const_lv1_0) and (m_axi_x_in_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln14_fu_126_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(m_axi_x_in_RVALID, ap_CS_fsm_state8, icmp_ln14_fu_126_p2)
    begin
        if ((not(((icmp_ln14_fu_126_p2 = ap_const_lv1_0) and (m_axi_x_in_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln14_fu_126_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ashr_ln586_fu_353_p2 <= std_logic_vector(shift_right(signed(man_V_2_reg_432),to_integer(unsigned('0' & zext_ln586_fu_349_p1(31-1 downto 0)))));
    exp_tmp_V_fu_153_p4 <= ireg_V_fu_138_p1(62 downto 52);
    i_fu_132_p2 <= std_logic_vector(unsigned(i_0_reg_103) + unsigned(ap_const_lv4_1));
    icmp_ln14_fu_126_p2 <= "1" when (i_0_reg_103 = ap_const_lv4_C) else "0";
    icmp_ln571_fu_197_p2 <= "1" when (trunc_ln556_fu_141_p1 = ap_const_lv63_0) else "0";
    icmp_ln581_fu_209_p2 <= "1" when (signed(F2_fu_203_p2) > signed(ap_const_lv12_8)) else "0";
    icmp_ln582_fu_235_p2 <= "1" when (F2_fu_203_p2 = ap_const_lv12_8) else "0";
    icmp_ln585_fu_245_p2 <= "1" when (unsigned(sh_amt_fu_227_p3) < unsigned(ap_const_lv12_36)) else "0";
    icmp_ln603_fu_251_p2 <= "1" when (unsigned(sh_amt_fu_227_p3) < unsigned(ap_const_lv12_C)) else "0";
    ireg_V_fu_138_p1 <= x_in_addr_read_reg_427;
    m_axi_x_in_ARADDR <= zext_ln13_fu_115_p1(32 - 1 downto 0);
    m_axi_x_in_ARBURST <= ap_const_lv2_0;
    m_axi_x_in_ARCACHE <= ap_const_lv4_0;
    m_axi_x_in_ARID <= ap_const_lv1_0;
    m_axi_x_in_ARLEN <= ap_const_lv32_C;
    m_axi_x_in_ARLOCK <= ap_const_lv2_0;
    m_axi_x_in_ARPROT <= ap_const_lv3_0;
    m_axi_x_in_ARQOS <= ap_const_lv4_0;
    m_axi_x_in_ARREGION <= ap_const_lv4_0;
    m_axi_x_in_ARSIZE <= ap_const_lv3_0;
    m_axi_x_in_ARUSER <= ap_const_lv1_0;

    m_axi_x_in_ARVALID_assign_proc : process(ap_start, ap_CS_fsm_state1, m_axi_x_in_ARREADY)
    begin
        if ((not(((m_axi_x_in_ARREADY = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            m_axi_x_in_ARVALID <= ap_const_logic_1;
        else 
            m_axi_x_in_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_x_in_AWADDR <= ap_const_lv32_0;
    m_axi_x_in_AWBURST <= ap_const_lv2_0;
    m_axi_x_in_AWCACHE <= ap_const_lv4_0;
    m_axi_x_in_AWID <= ap_const_lv1_0;
    m_axi_x_in_AWLEN <= ap_const_lv32_0;
    m_axi_x_in_AWLOCK <= ap_const_lv2_0;
    m_axi_x_in_AWPROT <= ap_const_lv3_0;
    m_axi_x_in_AWQOS <= ap_const_lv4_0;
    m_axi_x_in_AWREGION <= ap_const_lv4_0;
    m_axi_x_in_AWSIZE <= ap_const_lv3_0;
    m_axi_x_in_AWUSER <= ap_const_lv1_0;
    m_axi_x_in_AWVALID <= ap_const_logic_0;
    m_axi_x_in_BREADY <= ap_const_logic_0;

    m_axi_x_in_RREADY_assign_proc : process(m_axi_x_in_RVALID, ap_CS_fsm_state8, icmp_ln14_fu_126_p2)
    begin
        if ((not(((icmp_ln14_fu_126_p2 = ap_const_lv1_0) and (m_axi_x_in_RVALID = ap_const_logic_0))) and (icmp_ln14_fu_126_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            m_axi_x_in_RREADY <= ap_const_logic_1;
        else 
            m_axi_x_in_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_x_in_WDATA <= ap_const_lv64_0;
    m_axi_x_in_WID <= ap_const_lv1_0;
    m_axi_x_in_WLAST <= ap_const_logic_0;
    m_axi_x_in_WSTRB <= ap_const_lv8_0;
    m_axi_x_in_WUSER <= ap_const_lv1_0;
    m_axi_x_in_WVALID <= ap_const_logic_0;
    man_V_1_fu_183_p2 <= std_logic_vector(unsigned(ap_const_lv54_0) - unsigned(p_Result_1_fu_179_p1));
    man_V_2_fu_189_p3 <= 
        man_V_1_fu_183_p2 when (p_Result_s_fu_145_p3(0) = '1') else 
        p_Result_1_fu_179_p1;
    or_ln581_fu_309_p2 <= (or_ln582_fu_273_p2 or icmp_ln581_fu_209_p2);
    or_ln582_fu_273_p2 <= (icmp_ln582_fu_235_p2 or icmp_ln571_fu_197_p2);
    or_ln603_1_fu_388_p2 <= (and_ln585_reg_457 or and_ln582_fu_376_p2);
    or_ln603_2_fu_399_p2 <= (or_ln603_reg_467 or or_ln603_1_fu_388_p2);
    or_ln603_fu_327_p2 <= (and_ln603_fu_321_p2 or and_ln585_1_fu_303_p2);
    p_Result_1_fu_179_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_171_p3),54));
    p_Result_s_fu_145_p3 <= ireg_V_fu_138_p1(63 downto 63);
    select_ln588_fu_265_p3 <= 
        ap_const_lv12_FFF when (tmp_6_fu_257_p3(0) = '1') else 
        ap_const_lv12_0;
    select_ln603_1_fu_333_p3 <= 
        select_ln588_fu_265_p3 when (and_ln585_fu_297_p2(0) = '1') else 
        trunc_ln583_fu_241_p1;
    select_ln603_2_fu_393_p3 <= 
        select_ln603_fu_381_p3 when (or_ln603_reg_467(0) = '1') else 
        select_ln603_1_reg_473;
    select_ln603_fu_381_p3 <= 
        shl_ln604_fu_366_p2 when (and_ln603_reg_462(0) = '1') else 
        trunc_ln586_fu_358_p1;
        sext_ln581_fu_346_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_reg_442),32));

    sext_ln581cast_fu_362_p1 <= sext_ln581_fu_346_p1(12 - 1 downto 0);
    sh_amt_fu_227_p3 <= 
        add_ln581_fu_215_p2 when (icmp_ln581_fu_209_p2(0) = '1') else 
        sub_ln581_fu_221_p2;
    shl_ln604_fu_366_p2 <= std_logic_vector(shift_left(unsigned(trunc_ln583_reg_452),to_integer(unsigned('0' & sext_ln581cast_fu_362_p1(12-1 downto 0)))));
    sub_ln581_fu_221_p2 <= std_logic_vector(unsigned(ap_const_lv12_8) - unsigned(F2_fu_203_p2));
    tmp_6_fu_257_p3 <= ireg_V_fu_138_p1(63 downto 63);
    tmp_fu_171_p3 <= (ap_const_lv1_1 & trunc_ln565_fu_167_p1);
    trunc_ln556_fu_141_p1 <= ireg_V_fu_138_p1(63 - 1 downto 0);
    trunc_ln565_fu_167_p1 <= ireg_V_fu_138_p1(52 - 1 downto 0);
    trunc_ln583_fu_241_p1 <= man_V_2_fu_189_p3(12 - 1 downto 0);
    trunc_ln586_fu_358_p1 <= ashr_ln586_fu_353_p2(12 - 1 downto 0);

    x_in_blk_n_AR_assign_proc : process(ap_start, ap_CS_fsm_state1, m_axi_x_in_ARREADY)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            x_in_blk_n_AR <= m_axi_x_in_ARREADY;
        else 
            x_in_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    x_in_blk_n_R_assign_proc : process(m_axi_x_in_RVALID, ap_CS_fsm_state8, icmp_ln14_fu_126_p2)
    begin
        if (((icmp_ln14_fu_126_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            x_in_blk_n_R <= m_axi_x_in_RVALID;
        else 
            x_in_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    x_int_V_address0 <= zext_ln15_fu_341_p1(4 - 1 downto 0);

    x_int_V_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            x_int_V_ce0 <= ap_const_logic_1;
        else 
            x_int_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    x_int_V_d0 <= 
        select_ln603_2_fu_393_p3 when (or_ln603_2_fu_399_p2(0) = '1') else 
        ap_const_lv12_0;

    x_int_V_we0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            x_int_V_we0 <= ap_const_logic_1;
        else 
            x_int_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln571_fu_371_p2 <= (icmp_ln571_reg_437 xor ap_const_lv1_1);
    xor_ln581_fu_315_p2 <= (or_ln581_fu_309_p2 xor ap_const_lv1_1);
    xor_ln582_fu_279_p2 <= (or_ln582_fu_273_p2 xor ap_const_lv1_1);
    xor_ln585_fu_291_p2 <= (icmp_ln585_fu_245_p2 xor ap_const_lv1_1);
    zext_ln13_fu_115_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_in_offset),64));
    zext_ln15_fu_341_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_103),64));
    zext_ln461_fu_163_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_tmp_V_fu_153_p4),12));
    zext_ln586_fu_349_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln581_fu_346_p1),54));
end behav;
