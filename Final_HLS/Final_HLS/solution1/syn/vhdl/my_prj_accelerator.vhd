-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity my_prj_accelerator is
generic (
    C_M_AXI_GMEM_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_DATA_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_BUSER_WIDTH-1 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of my_prj_accelerator is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "my_prj_accelerator,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=548,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=0,HLS_SYN_FF=5905,HLS_SYN_LUT=66883,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal x : STD_LOGIC_VECTOR (31 downto 0);
    signal score : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_AWVALID : STD_LOGIC;
    signal gmem_AWREADY : STD_LOGIC;
    signal gmem_WVALID : STD_LOGIC;
    signal gmem_WREADY : STD_LOGIC;
    signal gmem_ARVALID : STD_LOGIC;
    signal gmem_ARREADY : STD_LOGIC;
    signal gmem_RVALID : STD_LOGIC;
    signal gmem_RREADY : STD_LOGIC;
    signal gmem_RDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_RLAST : STD_LOGIC;
    signal gmem_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BVALID : STD_LOGIC;
    signal gmem_BREADY : STD_LOGIC;
    signal gmem_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal score3_reg_116 : STD_LOGIC_VECTOR (28 downto 0);
    signal x1_reg_121 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_decision_function_90_fu_74_ap_return : STD_LOGIC_VECTOR (11 downto 0);
    signal score_int_0_V_reg_126 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_decision_function_90_fu_74_ap_ready : STD_LOGIC;
    signal grp_decision_function_90_fu_74_ap_done : STD_LOGIC;
    signal x_int_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal x_int_V_ce0 : STD_LOGIC;
    signal x_int_V_we0 : STD_LOGIC;
    signal x_int_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal x_int_V_ce1 : STD_LOGIC;
    signal x_int_V_q1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_decision_function_90_fu_74_ap_start : STD_LOGIC;
    signal grp_decision_function_90_fu_74_ap_idle : STD_LOGIC;
    signal grp_decision_function_90_fu_74_x_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_decision_function_90_fu_74_x_V_ce0 : STD_LOGIC;
    signal grp_decision_function_90_fu_74_x_V_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_decision_function_90_fu_74_x_V_ce1 : STD_LOGIC;
    signal grp_copy_output_fu_79_ap_start : STD_LOGIC;
    signal grp_copy_output_fu_79_ap_done : STD_LOGIC;
    signal grp_copy_output_fu_79_ap_idle : STD_LOGIC;
    signal grp_copy_output_fu_79_ap_ready : STD_LOGIC;
    signal grp_copy_output_fu_79_m_axi_score_out_AWVALID : STD_LOGIC;
    signal grp_copy_output_fu_79_m_axi_score_out_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_copy_output_fu_79_m_axi_score_out_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_copy_output_fu_79_m_axi_score_out_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_copy_output_fu_79_m_axi_score_out_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_copy_output_fu_79_m_axi_score_out_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_copy_output_fu_79_m_axi_score_out_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_copy_output_fu_79_m_axi_score_out_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_copy_output_fu_79_m_axi_score_out_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_copy_output_fu_79_m_axi_score_out_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_copy_output_fu_79_m_axi_score_out_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_copy_output_fu_79_m_axi_score_out_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_copy_output_fu_79_m_axi_score_out_WVALID : STD_LOGIC;
    signal grp_copy_output_fu_79_m_axi_score_out_WDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_copy_output_fu_79_m_axi_score_out_WSTRB : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_copy_output_fu_79_m_axi_score_out_WLAST : STD_LOGIC;
    signal grp_copy_output_fu_79_m_axi_score_out_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_copy_output_fu_79_m_axi_score_out_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_copy_output_fu_79_m_axi_score_out_ARVALID : STD_LOGIC;
    signal grp_copy_output_fu_79_m_axi_score_out_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_copy_output_fu_79_m_axi_score_out_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_copy_output_fu_79_m_axi_score_out_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_copy_output_fu_79_m_axi_score_out_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_copy_output_fu_79_m_axi_score_out_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_copy_output_fu_79_m_axi_score_out_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_copy_output_fu_79_m_axi_score_out_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_copy_output_fu_79_m_axi_score_out_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_copy_output_fu_79_m_axi_score_out_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_copy_output_fu_79_m_axi_score_out_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_copy_output_fu_79_m_axi_score_out_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_copy_output_fu_79_m_axi_score_out_RREADY : STD_LOGIC;
    signal grp_copy_output_fu_79_m_axi_score_out_BREADY : STD_LOGIC;
    signal grp_copy_input_fu_88_ap_start : STD_LOGIC;
    signal grp_copy_input_fu_88_ap_done : STD_LOGIC;
    signal grp_copy_input_fu_88_ap_idle : STD_LOGIC;
    signal grp_copy_input_fu_88_ap_ready : STD_LOGIC;
    signal grp_copy_input_fu_88_m_axi_x_in_AWVALID : STD_LOGIC;
    signal grp_copy_input_fu_88_m_axi_x_in_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_copy_input_fu_88_m_axi_x_in_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_copy_input_fu_88_m_axi_x_in_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_copy_input_fu_88_m_axi_x_in_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_copy_input_fu_88_m_axi_x_in_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_copy_input_fu_88_m_axi_x_in_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_copy_input_fu_88_m_axi_x_in_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_copy_input_fu_88_m_axi_x_in_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_copy_input_fu_88_m_axi_x_in_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_copy_input_fu_88_m_axi_x_in_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_copy_input_fu_88_m_axi_x_in_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_copy_input_fu_88_m_axi_x_in_WVALID : STD_LOGIC;
    signal grp_copy_input_fu_88_m_axi_x_in_WDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_copy_input_fu_88_m_axi_x_in_WSTRB : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_copy_input_fu_88_m_axi_x_in_WLAST : STD_LOGIC;
    signal grp_copy_input_fu_88_m_axi_x_in_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_copy_input_fu_88_m_axi_x_in_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_copy_input_fu_88_m_axi_x_in_ARVALID : STD_LOGIC;
    signal grp_copy_input_fu_88_m_axi_x_in_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_copy_input_fu_88_m_axi_x_in_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_copy_input_fu_88_m_axi_x_in_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_copy_input_fu_88_m_axi_x_in_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_copy_input_fu_88_m_axi_x_in_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_copy_input_fu_88_m_axi_x_in_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_copy_input_fu_88_m_axi_x_in_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_copy_input_fu_88_m_axi_x_in_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_copy_input_fu_88_m_axi_x_in_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_copy_input_fu_88_m_axi_x_in_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_copy_input_fu_88_m_axi_x_in_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_copy_input_fu_88_m_axi_x_in_RREADY : STD_LOGIC;
    signal grp_copy_input_fu_88_m_axi_x_in_BREADY : STD_LOGIC;
    signal grp_copy_input_fu_88_x_int_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_copy_input_fu_88_x_int_V_ce0 : STD_LOGIC;
    signal grp_copy_input_fu_88_x_int_V_we0 : STD_LOGIC;
    signal grp_copy_input_fu_88_x_int_V_d0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_decision_function_90_fu_74_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_copy_output_fu_79_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_copy_input_fu_88_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);

    component decision_function_90 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        x_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        x_V_ce0 : OUT STD_LOGIC;
        x_V_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
        x_V_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        x_V_ce1 : OUT STD_LOGIC;
        x_V_q1 : IN STD_LOGIC_VECTOR (11 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component copy_output IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        score_int_0_V_read : IN STD_LOGIC_VECTOR (11 downto 0);
        m_axi_score_out_AWVALID : OUT STD_LOGIC;
        m_axi_score_out_AWREADY : IN STD_LOGIC;
        m_axi_score_out_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_score_out_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_score_out_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_score_out_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_score_out_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_score_out_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_score_out_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_score_out_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_score_out_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_score_out_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_score_out_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_score_out_WVALID : OUT STD_LOGIC;
        m_axi_score_out_WREADY : IN STD_LOGIC;
        m_axi_score_out_WDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_score_out_WSTRB : OUT STD_LOGIC_VECTOR (7 downto 0);
        m_axi_score_out_WLAST : OUT STD_LOGIC;
        m_axi_score_out_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_score_out_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_score_out_ARVALID : OUT STD_LOGIC;
        m_axi_score_out_ARREADY : IN STD_LOGIC;
        m_axi_score_out_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_score_out_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_score_out_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_score_out_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_score_out_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_score_out_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_score_out_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_score_out_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_score_out_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_score_out_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_score_out_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_score_out_RVALID : IN STD_LOGIC;
        m_axi_score_out_RREADY : OUT STD_LOGIC;
        m_axi_score_out_RDATA : IN STD_LOGIC_VECTOR (63 downto 0);
        m_axi_score_out_RLAST : IN STD_LOGIC;
        m_axi_score_out_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_score_out_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_score_out_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_score_out_BVALID : IN STD_LOGIC;
        m_axi_score_out_BREADY : OUT STD_LOGIC;
        m_axi_score_out_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_score_out_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_score_out_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        score_out_offset : IN STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component copy_input IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_x_in_AWVALID : OUT STD_LOGIC;
        m_axi_x_in_AWREADY : IN STD_LOGIC;
        m_axi_x_in_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_x_in_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_x_in_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_x_in_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_x_in_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_x_in_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_x_in_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_x_in_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_x_in_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_x_in_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_x_in_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_x_in_WVALID : OUT STD_LOGIC;
        m_axi_x_in_WREADY : IN STD_LOGIC;
        m_axi_x_in_WDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_x_in_WSTRB : OUT STD_LOGIC_VECTOR (7 downto 0);
        m_axi_x_in_WLAST : OUT STD_LOGIC;
        m_axi_x_in_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_x_in_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_x_in_ARVALID : OUT STD_LOGIC;
        m_axi_x_in_ARREADY : IN STD_LOGIC;
        m_axi_x_in_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_x_in_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_x_in_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_x_in_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_x_in_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_x_in_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_x_in_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_x_in_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_x_in_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_x_in_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_x_in_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_x_in_RVALID : IN STD_LOGIC;
        m_axi_x_in_RREADY : OUT STD_LOGIC;
        m_axi_x_in_RDATA : IN STD_LOGIC_VECTOR (63 downto 0);
        m_axi_x_in_RLAST : IN STD_LOGIC;
        m_axi_x_in_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_x_in_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_x_in_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_x_in_BVALID : IN STD_LOGIC;
        m_axi_x_in_BREADY : OUT STD_LOGIC;
        m_axi_x_in_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_x_in_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_x_in_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        x_in_offset : IN STD_LOGIC_VECTOR (28 downto 0);
        x_int_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        x_int_V_ce0 : OUT STD_LOGIC;
        x_int_V_we0 : OUT STD_LOGIC;
        x_int_V_d0 : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component my_prj_acceleratofYi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (11 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component my_prj_accelerator_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        x : OUT STD_LOGIC_VECTOR (31 downto 0);
        score : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component my_prj_accelerator_gmem_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (63 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (7 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    my_prj_accelerator_control_s_axi_U : component my_prj_accelerator_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        x => x,
        score => score);

    my_prj_accelerator_gmem_m_axi_U : component my_prj_accelerator_gmem_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 64,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem_AWVALID,
        AWREADY => m_axi_gmem_AWREADY,
        AWADDR => m_axi_gmem_AWADDR,
        AWID => m_axi_gmem_AWID,
        AWLEN => m_axi_gmem_AWLEN,
        AWSIZE => m_axi_gmem_AWSIZE,
        AWBURST => m_axi_gmem_AWBURST,
        AWLOCK => m_axi_gmem_AWLOCK,
        AWCACHE => m_axi_gmem_AWCACHE,
        AWPROT => m_axi_gmem_AWPROT,
        AWQOS => m_axi_gmem_AWQOS,
        AWREGION => m_axi_gmem_AWREGION,
        AWUSER => m_axi_gmem_AWUSER,
        WVALID => m_axi_gmem_WVALID,
        WREADY => m_axi_gmem_WREADY,
        WDATA => m_axi_gmem_WDATA,
        WSTRB => m_axi_gmem_WSTRB,
        WLAST => m_axi_gmem_WLAST,
        WID => m_axi_gmem_WID,
        WUSER => m_axi_gmem_WUSER,
        ARVALID => m_axi_gmem_ARVALID,
        ARREADY => m_axi_gmem_ARREADY,
        ARADDR => m_axi_gmem_ARADDR,
        ARID => m_axi_gmem_ARID,
        ARLEN => m_axi_gmem_ARLEN,
        ARSIZE => m_axi_gmem_ARSIZE,
        ARBURST => m_axi_gmem_ARBURST,
        ARLOCK => m_axi_gmem_ARLOCK,
        ARCACHE => m_axi_gmem_ARCACHE,
        ARPROT => m_axi_gmem_ARPROT,
        ARQOS => m_axi_gmem_ARQOS,
        ARREGION => m_axi_gmem_ARREGION,
        ARUSER => m_axi_gmem_ARUSER,
        RVALID => m_axi_gmem_RVALID,
        RREADY => m_axi_gmem_RREADY,
        RDATA => m_axi_gmem_RDATA,
        RLAST => m_axi_gmem_RLAST,
        RID => m_axi_gmem_RID,
        RUSER => m_axi_gmem_RUSER,
        RRESP => m_axi_gmem_RRESP,
        BVALID => m_axi_gmem_BVALID,
        BREADY => m_axi_gmem_BREADY,
        BRESP => m_axi_gmem_BRESP,
        BID => m_axi_gmem_BID,
        BUSER => m_axi_gmem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => gmem_ARVALID,
        I_ARREADY => gmem_ARREADY,
        I_ARADDR => grp_copy_input_fu_88_m_axi_x_in_ARADDR,
        I_ARID => grp_copy_input_fu_88_m_axi_x_in_ARID,
        I_ARLEN => grp_copy_input_fu_88_m_axi_x_in_ARLEN,
        I_ARSIZE => grp_copy_input_fu_88_m_axi_x_in_ARSIZE,
        I_ARLOCK => grp_copy_input_fu_88_m_axi_x_in_ARLOCK,
        I_ARCACHE => grp_copy_input_fu_88_m_axi_x_in_ARCACHE,
        I_ARQOS => grp_copy_input_fu_88_m_axi_x_in_ARQOS,
        I_ARPROT => grp_copy_input_fu_88_m_axi_x_in_ARPROT,
        I_ARUSER => grp_copy_input_fu_88_m_axi_x_in_ARUSER,
        I_ARBURST => grp_copy_input_fu_88_m_axi_x_in_ARBURST,
        I_ARREGION => grp_copy_input_fu_88_m_axi_x_in_ARREGION,
        I_RVALID => gmem_RVALID,
        I_RREADY => gmem_RREADY,
        I_RDATA => gmem_RDATA,
        I_RID => gmem_RID,
        I_RUSER => gmem_RUSER,
        I_RRESP => gmem_RRESP,
        I_RLAST => gmem_RLAST,
        I_AWVALID => gmem_AWVALID,
        I_AWREADY => gmem_AWREADY,
        I_AWADDR => grp_copy_output_fu_79_m_axi_score_out_AWADDR,
        I_AWID => grp_copy_output_fu_79_m_axi_score_out_AWID,
        I_AWLEN => grp_copy_output_fu_79_m_axi_score_out_AWLEN,
        I_AWSIZE => grp_copy_output_fu_79_m_axi_score_out_AWSIZE,
        I_AWLOCK => grp_copy_output_fu_79_m_axi_score_out_AWLOCK,
        I_AWCACHE => grp_copy_output_fu_79_m_axi_score_out_AWCACHE,
        I_AWQOS => grp_copy_output_fu_79_m_axi_score_out_AWQOS,
        I_AWPROT => grp_copy_output_fu_79_m_axi_score_out_AWPROT,
        I_AWUSER => grp_copy_output_fu_79_m_axi_score_out_AWUSER,
        I_AWBURST => grp_copy_output_fu_79_m_axi_score_out_AWBURST,
        I_AWREGION => grp_copy_output_fu_79_m_axi_score_out_AWREGION,
        I_WVALID => gmem_WVALID,
        I_WREADY => gmem_WREADY,
        I_WDATA => grp_copy_output_fu_79_m_axi_score_out_WDATA,
        I_WID => grp_copy_output_fu_79_m_axi_score_out_WID,
        I_WUSER => grp_copy_output_fu_79_m_axi_score_out_WUSER,
        I_WLAST => grp_copy_output_fu_79_m_axi_score_out_WLAST,
        I_WSTRB => grp_copy_output_fu_79_m_axi_score_out_WSTRB,
        I_BVALID => gmem_BVALID,
        I_BREADY => gmem_BREADY,
        I_BRESP => gmem_BRESP,
        I_BID => gmem_BID,
        I_BUSER => gmem_BUSER);

    x_int_V_U : component my_prj_acceleratofYi
    generic map (
        DataWidth => 12,
        AddressRange => 12,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => x_int_V_address0,
        ce0 => x_int_V_ce0,
        we0 => x_int_V_we0,
        d0 => grp_copy_input_fu_88_x_int_V_d0,
        q0 => x_int_V_q0,
        address1 => grp_decision_function_90_fu_74_x_V_address1,
        ce1 => x_int_V_ce1,
        q1 => x_int_V_q1);

    grp_decision_function_90_fu_74 : component decision_function_90
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_decision_function_90_fu_74_ap_start,
        ap_done => grp_decision_function_90_fu_74_ap_done,
        ap_idle => grp_decision_function_90_fu_74_ap_idle,
        ap_ready => grp_decision_function_90_fu_74_ap_ready,
        x_V_address0 => grp_decision_function_90_fu_74_x_V_address0,
        x_V_ce0 => grp_decision_function_90_fu_74_x_V_ce0,
        x_V_q0 => x_int_V_q0,
        x_V_address1 => grp_decision_function_90_fu_74_x_V_address1,
        x_V_ce1 => grp_decision_function_90_fu_74_x_V_ce1,
        x_V_q1 => x_int_V_q1,
        ap_return => grp_decision_function_90_fu_74_ap_return);

    grp_copy_output_fu_79 : component copy_output
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_copy_output_fu_79_ap_start,
        ap_done => grp_copy_output_fu_79_ap_done,
        ap_idle => grp_copy_output_fu_79_ap_idle,
        ap_ready => grp_copy_output_fu_79_ap_ready,
        score_int_0_V_read => score_int_0_V_reg_126,
        m_axi_score_out_AWVALID => grp_copy_output_fu_79_m_axi_score_out_AWVALID,
        m_axi_score_out_AWREADY => gmem_AWREADY,
        m_axi_score_out_AWADDR => grp_copy_output_fu_79_m_axi_score_out_AWADDR,
        m_axi_score_out_AWID => grp_copy_output_fu_79_m_axi_score_out_AWID,
        m_axi_score_out_AWLEN => grp_copy_output_fu_79_m_axi_score_out_AWLEN,
        m_axi_score_out_AWSIZE => grp_copy_output_fu_79_m_axi_score_out_AWSIZE,
        m_axi_score_out_AWBURST => grp_copy_output_fu_79_m_axi_score_out_AWBURST,
        m_axi_score_out_AWLOCK => grp_copy_output_fu_79_m_axi_score_out_AWLOCK,
        m_axi_score_out_AWCACHE => grp_copy_output_fu_79_m_axi_score_out_AWCACHE,
        m_axi_score_out_AWPROT => grp_copy_output_fu_79_m_axi_score_out_AWPROT,
        m_axi_score_out_AWQOS => grp_copy_output_fu_79_m_axi_score_out_AWQOS,
        m_axi_score_out_AWREGION => grp_copy_output_fu_79_m_axi_score_out_AWREGION,
        m_axi_score_out_AWUSER => grp_copy_output_fu_79_m_axi_score_out_AWUSER,
        m_axi_score_out_WVALID => grp_copy_output_fu_79_m_axi_score_out_WVALID,
        m_axi_score_out_WREADY => gmem_WREADY,
        m_axi_score_out_WDATA => grp_copy_output_fu_79_m_axi_score_out_WDATA,
        m_axi_score_out_WSTRB => grp_copy_output_fu_79_m_axi_score_out_WSTRB,
        m_axi_score_out_WLAST => grp_copy_output_fu_79_m_axi_score_out_WLAST,
        m_axi_score_out_WID => grp_copy_output_fu_79_m_axi_score_out_WID,
        m_axi_score_out_WUSER => grp_copy_output_fu_79_m_axi_score_out_WUSER,
        m_axi_score_out_ARVALID => grp_copy_output_fu_79_m_axi_score_out_ARVALID,
        m_axi_score_out_ARREADY => ap_const_logic_0,
        m_axi_score_out_ARADDR => grp_copy_output_fu_79_m_axi_score_out_ARADDR,
        m_axi_score_out_ARID => grp_copy_output_fu_79_m_axi_score_out_ARID,
        m_axi_score_out_ARLEN => grp_copy_output_fu_79_m_axi_score_out_ARLEN,
        m_axi_score_out_ARSIZE => grp_copy_output_fu_79_m_axi_score_out_ARSIZE,
        m_axi_score_out_ARBURST => grp_copy_output_fu_79_m_axi_score_out_ARBURST,
        m_axi_score_out_ARLOCK => grp_copy_output_fu_79_m_axi_score_out_ARLOCK,
        m_axi_score_out_ARCACHE => grp_copy_output_fu_79_m_axi_score_out_ARCACHE,
        m_axi_score_out_ARPROT => grp_copy_output_fu_79_m_axi_score_out_ARPROT,
        m_axi_score_out_ARQOS => grp_copy_output_fu_79_m_axi_score_out_ARQOS,
        m_axi_score_out_ARREGION => grp_copy_output_fu_79_m_axi_score_out_ARREGION,
        m_axi_score_out_ARUSER => grp_copy_output_fu_79_m_axi_score_out_ARUSER,
        m_axi_score_out_RVALID => ap_const_logic_0,
        m_axi_score_out_RREADY => grp_copy_output_fu_79_m_axi_score_out_RREADY,
        m_axi_score_out_RDATA => ap_const_lv64_0,
        m_axi_score_out_RLAST => ap_const_logic_0,
        m_axi_score_out_RID => ap_const_lv1_0,
        m_axi_score_out_RUSER => ap_const_lv1_0,
        m_axi_score_out_RRESP => ap_const_lv2_0,
        m_axi_score_out_BVALID => gmem_BVALID,
        m_axi_score_out_BREADY => grp_copy_output_fu_79_m_axi_score_out_BREADY,
        m_axi_score_out_BRESP => gmem_BRESP,
        m_axi_score_out_BID => gmem_BID,
        m_axi_score_out_BUSER => gmem_BUSER,
        score_out_offset => score3_reg_116);

    grp_copy_input_fu_88 : component copy_input
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_copy_input_fu_88_ap_start,
        ap_done => grp_copy_input_fu_88_ap_done,
        ap_idle => grp_copy_input_fu_88_ap_idle,
        ap_ready => grp_copy_input_fu_88_ap_ready,
        m_axi_x_in_AWVALID => grp_copy_input_fu_88_m_axi_x_in_AWVALID,
        m_axi_x_in_AWREADY => ap_const_logic_0,
        m_axi_x_in_AWADDR => grp_copy_input_fu_88_m_axi_x_in_AWADDR,
        m_axi_x_in_AWID => grp_copy_input_fu_88_m_axi_x_in_AWID,
        m_axi_x_in_AWLEN => grp_copy_input_fu_88_m_axi_x_in_AWLEN,
        m_axi_x_in_AWSIZE => grp_copy_input_fu_88_m_axi_x_in_AWSIZE,
        m_axi_x_in_AWBURST => grp_copy_input_fu_88_m_axi_x_in_AWBURST,
        m_axi_x_in_AWLOCK => grp_copy_input_fu_88_m_axi_x_in_AWLOCK,
        m_axi_x_in_AWCACHE => grp_copy_input_fu_88_m_axi_x_in_AWCACHE,
        m_axi_x_in_AWPROT => grp_copy_input_fu_88_m_axi_x_in_AWPROT,
        m_axi_x_in_AWQOS => grp_copy_input_fu_88_m_axi_x_in_AWQOS,
        m_axi_x_in_AWREGION => grp_copy_input_fu_88_m_axi_x_in_AWREGION,
        m_axi_x_in_AWUSER => grp_copy_input_fu_88_m_axi_x_in_AWUSER,
        m_axi_x_in_WVALID => grp_copy_input_fu_88_m_axi_x_in_WVALID,
        m_axi_x_in_WREADY => ap_const_logic_0,
        m_axi_x_in_WDATA => grp_copy_input_fu_88_m_axi_x_in_WDATA,
        m_axi_x_in_WSTRB => grp_copy_input_fu_88_m_axi_x_in_WSTRB,
        m_axi_x_in_WLAST => grp_copy_input_fu_88_m_axi_x_in_WLAST,
        m_axi_x_in_WID => grp_copy_input_fu_88_m_axi_x_in_WID,
        m_axi_x_in_WUSER => grp_copy_input_fu_88_m_axi_x_in_WUSER,
        m_axi_x_in_ARVALID => grp_copy_input_fu_88_m_axi_x_in_ARVALID,
        m_axi_x_in_ARREADY => gmem_ARREADY,
        m_axi_x_in_ARADDR => grp_copy_input_fu_88_m_axi_x_in_ARADDR,
        m_axi_x_in_ARID => grp_copy_input_fu_88_m_axi_x_in_ARID,
        m_axi_x_in_ARLEN => grp_copy_input_fu_88_m_axi_x_in_ARLEN,
        m_axi_x_in_ARSIZE => grp_copy_input_fu_88_m_axi_x_in_ARSIZE,
        m_axi_x_in_ARBURST => grp_copy_input_fu_88_m_axi_x_in_ARBURST,
        m_axi_x_in_ARLOCK => grp_copy_input_fu_88_m_axi_x_in_ARLOCK,
        m_axi_x_in_ARCACHE => grp_copy_input_fu_88_m_axi_x_in_ARCACHE,
        m_axi_x_in_ARPROT => grp_copy_input_fu_88_m_axi_x_in_ARPROT,
        m_axi_x_in_ARQOS => grp_copy_input_fu_88_m_axi_x_in_ARQOS,
        m_axi_x_in_ARREGION => grp_copy_input_fu_88_m_axi_x_in_ARREGION,
        m_axi_x_in_ARUSER => grp_copy_input_fu_88_m_axi_x_in_ARUSER,
        m_axi_x_in_RVALID => gmem_RVALID,
        m_axi_x_in_RREADY => grp_copy_input_fu_88_m_axi_x_in_RREADY,
        m_axi_x_in_RDATA => gmem_RDATA,
        m_axi_x_in_RLAST => gmem_RLAST,
        m_axi_x_in_RID => gmem_RID,
        m_axi_x_in_RUSER => gmem_RUSER,
        m_axi_x_in_RRESP => gmem_RRESP,
        m_axi_x_in_BVALID => ap_const_logic_0,
        m_axi_x_in_BREADY => grp_copy_input_fu_88_m_axi_x_in_BREADY,
        m_axi_x_in_BRESP => ap_const_lv2_0,
        m_axi_x_in_BID => ap_const_lv1_0,
        m_axi_x_in_BUSER => ap_const_lv1_0,
        x_in_offset => x1_reg_121,
        x_int_V_address0 => grp_copy_input_fu_88_x_int_V_address0,
        x_int_V_ce0 => grp_copy_input_fu_88_x_int_V_ce0,
        x_int_V_we0 => grp_copy_input_fu_88_x_int_V_we0,
        x_int_V_d0 => grp_copy_input_fu_88_x_int_V_d0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_copy_input_fu_88_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_copy_input_fu_88_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    grp_copy_input_fu_88_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_copy_input_fu_88_ap_ready = ap_const_logic_1)) then 
                    grp_copy_input_fu_88_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_copy_output_fu_79_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_copy_output_fu_79_ap_start_reg <= ap_const_logic_0;
            else
                if (((grp_decision_function_90_fu_74_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                    grp_copy_output_fu_79_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_copy_output_fu_79_ap_ready = ap_const_logic_1)) then 
                    grp_copy_output_fu_79_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_decision_function_90_fu_74_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_decision_function_90_fu_74_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    grp_decision_function_90_fu_74_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_decision_function_90_fu_74_ap_ready = ap_const_logic_1)) then 
                    grp_decision_function_90_fu_74_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                score3_reg_116 <= score(31 downto 3);
                x1_reg_121 <= x(31 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_decision_function_90_fu_74_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                score_int_0_V_reg_126 <= grp_decision_function_90_fu_74_ap_return;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state5, grp_decision_function_90_fu_74_ap_done, grp_copy_output_fu_79_ap_done, grp_copy_input_fu_88_ap_done, ap_CS_fsm_state6, ap_CS_fsm_state3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((grp_copy_input_fu_88_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((grp_decision_function_90_fu_74_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((grp_copy_output_fu_79_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_done_assign_proc : process(grp_copy_output_fu_79_ap_done, ap_CS_fsm_state6)
    begin
        if (((grp_copy_output_fu_79_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_copy_output_fu_79_ap_done, ap_CS_fsm_state6)
    begin
        if (((grp_copy_output_fu_79_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    gmem_ARVALID_assign_proc : process(grp_copy_input_fu_88_m_axi_x_in_ARVALID, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem_ARVALID <= grp_copy_input_fu_88_m_axi_x_in_ARVALID;
        else 
            gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_AWVALID_assign_proc : process(ap_CS_fsm_state5, grp_copy_output_fu_79_m_axi_score_out_AWVALID, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            gmem_AWVALID <= grp_copy_output_fu_79_m_axi_score_out_AWVALID;
        else 
            gmem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_BREADY_assign_proc : process(ap_CS_fsm_state5, grp_copy_output_fu_79_m_axi_score_out_BREADY, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            gmem_BREADY <= grp_copy_output_fu_79_m_axi_score_out_BREADY;
        else 
            gmem_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_RREADY_assign_proc : process(grp_copy_input_fu_88_m_axi_x_in_RREADY, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem_RREADY <= grp_copy_input_fu_88_m_axi_x_in_RREADY;
        else 
            gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_WVALID_assign_proc : process(ap_CS_fsm_state5, grp_copy_output_fu_79_m_axi_score_out_WVALID, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            gmem_WVALID <= grp_copy_output_fu_79_m_axi_score_out_WVALID;
        else 
            gmem_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    grp_copy_input_fu_88_ap_start <= grp_copy_input_fu_88_ap_start_reg;
    grp_copy_output_fu_79_ap_start <= grp_copy_output_fu_79_ap_start_reg;
    grp_decision_function_90_fu_74_ap_start <= grp_decision_function_90_fu_74_ap_start_reg;

    x_int_V_address0_assign_proc : process(ap_CS_fsm_state5, grp_decision_function_90_fu_74_x_V_address0, grp_copy_input_fu_88_x_int_V_address0, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            x_int_V_address0 <= grp_copy_input_fu_88_x_int_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            x_int_V_address0 <= grp_decision_function_90_fu_74_x_V_address0;
        else 
            x_int_V_address0 <= "XXXX";
        end if; 
    end process;


    x_int_V_ce0_assign_proc : process(ap_CS_fsm_state5, grp_decision_function_90_fu_74_x_V_ce0, grp_copy_input_fu_88_x_int_V_ce0, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            x_int_V_ce0 <= grp_copy_input_fu_88_x_int_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            x_int_V_ce0 <= grp_decision_function_90_fu_74_x_V_ce0;
        else 
            x_int_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    x_int_V_ce1_assign_proc : process(ap_CS_fsm_state5, grp_decision_function_90_fu_74_x_V_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            x_int_V_ce1 <= grp_decision_function_90_fu_74_x_V_ce1;
        else 
            x_int_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    x_int_V_we0_assign_proc : process(grp_copy_input_fu_88_x_int_V_we0, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            x_int_V_we0 <= grp_copy_input_fu_88_x_int_V_we0;
        else 
            x_int_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
