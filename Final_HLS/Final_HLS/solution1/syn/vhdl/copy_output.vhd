-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity copy_output is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    score_int_0_V_read : IN STD_LOGIC_VECTOR (11 downto 0);
    m_axi_score_out_AWVALID : OUT STD_LOGIC;
    m_axi_score_out_AWREADY : IN STD_LOGIC;
    m_axi_score_out_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_score_out_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_score_out_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_score_out_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_score_out_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_score_out_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_score_out_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_score_out_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_score_out_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_score_out_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_score_out_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_score_out_WVALID : OUT STD_LOGIC;
    m_axi_score_out_WREADY : IN STD_LOGIC;
    m_axi_score_out_WDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_score_out_WSTRB : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_score_out_WLAST : OUT STD_LOGIC;
    m_axi_score_out_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_score_out_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_score_out_ARVALID : OUT STD_LOGIC;
    m_axi_score_out_ARREADY : IN STD_LOGIC;
    m_axi_score_out_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_score_out_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_score_out_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_score_out_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_score_out_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_score_out_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_score_out_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_score_out_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_score_out_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_score_out_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_score_out_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_score_out_RVALID : IN STD_LOGIC;
    m_axi_score_out_RREADY : OUT STD_LOGIC;
    m_axi_score_out_RDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    m_axi_score_out_RLAST : IN STD_LOGIC;
    m_axi_score_out_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_score_out_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_score_out_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_score_out_BVALID : IN STD_LOGIC;
    m_axi_score_out_BREADY : OUT STD_LOGIC;
    m_axi_score_out_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_score_out_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_score_out_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    score_out_offset : IN STD_LOGIC_VECTOR (28 downto 0) );
end;


architecture behav of copy_output is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv20_FFFFF : STD_LOGIC_VECTOR (19 downto 0) := "11111111111111111111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_FFFFFFCB : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111001011";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv12_FFF : STD_LOGIC_VECTOR (11 downto 0) := "111111111111";
    constant ap_const_lv12_FCB : STD_LOGIC_VECTOR (11 downto 0) := "111111001011";
    constant ap_const_lv32_FFFFFFCA : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111001010";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv11_3FE : STD_LOGIC_VECTOR (10 downto 0) := "01111111110";
    constant ap_const_lv11_4 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal score_out_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal score_out_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal score_out_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal icmp_ln885_fu_126_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln885_reg_437 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_132_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_442 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln888_fu_146_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln888_reg_447 : STD_LOGIC_VECTOR (11 downto 0);
    signal l_fu_172_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_reg_455 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln893_fu_180_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln893_reg_460 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln894_fu_184_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln894_reg_465 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal or_ln_fu_291_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln_reg_471 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln908_fu_299_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln908_reg_476 : STD_LOGIC_VECTOR (0 downto 0);
    signal lshr_ln_reg_481 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_4_reg_486 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln885_fu_430_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln885_reg_497 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln19_fu_375_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln889_fu_140_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Result_s_fu_154_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Result_s_13_fu_164_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln894_fu_193_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_199_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln897_fu_215_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln897_fu_219_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln897_fu_225_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal lshr_ln897_fu_229_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal and_ln897_1_fu_235_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln897_fu_209_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln897_1_fu_240_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_252_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln894_fu_189_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln899_fu_266_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Result_3_fu_272_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln899_fu_260_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln899_fu_279_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln897_fu_246_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln899_fu_285_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln908_fu_308_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln908_fu_311_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln908_fu_316_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln908_fu_326_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln907_fu_305_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln908_1_fu_331_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln908_2_fu_322_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln908_fu_335_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln908_fu_341_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln911_fu_348_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln911_fu_351_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln915_fu_389_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln915_fu_396_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln915_fu_401_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln912_fu_386_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_407_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Result_1_fu_414_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln729_fu_426_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                icmp_ln885_reg_437 <= icmp_ln885_fu_126_p2;
                l_reg_455 <= l_fu_172_p3;
                select_ln888_reg_447 <= select_ln888_fu_146_p3;
                tmp_reg_442 <= score_int_0_V_read(11 downto 11);
                trunc_ln893_reg_460 <= trunc_ln893_fu_180_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln885_reg_437 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                icmp_ln908_reg_476 <= icmp_ln908_fu_299_p2;
                    or_ln_reg_471(0) <= or_ln_fu_291_p3(0);
                sub_ln894_reg_465 <= sub_ln894_fu_184_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln885_reg_437 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                lshr_ln_reg_481 <= add_ln911_fu_351_p2(63 downto 1);
                tmp_4_reg_486 <= add_ln911_fu_351_p2(54 downto 54);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((m_axi_score_out_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                select_ln885_reg_497 <= select_ln885_fu_430_p3;
            end if;
        end if;
    end process;
    or_ln_reg_471(31 downto 1) <= "0000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, m_axi_score_out_AWREADY, m_axi_score_out_WREADY, m_axi_score_out_BVALID, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state10)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((m_axi_score_out_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((m_axi_score_out_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((m_axi_score_out_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
    add_ln894_fu_193_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFCB) + signed(sub_ln894_fu_184_p2));
    add_ln899_fu_266_p2 <= std_logic_vector(signed(ap_const_lv12_FCB) + signed(trunc_ln894_fu_189_p1));
    add_ln908_fu_311_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFCA) + signed(sub_ln894_reg_465));
    add_ln911_fu_351_p2 <= std_logic_vector(unsigned(select_ln908_fu_341_p3) + unsigned(zext_ln911_fu_348_p1));
    add_ln915_fu_401_p2 <= std_logic_vector(unsigned(select_ln915_fu_389_p3) + unsigned(sub_ln915_fu_396_p2));
    and_ln897_1_fu_235_p2 <= (select_ln888_reg_447 and lshr_ln897_fu_229_p2);
    and_ln897_fu_246_p2 <= (icmp_ln897_fu_209_p2 and icmp_ln897_1_fu_240_p2);
    and_ln899_fu_279_p2 <= (xor_ln899_fu_260_p2 and p_Result_3_fu_272_p3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, m_axi_score_out_BVALID, ap_CS_fsm_state10)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((m_axi_score_out_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(m_axi_score_out_BVALID, ap_CS_fsm_state10)
    begin
        if (((m_axi_score_out_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln729_fu_426_p1 <= p_Result_1_fu_414_p5;
    icmp_ln885_fu_126_p2 <= "1" when (score_int_0_V_read = ap_const_lv12_0) else "0";
    icmp_ln897_1_fu_240_p2 <= "0" when (and_ln897_1_fu_235_p2 = ap_const_lv12_0) else "1";
    icmp_ln897_fu_209_p2 <= "1" when (signed(tmp_2_fu_199_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln908_fu_299_p2 <= "1" when (signed(add_ln894_fu_193_p2) > signed(ap_const_lv32_0)) else "0";
    
    l_fu_172_p3_proc : process(p_Result_s_13_fu_164_p3)
    begin
        l_fu_172_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_s_13_fu_164_p3(i) = '1' then
                l_fu_172_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    lshr_ln897_fu_229_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv12_FFF),to_integer(unsigned('0' & zext_ln897_fu_225_p1(12-1 downto 0)))));
    lshr_ln908_fu_316_p2 <= std_logic_vector(shift_right(unsigned(zext_ln908_fu_308_p1),to_integer(unsigned('0' & add_ln908_fu_311_p2(31-1 downto 0)))));
    m_axi_score_out_ARADDR <= ap_const_lv32_0;
    m_axi_score_out_ARBURST <= ap_const_lv2_0;
    m_axi_score_out_ARCACHE <= ap_const_lv4_0;
    m_axi_score_out_ARID <= ap_const_lv1_0;
    m_axi_score_out_ARLEN <= ap_const_lv32_0;
    m_axi_score_out_ARLOCK <= ap_const_lv2_0;
    m_axi_score_out_ARPROT <= ap_const_lv3_0;
    m_axi_score_out_ARQOS <= ap_const_lv4_0;
    m_axi_score_out_ARREGION <= ap_const_lv4_0;
    m_axi_score_out_ARSIZE <= ap_const_lv3_0;
    m_axi_score_out_ARUSER <= ap_const_lv1_0;
    m_axi_score_out_ARVALID <= ap_const_logic_0;
    m_axi_score_out_AWADDR <= zext_ln19_fu_375_p1(32 - 1 downto 0);
    m_axi_score_out_AWBURST <= ap_const_lv2_0;
    m_axi_score_out_AWCACHE <= ap_const_lv4_0;
    m_axi_score_out_AWID <= ap_const_lv1_0;
    m_axi_score_out_AWLEN <= ap_const_lv32_1;
    m_axi_score_out_AWLOCK <= ap_const_lv2_0;
    m_axi_score_out_AWPROT <= ap_const_lv3_0;
    m_axi_score_out_AWQOS <= ap_const_lv4_0;
    m_axi_score_out_AWREGION <= ap_const_lv4_0;
    m_axi_score_out_AWSIZE <= ap_const_lv3_0;
    m_axi_score_out_AWUSER <= ap_const_lv1_0;

    m_axi_score_out_AWVALID_assign_proc : process(m_axi_score_out_AWREADY, ap_CS_fsm_state4)
    begin
        if (((m_axi_score_out_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            m_axi_score_out_AWVALID <= ap_const_logic_1;
        else 
            m_axi_score_out_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_score_out_BREADY_assign_proc : process(m_axi_score_out_BVALID, ap_CS_fsm_state10)
    begin
        if (((m_axi_score_out_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            m_axi_score_out_BREADY <= ap_const_logic_1;
        else 
            m_axi_score_out_BREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_score_out_RREADY <= ap_const_logic_0;
    m_axi_score_out_WDATA <= select_ln885_reg_497;
    m_axi_score_out_WID <= ap_const_lv1_0;
    m_axi_score_out_WLAST <= ap_const_logic_0;
    m_axi_score_out_WSTRB <= ap_const_lv8_FF;
    m_axi_score_out_WUSER <= ap_const_lv1_0;

    m_axi_score_out_WVALID_assign_proc : process(m_axi_score_out_WREADY, ap_CS_fsm_state5)
    begin
        if (((m_axi_score_out_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            m_axi_score_out_WVALID <= ap_const_logic_1;
        else 
            m_axi_score_out_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    or_ln899_fu_285_p2 <= (and_ln899_fu_279_p2 or and_ln897_fu_246_p2);
    or_ln_fu_291_p3 <= (ap_const_lv31_0 & or_ln899_fu_285_p2);
    p_Result_1_fu_414_p5 <= (tmp_1_fu_407_p3 & zext_ln912_fu_386_p1(51 downto 0));
    p_Result_3_fu_272_p3 <= select_ln888_reg_447(to_integer(unsigned(add_ln899_fu_266_p2)) downto to_integer(unsigned(add_ln899_fu_266_p2))) when (to_integer(unsigned(add_ln899_fu_266_p2))>= 0 and to_integer(unsigned(add_ln899_fu_266_p2))<=11) else "-";
    p_Result_s_13_fu_164_p3 <= (ap_const_lv20_FFFFF & p_Result_s_fu_154_p4);
    
    p_Result_s_fu_154_p4_proc : process(select_ln888_fu_146_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(12+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(12+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(12 - 1 downto 0);
    variable p_Result_s_fu_154_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(12 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(12 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(12 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(4 - 1 downto 0) := ap_const_lv32_B(4 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(4 - 1 downto 0) := ap_const_lv32_0(4 - 1 downto 0);
        v0_cpy := select_ln888_fu_146_p3;
        if (vlo_cpy(4 - 1 downto 0) > vhi_cpy(4 - 1 downto 0)) then
            vhi_cpy(4-1 downto 0) := std_logic_vector(12-1-unsigned(ap_const_lv32_0(4-1 downto 0)));
            vlo_cpy(4-1 downto 0) := std_logic_vector(12-1-unsigned(ap_const_lv32_B(4-1 downto 0)));
            for p_Result_s_fu_154_p4_i in 0 to 12-1 loop
                v0_cpy(p_Result_s_fu_154_p4_i) := select_ln888_fu_146_p3(12-1-p_Result_s_fu_154_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(4-1 downto 0)))));

        section := (others=>'0');
        section(4-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(4-1 downto 0)) - unsigned(vlo_cpy(4-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(12-1 downto 0)))));
        res_mask := res_mask(12-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_s_fu_154_p4 <= resvalue(12-1 downto 0);
    end process;


    score_out_blk_n_AW_assign_proc : process(m_axi_score_out_AWREADY, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            score_out_blk_n_AW <= m_axi_score_out_AWREADY;
        else 
            score_out_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    score_out_blk_n_B_assign_proc : process(m_axi_score_out_BVALID, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            score_out_blk_n_B <= m_axi_score_out_BVALID;
        else 
            score_out_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    score_out_blk_n_W_assign_proc : process(m_axi_score_out_WREADY, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            score_out_blk_n_W <= m_axi_score_out_WREADY;
        else 
            score_out_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    select_ln885_fu_430_p3 <= 
        ap_const_lv64_0 when (icmp_ln885_reg_437(0) = '1') else 
        bitcast_ln729_fu_426_p1;
    select_ln888_fu_146_p3 <= 
        sub_ln889_fu_140_p2 when (tmp_fu_132_p3(0) = '1') else 
        score_int_0_V_read;
    select_ln908_fu_341_p3 <= 
        zext_ln908_2_fu_322_p1 when (icmp_ln908_reg_476(0) = '1') else 
        shl_ln908_fu_335_p2;
    select_ln915_fu_389_p3 <= 
        ap_const_lv11_3FF when (tmp_4_reg_486(0) = '1') else 
        ap_const_lv11_3FE;
    shl_ln908_fu_335_p2 <= std_logic_vector(shift_left(unsigned(zext_ln907_fu_305_p1),to_integer(unsigned('0' & zext_ln908_1_fu_331_p1(31-1 downto 0)))));
    sub_ln889_fu_140_p2 <= std_logic_vector(unsigned(ap_const_lv12_0) - unsigned(score_int_0_V_read));
    sub_ln894_fu_184_p2 <= std_logic_vector(unsigned(ap_const_lv32_C) - unsigned(l_reg_455));
    sub_ln897_fu_219_p2 <= std_logic_vector(unsigned(ap_const_lv4_2) - unsigned(trunc_ln897_fu_215_p1));
    sub_ln908_fu_326_p2 <= std_logic_vector(unsigned(ap_const_lv32_36) - unsigned(sub_ln894_reg_465));
    sub_ln915_fu_396_p2 <= std_logic_vector(unsigned(ap_const_lv11_4) - unsigned(trunc_ln893_reg_460));
    tmp_1_fu_407_p3 <= (tmp_reg_442 & add_ln915_fu_401_p2);
    tmp_2_fu_199_p4 <= add_ln894_fu_193_p2(31 downto 1);
    tmp_3_fu_252_p3 <= add_ln894_fu_193_p2(31 downto 31);
    tmp_fu_132_p3 <= score_int_0_V_read(11 downto 11);
    trunc_ln893_fu_180_p1 <= l_fu_172_p3(11 - 1 downto 0);
    trunc_ln894_fu_189_p1 <= sub_ln894_fu_184_p2(12 - 1 downto 0);
    trunc_ln897_fu_215_p1 <= sub_ln894_fu_184_p2(4 - 1 downto 0);
    xor_ln899_fu_260_p2 <= (tmp_3_fu_252_p3 xor ap_const_lv1_1);
    zext_ln19_fu_375_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(score_out_offset),64));
    zext_ln897_fu_225_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln897_fu_219_p2),12));
    zext_ln907_fu_305_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln888_reg_447),64));
    zext_ln908_1_fu_331_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln908_fu_326_p2),64));
    zext_ln908_2_fu_322_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln908_fu_316_p2),64));
    zext_ln908_fu_308_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln888_reg_447),32));
    zext_ln911_fu_348_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln_reg_471),64));
    zext_ln912_fu_386_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_reg_481),64));
end behav;
