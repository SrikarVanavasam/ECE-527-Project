// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module copy_input (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_x_in_AWVALID,
        m_axi_x_in_AWREADY,
        m_axi_x_in_AWADDR,
        m_axi_x_in_AWID,
        m_axi_x_in_AWLEN,
        m_axi_x_in_AWSIZE,
        m_axi_x_in_AWBURST,
        m_axi_x_in_AWLOCK,
        m_axi_x_in_AWCACHE,
        m_axi_x_in_AWPROT,
        m_axi_x_in_AWQOS,
        m_axi_x_in_AWREGION,
        m_axi_x_in_AWUSER,
        m_axi_x_in_WVALID,
        m_axi_x_in_WREADY,
        m_axi_x_in_WDATA,
        m_axi_x_in_WSTRB,
        m_axi_x_in_WLAST,
        m_axi_x_in_WID,
        m_axi_x_in_WUSER,
        m_axi_x_in_ARVALID,
        m_axi_x_in_ARREADY,
        m_axi_x_in_ARADDR,
        m_axi_x_in_ARID,
        m_axi_x_in_ARLEN,
        m_axi_x_in_ARSIZE,
        m_axi_x_in_ARBURST,
        m_axi_x_in_ARLOCK,
        m_axi_x_in_ARCACHE,
        m_axi_x_in_ARPROT,
        m_axi_x_in_ARQOS,
        m_axi_x_in_ARREGION,
        m_axi_x_in_ARUSER,
        m_axi_x_in_RVALID,
        m_axi_x_in_RREADY,
        m_axi_x_in_RDATA,
        m_axi_x_in_RLAST,
        m_axi_x_in_RID,
        m_axi_x_in_RUSER,
        m_axi_x_in_RRESP,
        m_axi_x_in_BVALID,
        m_axi_x_in_BREADY,
        m_axi_x_in_BRESP,
        m_axi_x_in_BID,
        m_axi_x_in_BUSER,
        x_in_offset,
        x_int_V_address0,
        x_int_V_ce0,
        x_int_V_we0,
        x_int_V_d0
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_state3 = 10'd4;
parameter    ap_ST_fsm_state4 = 10'd8;
parameter    ap_ST_fsm_state5 = 10'd16;
parameter    ap_ST_fsm_state6 = 10'd32;
parameter    ap_ST_fsm_state7 = 10'd64;
parameter    ap_ST_fsm_state8 = 10'd128;
parameter    ap_ST_fsm_state9 = 10'd256;
parameter    ap_ST_fsm_state10 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_x_in_AWVALID;
input   m_axi_x_in_AWREADY;
output  [31:0] m_axi_x_in_AWADDR;
output  [0:0] m_axi_x_in_AWID;
output  [31:0] m_axi_x_in_AWLEN;
output  [2:0] m_axi_x_in_AWSIZE;
output  [1:0] m_axi_x_in_AWBURST;
output  [1:0] m_axi_x_in_AWLOCK;
output  [3:0] m_axi_x_in_AWCACHE;
output  [2:0] m_axi_x_in_AWPROT;
output  [3:0] m_axi_x_in_AWQOS;
output  [3:0] m_axi_x_in_AWREGION;
output  [0:0] m_axi_x_in_AWUSER;
output   m_axi_x_in_WVALID;
input   m_axi_x_in_WREADY;
output  [63:0] m_axi_x_in_WDATA;
output  [7:0] m_axi_x_in_WSTRB;
output   m_axi_x_in_WLAST;
output  [0:0] m_axi_x_in_WID;
output  [0:0] m_axi_x_in_WUSER;
output   m_axi_x_in_ARVALID;
input   m_axi_x_in_ARREADY;
output  [31:0] m_axi_x_in_ARADDR;
output  [0:0] m_axi_x_in_ARID;
output  [31:0] m_axi_x_in_ARLEN;
output  [2:0] m_axi_x_in_ARSIZE;
output  [1:0] m_axi_x_in_ARBURST;
output  [1:0] m_axi_x_in_ARLOCK;
output  [3:0] m_axi_x_in_ARCACHE;
output  [2:0] m_axi_x_in_ARPROT;
output  [3:0] m_axi_x_in_ARQOS;
output  [3:0] m_axi_x_in_ARREGION;
output  [0:0] m_axi_x_in_ARUSER;
input   m_axi_x_in_RVALID;
output   m_axi_x_in_RREADY;
input  [63:0] m_axi_x_in_RDATA;
input   m_axi_x_in_RLAST;
input  [0:0] m_axi_x_in_RID;
input  [0:0] m_axi_x_in_RUSER;
input  [1:0] m_axi_x_in_RRESP;
input   m_axi_x_in_BVALID;
output   m_axi_x_in_BREADY;
input  [1:0] m_axi_x_in_BRESP;
input  [0:0] m_axi_x_in_BID;
input  [0:0] m_axi_x_in_BUSER;
input  [28:0] x_in_offset;
output  [3:0] x_int_V_address0;
output   x_int_V_ce0;
output   x_int_V_we0;
output  [11:0] x_int_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_x_in_ARVALID;
reg m_axi_x_in_RREADY;
reg x_int_V_ce0;
reg x_int_V_we0;

(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    x_in_blk_n_AR;
reg    x_in_blk_n_R;
wire    ap_CS_fsm_state8;
wire   [0:0] icmp_ln14_fu_126_p2;
wire   [3:0] i_fu_132_p2;
reg   [3:0] i_reg_422;
reg    ap_block_state8;
reg   [63:0] x_in_addr_read_reg_427;
wire   [53:0] man_V_2_fu_189_p3;
reg   [53:0] man_V_2_reg_432;
wire    ap_CS_fsm_state9;
wire   [0:0] icmp_ln571_fu_197_p2;
reg   [0:0] icmp_ln571_reg_437;
wire  signed [11:0] sh_amt_fu_227_p3;
reg  signed [11:0] sh_amt_reg_442;
wire   [0:0] icmp_ln582_fu_235_p2;
reg   [0:0] icmp_ln582_reg_447;
wire   [11:0] trunc_ln583_fu_241_p1;
reg   [11:0] trunc_ln583_reg_452;
wire   [0:0] and_ln585_fu_297_p2;
reg   [0:0] and_ln585_reg_457;
wire   [0:0] and_ln603_fu_321_p2;
reg   [0:0] and_ln603_reg_462;
wire   [0:0] or_ln603_fu_327_p2;
reg   [0:0] or_ln603_reg_467;
wire   [11:0] select_ln603_1_fu_333_p3;
reg   [11:0] select_ln603_1_reg_473;
reg   [3:0] i_0_reg_103;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state10;
wire   [63:0] zext_ln15_fu_341_p1;
wire   [63:0] zext_ln13_fu_115_p1;
wire   [63:0] ireg_V_fu_138_p1;
wire   [10:0] exp_tmp_V_fu_153_p4;
wire   [51:0] trunc_ln565_fu_167_p1;
wire   [52:0] tmp_fu_171_p3;
wire   [53:0] p_Result_1_fu_179_p1;
wire   [0:0] p_Result_s_fu_145_p3;
wire   [53:0] man_V_1_fu_183_p2;
wire   [62:0] trunc_ln556_fu_141_p1;
wire   [11:0] zext_ln461_fu_163_p1;
wire   [11:0] F2_fu_203_p2;
wire   [0:0] icmp_ln581_fu_209_p2;
wire   [11:0] add_ln581_fu_215_p2;
wire   [11:0] sub_ln581_fu_221_p2;
wire   [0:0] tmp_6_fu_257_p3;
wire   [0:0] or_ln582_fu_273_p2;
wire   [0:0] xor_ln582_fu_279_p2;
wire   [0:0] icmp_ln585_fu_245_p2;
wire   [0:0] and_ln581_fu_285_p2;
wire   [0:0] xor_ln585_fu_291_p2;
wire   [0:0] or_ln581_fu_309_p2;
wire   [0:0] icmp_ln603_fu_251_p2;
wire   [0:0] xor_ln581_fu_315_p2;
wire   [0:0] and_ln585_1_fu_303_p2;
wire   [11:0] select_ln588_fu_265_p3;
wire  signed [31:0] sext_ln581_fu_346_p1;
wire   [53:0] zext_ln586_fu_349_p1;
wire   [53:0] ashr_ln586_fu_353_p2;
wire   [11:0] sext_ln581cast_fu_362_p1;
wire   [0:0] xor_ln571_fu_371_p2;
wire   [11:0] shl_ln604_fu_366_p2;
wire   [11:0] trunc_ln586_fu_358_p1;
wire   [0:0] and_ln582_fu_376_p2;
wire   [11:0] select_ln603_fu_381_p3;
wire   [0:0] or_ln603_1_fu_388_p2;
wire   [0:0] or_ln603_2_fu_399_p2;
wire   [11:0] select_ln603_2_fu_393_p3;
reg   [9:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        i_0_reg_103 <= i_reg_422;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        i_0_reg_103 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        and_ln585_reg_457 <= and_ln585_fu_297_p2;
        and_ln603_reg_462 <= and_ln603_fu_321_p2;
        icmp_ln571_reg_437 <= icmp_ln571_fu_197_p2;
        icmp_ln582_reg_447 <= icmp_ln582_fu_235_p2;
        man_V_2_reg_432 <= man_V_2_fu_189_p3;
        or_ln603_reg_467 <= or_ln603_fu_327_p2;
        select_ln603_1_reg_473 <= select_ln603_1_fu_333_p3;
        sh_amt_reg_442 <= sh_amt_fu_227_p3;
        trunc_ln583_reg_452 <= trunc_ln583_fu_241_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln14_fu_126_p2 == 1'd0) & (m_axi_x_in_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state8))) begin
        i_reg_422 <= i_fu_132_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln14_fu_126_p2 == 1'd0) & (m_axi_x_in_RVALID == 1'b0)) & (icmp_ln14_fu_126_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        x_in_addr_read_reg_427 <= m_axi_x_in_RDATA;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | (~((icmp_ln14_fu_126_p2 == 1'd0) & (m_axi_x_in_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state8) & (icmp_ln14_fu_126_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((icmp_ln14_fu_126_p2 == 1'd0) & (m_axi_x_in_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state8) & (icmp_ln14_fu_126_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((m_axi_x_in_ARREADY == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        m_axi_x_in_ARVALID = 1'b1;
    end else begin
        m_axi_x_in_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((~((icmp_ln14_fu_126_p2 == 1'd0) & (m_axi_x_in_RVALID == 1'b0)) & (icmp_ln14_fu_126_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        m_axi_x_in_RREADY = 1'b1;
    end else begin
        m_axi_x_in_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        x_in_blk_n_AR = m_axi_x_in_ARREADY;
    end else begin
        x_in_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln14_fu_126_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        x_in_blk_n_R = m_axi_x_in_RVALID;
    end else begin
        x_in_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        x_int_V_ce0 = 1'b1;
    end else begin
        x_int_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        x_int_V_we0 = 1'b1;
    end else begin
        x_int_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((m_axi_x_in_ARREADY == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if ((~((icmp_ln14_fu_126_p2 == 1'd0) & (m_axi_x_in_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state8) & (icmp_ln14_fu_126_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~((icmp_ln14_fu_126_p2 == 1'd0) & (m_axi_x_in_RVALID == 1'b0)) & (icmp_ln14_fu_126_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign F2_fu_203_p2 = (12'd1075 - zext_ln461_fu_163_p1);

assign add_ln581_fu_215_p2 = ($signed(12'd4088) + $signed(F2_fu_203_p2));

assign and_ln581_fu_285_p2 = (xor_ln582_fu_279_p2 & icmp_ln581_fu_209_p2);

assign and_ln582_fu_376_p2 = (xor_ln571_fu_371_p2 & icmp_ln582_reg_447);

assign and_ln585_1_fu_303_p2 = (icmp_ln585_fu_245_p2 & and_ln581_fu_285_p2);

assign and_ln585_fu_297_p2 = (xor_ln585_fu_291_p2 & and_ln581_fu_285_p2);

assign and_ln603_fu_321_p2 = (xor_ln581_fu_315_p2 & icmp_ln603_fu_251_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state8 = ((icmp_ln14_fu_126_p2 == 1'd0) & (m_axi_x_in_RVALID == 1'b0));
end

assign ashr_ln586_fu_353_p2 = $signed(man_V_2_reg_432) >>> zext_ln586_fu_349_p1;

assign exp_tmp_V_fu_153_p4 = {{ireg_V_fu_138_p1[62:52]}};

assign i_fu_132_p2 = (i_0_reg_103 + 4'd1);

assign icmp_ln14_fu_126_p2 = ((i_0_reg_103 == 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln571_fu_197_p2 = ((trunc_ln556_fu_141_p1 == 63'd0) ? 1'b1 : 1'b0);

assign icmp_ln581_fu_209_p2 = (($signed(F2_fu_203_p2) > $signed(12'd8)) ? 1'b1 : 1'b0);

assign icmp_ln582_fu_235_p2 = ((F2_fu_203_p2 == 12'd8) ? 1'b1 : 1'b0);

assign icmp_ln585_fu_245_p2 = ((sh_amt_fu_227_p3 < 12'd54) ? 1'b1 : 1'b0);

assign icmp_ln603_fu_251_p2 = ((sh_amt_fu_227_p3 < 12'd12) ? 1'b1 : 1'b0);

assign ireg_V_fu_138_p1 = x_in_addr_read_reg_427;

assign m_axi_x_in_ARADDR = zext_ln13_fu_115_p1;

assign m_axi_x_in_ARBURST = 2'd0;

assign m_axi_x_in_ARCACHE = 4'd0;

assign m_axi_x_in_ARID = 1'd0;

assign m_axi_x_in_ARLEN = 32'd12;

assign m_axi_x_in_ARLOCK = 2'd0;

assign m_axi_x_in_ARPROT = 3'd0;

assign m_axi_x_in_ARQOS = 4'd0;

assign m_axi_x_in_ARREGION = 4'd0;

assign m_axi_x_in_ARSIZE = 3'd0;

assign m_axi_x_in_ARUSER = 1'd0;

assign m_axi_x_in_AWADDR = 32'd0;

assign m_axi_x_in_AWBURST = 2'd0;

assign m_axi_x_in_AWCACHE = 4'd0;

assign m_axi_x_in_AWID = 1'd0;

assign m_axi_x_in_AWLEN = 32'd0;

assign m_axi_x_in_AWLOCK = 2'd0;

assign m_axi_x_in_AWPROT = 3'd0;

assign m_axi_x_in_AWQOS = 4'd0;

assign m_axi_x_in_AWREGION = 4'd0;

assign m_axi_x_in_AWSIZE = 3'd0;

assign m_axi_x_in_AWUSER = 1'd0;

assign m_axi_x_in_AWVALID = 1'b0;

assign m_axi_x_in_BREADY = 1'b0;

assign m_axi_x_in_WDATA = 64'd0;

assign m_axi_x_in_WID = 1'd0;

assign m_axi_x_in_WLAST = 1'b0;

assign m_axi_x_in_WSTRB = 8'd0;

assign m_axi_x_in_WUSER = 1'd0;

assign m_axi_x_in_WVALID = 1'b0;

assign man_V_1_fu_183_p2 = (54'd0 - p_Result_1_fu_179_p1);

assign man_V_2_fu_189_p3 = ((p_Result_s_fu_145_p3[0:0] === 1'b1) ? man_V_1_fu_183_p2 : p_Result_1_fu_179_p1);

assign or_ln581_fu_309_p2 = (or_ln582_fu_273_p2 | icmp_ln581_fu_209_p2);

assign or_ln582_fu_273_p2 = (icmp_ln582_fu_235_p2 | icmp_ln571_fu_197_p2);

assign or_ln603_1_fu_388_p2 = (and_ln585_reg_457 | and_ln582_fu_376_p2);

assign or_ln603_2_fu_399_p2 = (or_ln603_reg_467 | or_ln603_1_fu_388_p2);

assign or_ln603_fu_327_p2 = (and_ln603_fu_321_p2 | and_ln585_1_fu_303_p2);

assign p_Result_1_fu_179_p1 = tmp_fu_171_p3;

assign p_Result_s_fu_145_p3 = ireg_V_fu_138_p1[32'd63];

assign select_ln588_fu_265_p3 = ((tmp_6_fu_257_p3[0:0] === 1'b1) ? 12'd4095 : 12'd0);

assign select_ln603_1_fu_333_p3 = ((and_ln585_fu_297_p2[0:0] === 1'b1) ? select_ln588_fu_265_p3 : trunc_ln583_fu_241_p1);

assign select_ln603_2_fu_393_p3 = ((or_ln603_reg_467[0:0] === 1'b1) ? select_ln603_fu_381_p3 : select_ln603_1_reg_473);

assign select_ln603_fu_381_p3 = ((and_ln603_reg_462[0:0] === 1'b1) ? shl_ln604_fu_366_p2 : trunc_ln586_fu_358_p1);

assign sext_ln581_fu_346_p1 = sh_amt_reg_442;

assign sext_ln581cast_fu_362_p1 = sext_ln581_fu_346_p1[11:0];

assign sh_amt_fu_227_p3 = ((icmp_ln581_fu_209_p2[0:0] === 1'b1) ? add_ln581_fu_215_p2 : sub_ln581_fu_221_p2);

assign shl_ln604_fu_366_p2 = trunc_ln583_reg_452 << sext_ln581cast_fu_362_p1;

assign sub_ln581_fu_221_p2 = (12'd8 - F2_fu_203_p2);

assign tmp_6_fu_257_p3 = ireg_V_fu_138_p1[32'd63];

assign tmp_fu_171_p3 = {{1'd1}, {trunc_ln565_fu_167_p1}};

assign trunc_ln556_fu_141_p1 = ireg_V_fu_138_p1[62:0];

assign trunc_ln565_fu_167_p1 = ireg_V_fu_138_p1[51:0];

assign trunc_ln583_fu_241_p1 = man_V_2_fu_189_p3[11:0];

assign trunc_ln586_fu_358_p1 = ashr_ln586_fu_353_p2[11:0];

assign x_int_V_address0 = zext_ln15_fu_341_p1;

assign x_int_V_d0 = ((or_ln603_2_fu_399_p2[0:0] === 1'b1) ? select_ln603_2_fu_393_p3 : 12'd0);

assign xor_ln571_fu_371_p2 = (icmp_ln571_reg_437 ^ 1'd1);

assign xor_ln581_fu_315_p2 = (or_ln581_fu_309_p2 ^ 1'd1);

assign xor_ln582_fu_279_p2 = (or_ln582_fu_273_p2 ^ 1'd1);

assign xor_ln585_fu_291_p2 = (icmp_ln585_fu_245_p2 ^ 1'd1);

assign zext_ln13_fu_115_p1 = x_in_offset;

assign zext_ln15_fu_341_p1 = i_0_reg_103;

assign zext_ln461_fu_163_p1 = exp_tmp_V_fu_153_p4;

assign zext_ln586_fu_349_p1 = $unsigned(sext_ln581_fu_346_p1);

endmodule //copy_input
