// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module max_pooling4 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        input_0_address0,
        input_0_ce0,
        input_0_q0,
        input_1_address0,
        input_1_ce0,
        input_1_q0,
        output_0_address0,
        output_0_ce0,
        output_0_q0,
        output_0_address1,
        output_0_ce1,
        output_0_we1,
        output_0_d1,
        output_1_address0,
        output_1_ce0,
        output_1_q0,
        output_1_address1,
        output_1_ce1,
        output_1_we1,
        output_1_d1
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state11 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [9:0] input_0_address0;
output   input_0_ce0;
input  [31:0] input_0_q0;
output  [9:0] input_1_address0;
output   input_1_ce0;
input  [31:0] input_1_q0;
output  [7:0] output_0_address0;
output   output_0_ce0;
input  [31:0] output_0_q0;
output  [7:0] output_0_address1;
output   output_0_ce1;
output   output_0_we1;
output  [31:0] output_0_d1;
output  [7:0] output_1_address0;
output   output_1_ce0;
input  [31:0] output_1_q0;
output  [7:0] output_1_address1;
output   output_1_ce1;
output   output_1_we1;
output  [31:0] output_1_d1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_0_ce0;
reg input_1_ce0;
reg output_0_ce0;
reg output_0_ce1;
reg output_0_we1;
reg output_1_ce0;
reg output_1_ce1;
reg output_1_we1;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [9:0] indvar_flatten111_reg_166;
reg   [2:0] h_0_reg_177;
reg   [8:0] indvar_flatten59_reg_188;
reg   [2:0] w_0_reg_199;
reg   [6:0] indvar_flatten21_reg_210;
reg   [1:0] i_0_reg_221;
reg   [5:0] indvar_flatten_reg_232;
reg   [1:0] j_0_reg_243;
reg   [4:0] c_0_0_reg_254;
wire   [3:0] shl_ln_fu_285_p3;
reg   [3:0] shl_ln_reg_1187;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
wire    ap_block_state8_pp0_stage0_iter6;
wire    ap_block_state9_pp0_stage0_iter7;
wire    ap_block_state10_pp0_stage0_iter8;
wire    ap_block_pp0_stage0_11001;
wire   [3:0] shl_ln129_1_fu_293_p3;
reg   [3:0] shl_ln129_1_reg_1192;
wire   [3:0] add_ln129_fu_309_p2;
reg   [3:0] add_ln129_reg_1197;
wire   [3:0] add_ln129_1_fu_323_p2;
reg   [3:0] add_ln129_1_reg_1202;
wire   [0:0] icmp_ln121_fu_335_p2;
reg   [0:0] icmp_ln121_reg_1207;
reg   [0:0] icmp_ln121_reg_1207_pp0_iter1_reg;
reg   [0:0] icmp_ln121_reg_1207_pp0_iter2_reg;
reg   [0:0] icmp_ln121_reg_1207_pp0_iter3_reg;
reg   [0:0] icmp_ln121_reg_1207_pp0_iter4_reg;
reg   [0:0] icmp_ln121_reg_1207_pp0_iter5_reg;
reg   [0:0] icmp_ln121_reg_1207_pp0_iter6_reg;
reg   [0:0] icmp_ln121_reg_1207_pp0_iter7_reg;
wire   [9:0] add_ln121_fu_341_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [2:0] h_fu_347_p2;
reg   [2:0] h_reg_1216;
wire   [0:0] icmp_ln122_fu_353_p2;
reg   [0:0] icmp_ln122_reg_1221;
wire   [2:0] select_ln121_2_fu_367_p3;
reg   [2:0] select_ln121_2_reg_1229;
wire   [0:0] and_ln121_4_fu_423_p2;
reg   [0:0] and_ln121_4_reg_1235;
wire   [2:0] w_fu_429_p2;
reg   [2:0] w_reg_1242;
wire   [2:0] select_ln122_2_fu_449_p3;
reg   [2:0] select_ln122_2_reg_1247;
wire   [0:0] and_ln122_3_fu_487_p2;
reg   [0:0] and_ln122_3_reg_1253;
wire   [1:0] i_fu_493_p2;
reg   [1:0] i_reg_1259;
wire   [0:0] select_ln123_4_fu_531_p3;
reg   [0:0] select_ln123_4_reg_1264;
wire   [0:0] and_ln123_fu_545_p2;
reg   [0:0] and_ln123_reg_1269;
wire   [1:0] select_ln123_5_fu_551_p3;
wire   [1:0] j_fu_559_p2;
reg   [1:0] j_reg_1280;
wire   [0:0] or_ln131_1_fu_589_p2;
reg   [0:0] or_ln131_1_reg_1285;
wire   [1:0] select_ln124_3_fu_595_p3;
reg   [3:0] lshr_ln_reg_1295;
wire   [4:0] add_ln125_fu_613_p2;
wire   [5:0] select_ln124_4_fu_625_p3;
wire   [6:0] select_ln123_6_fu_639_p3;
wire   [8:0] select_ln122_5_fu_653_p3;
wire   [3:0] select_ln124_1_fu_762_p3;
reg   [3:0] select_ln124_1_reg_1323;
wire   [0:0] select_ln124_2_fu_769_p3;
reg   [0:0] select_ln124_2_reg_1328;
reg   [0:0] select_ln124_2_reg_1328_pp0_iter2_reg;
wire   [7:0] add_ln129_5_fu_805_p2;
reg   [7:0] add_ln129_5_reg_1334;
wire   [8:0] add_ln131_3_fu_852_p2;
reg   [8:0] add_ln131_3_reg_1340;
wire   [10:0] add_ln129_7_fu_885_p2;
reg   [10:0] add_ln129_7_reg_1345;
reg   [10:0] add_ln129_7_reg_1345_pp0_iter3_reg;
reg   [10:0] add_ln129_7_reg_1345_pp0_iter4_reg;
reg   [7:0] output_0_addr_reg_1350;
reg   [7:0] output_0_addr_reg_1350_pp0_iter3_reg;
reg   [7:0] output_0_addr_reg_1350_pp0_iter4_reg;
reg   [7:0] output_0_addr_reg_1350_pp0_iter5_reg;
reg   [7:0] output_0_addr_reg_1350_pp0_iter6_reg;
reg   [7:0] output_0_addr_reg_1350_pp0_iter7_reg;
reg   [7:0] output_1_addr_reg_1356;
reg   [7:0] output_1_addr_reg_1356_pp0_iter3_reg;
reg   [7:0] output_1_addr_reg_1356_pp0_iter4_reg;
reg   [7:0] output_1_addr_reg_1356_pp0_iter5_reg;
reg   [7:0] output_1_addr_reg_1356_pp0_iter6_reg;
reg   [7:0] output_1_addr_reg_1356_pp0_iter7_reg;
wire   [31:0] select_ln131_fu_896_p3;
reg   [31:0] select_ln131_reg_1362;
reg   [31:0] select_ln131_reg_1362_pp0_iter4_reg;
wire   [31:0] select_ln131_1_fu_903_p3;
reg   [31:0] select_ln131_1_reg_1369;
reg   [31:0] select_ln131_1_reg_1369_pp0_iter4_reg;
wire   [31:0] select_ln132_fu_956_p3;
reg   [31:0] select_ln132_reg_1386;
reg   [31:0] select_ln132_reg_1386_pp0_iter6_reg;
wire   [31:0] select_ln132_1_fu_1004_p3;
reg   [31:0] select_ln132_1_reg_1393;
reg   [31:0] select_ln132_1_reg_1393_pp0_iter6_reg;
reg   [31:0] input_0_load_reg_1400;
reg   [31:0] input_1_load_reg_1407;
wire   [31:0] select_ln133_fu_1093_p3;
reg   [31:0] select_ln133_reg_1414;
wire   [31:0] select_ln133_1_fu_1181_p3;
reg   [31:0] select_ln133_1_reg_1419;
reg    ap_block_state1;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg   [2:0] ap_phi_mux_h_0_phi_fu_181_p4;
wire    ap_block_pp0_stage0;
reg   [2:0] ap_phi_mux_w_0_phi_fu_203_p4;
wire   [63:0] zext_ln131_2_fu_891_p1;
wire   [63:0] zext_ln129_5_fu_910_p1;
wire   [3:0] zext_ln123_fu_301_p1;
wire   [3:0] zext_ln124_fu_315_p1;
wire   [0:0] trunc_ln124_fu_319_p1;
wire   [0:0] trunc_ln123_fu_305_p1;
wire   [0:0] xor_ln121_fu_375_p2;
wire   [0:0] or_ln131_fu_329_p2;
wire   [0:0] icmp_ln125_fu_393_p2;
wire   [0:0] icmp_ln124_fu_405_p2;
wire   [0:0] icmp_ln123_fu_417_p2;
wire   [2:0] select_ln121_fu_359_p3;
wire   [0:0] or_ln122_fu_435_p2;
wire   [0:0] xor_ln122_fu_457_p2;
wire   [0:0] and_ln121_fu_381_p2;
wire   [0:0] or_ln122_1_fu_463_p2;
wire   [0:0] and_ln121_1_fu_387_p2;
wire   [0:0] and_ln121_2_fu_399_p2;
wire   [0:0] and_ln121_3_fu_411_p2;
wire   [1:0] select_ln122_fu_441_p3;
wire   [0:0] or_ln123_fu_499_p2;
wire   [0:0] or_ln123_1_fu_505_p2;
wire   [0:0] trunc_ln123_1_fu_519_p1;
wire   [0:0] and_ln122_fu_469_p2;
wire   [0:0] and_ln122_1_fu_475_p2;
wire   [0:0] and_ln122_2_fu_481_p2;
wire   [0:0] xor_ln123_fu_539_p2;
wire   [1:0] select_ln123_fu_511_p3;
wire   [0:0] or_ln124_fu_565_p2;
wire   [0:0] or_ln124_1_fu_571_p2;
wire   [0:0] trunc_ln124_1_fu_585_p1;
wire   [0:0] select_ln123_1_fu_523_p3;
wire   [4:0] select_ln124_fu_577_p3;
wire   [5:0] add_ln124_1_fu_619_p2;
wire   [6:0] add_ln123_1_fu_633_p2;
wire   [8:0] add_ln122_1_fu_647_p2;
wire   [3:0] shl_ln129_mid1_fu_661_p3;
wire   [3:0] shl_ln129_1_mid1_fu_689_p3;
wire   [3:0] select_ln121_3_fu_677_p3;
wire   [3:0] select_ln121_4_fu_683_p3;
wire   [3:0] zext_ln123_1_fu_713_p1;
wire   [3:0] select_ln121_1_fu_668_p3;
wire   [3:0] select_ln121_5_fu_722_p3;
wire   [3:0] add_ln129_2_fu_716_p2;
wire   [3:0] select_ln122_4_fu_728_p3;
wire   [3:0] select_ln123_2_fu_735_p3;
wire   [3:0] select_ln122_1_fu_696_p3;
wire   [3:0] select_ln122_3_fu_706_p3;
wire   [3:0] zext_ln124_1_fu_753_p1;
wire   [3:0] add_ln129_3_fu_756_p2;
wire   [3:0] select_ln123_3_fu_746_p3;
wire   [6:0] tmp_10_fu_777_p3;
wire   [4:0] tmp_11_fu_788_p3;
wire   [7:0] zext_ln129_3_fu_795_p1;
wire   [7:0] zext_ln129_2_fu_784_p1;
wire   [7:0] add_ln129_4_fu_799_p2;
wire   [7:0] zext_ln129_fu_742_p1;
wire   [5:0] tmp_13_fu_811_p3;
wire   [6:0] zext_ln129_1_fu_774_p1;
wire   [6:0] zext_ln131_fu_818_p1;
wire   [6:0] add_ln131_fu_822_p2;
wire   [6:0] zext_ln121_fu_674_p1;
wire   [6:0] add_ln131_1_fu_828_p2;
wire   [8:0] zext_ln131_1_fu_834_p1;
wire   [8:0] p_shl_cast_fu_838_p3;
wire   [8:0] add_ln131_2_fu_846_p2;
wire   [8:0] zext_ln122_fu_703_p1;
wire   [8:0] tmp_12_fu_868_p3;
wire   [10:0] zext_ln129_4_fu_875_p1;
wire   [10:0] p_shl1_cast_fu_861_p3;
wire   [10:0] add_ln129_6_fu_879_p2;
wire   [10:0] zext_ln124_2_fu_858_p1;
wire   [31:0] bitcast_ln132_fu_915_p1;
wire   [7:0] tmp_1_fu_918_p4;
wire   [22:0] trunc_ln132_fu_928_p1;
wire   [0:0] icmp_ln132_1_fu_938_p2;
wire   [0:0] icmp_ln132_fu_932_p2;
wire   [0:0] or_ln132_fu_944_p2;
wire   [0:0] grp_fu_265_p2;
wire   [0:0] and_ln132_fu_950_p2;
wire   [31:0] bitcast_ln132_1_fu_963_p1;
wire   [7:0] tmp_6_fu_966_p4;
wire   [22:0] trunc_ln132_1_fu_976_p1;
wire   [0:0] icmp_ln132_3_fu_986_p2;
wire   [0:0] icmp_ln132_2_fu_980_p2;
wire   [0:0] or_ln132_1_fu_992_p2;
wire   [0:0] grp_fu_270_p2;
wire   [0:0] and_ln132_1_fu_998_p2;
wire   [31:0] bitcast_ln133_fu_1011_p1;
wire   [31:0] bitcast_ln133_1_fu_1028_p1;
wire   [7:0] tmp_3_fu_1014_p4;
wire   [22:0] trunc_ln133_fu_1024_p1;
wire   [0:0] icmp_ln133_1_fu_1051_p2;
wire   [0:0] icmp_ln133_fu_1045_p2;
wire   [7:0] tmp_4_fu_1031_p4;
wire   [22:0] trunc_ln133_1_fu_1041_p1;
wire   [0:0] icmp_ln133_3_fu_1069_p2;
wire   [0:0] icmp_ln133_2_fu_1063_p2;
wire   [0:0] or_ln133_fu_1057_p2;
wire   [0:0] or_ln133_1_fu_1075_p2;
wire   [0:0] and_ln133_fu_1081_p2;
wire   [0:0] grp_fu_275_p2;
wire   [0:0] and_ln133_1_fu_1087_p2;
wire   [31:0] bitcast_ln133_2_fu_1099_p1;
wire   [31:0] bitcast_ln133_3_fu_1116_p1;
wire   [7:0] tmp_8_fu_1102_p4;
wire   [22:0] trunc_ln133_2_fu_1112_p1;
wire   [0:0] icmp_ln133_5_fu_1139_p2;
wire   [0:0] icmp_ln133_4_fu_1133_p2;
wire   [7:0] tmp_9_fu_1119_p4;
wire   [22:0] trunc_ln133_3_fu_1129_p1;
wire   [0:0] icmp_ln133_7_fu_1157_p2;
wire   [0:0] icmp_ln133_6_fu_1151_p2;
wire   [0:0] or_ln133_2_fu_1145_p2;
wire   [0:0] or_ln133_3_fu_1163_p2;
wire   [0:0] and_ln133_2_fu_1169_p2;
wire   [0:0] grp_fu_280_p2;
wire   [0:0] and_ln133_3_fu_1175_p2;
wire    ap_block_pp0_stage0_00001;
wire    ap_CS_fsm_state11;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
end

LeNet_fcmp_32ns_3jbC #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
LeNet_fcmp_32ns_3jbC_U114(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(select_ln131_reg_1362),
    .din1(32'd0),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_265_p2)
);

LeNet_fcmp_32ns_3jbC #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
LeNet_fcmp_32ns_3jbC_U115(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(select_ln131_1_reg_1369),
    .din1(32'd0),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_270_p2)
);

LeNet_fcmp_32ns_3jbC #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
LeNet_fcmp_32ns_3jbC_U116(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(select_ln132_reg_1386),
    .din1(input_0_q0),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_275_p2)
);

LeNet_fcmp_32ns_3jbC #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
LeNet_fcmp_32ns_3jbC_U117(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(select_ln132_1_reg_1393),
    .din1(input_1_q0),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_280_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state11)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter8 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln121_fu_335_p2 == 1'd0))) begin
        c_0_0_reg_254 <= add_ln125_fu_613_p2;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        c_0_0_reg_254 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln121_reg_1207 == 1'd0))) begin
        h_0_reg_177 <= select_ln121_2_reg_1229;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        h_0_reg_177 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln121_fu_335_p2 == 1'd0))) begin
        i_0_reg_221 <= select_ln123_5_fu_551_p3;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_221 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln121_fu_335_p2 == 1'd0))) begin
        indvar_flatten111_reg_166 <= add_ln121_fu_341_p2;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten111_reg_166 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln121_fu_335_p2 == 1'd0))) begin
        indvar_flatten21_reg_210 <= select_ln123_6_fu_639_p3;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten21_reg_210 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln121_fu_335_p2 == 1'd0))) begin
        indvar_flatten59_reg_188 <= select_ln122_5_fu_653_p3;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten59_reg_188 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln121_fu_335_p2 == 1'd0))) begin
        indvar_flatten_reg_232 <= select_ln124_4_fu_625_p3;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_232 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln121_fu_335_p2 == 1'd0))) begin
        j_0_reg_243 <= select_ln124_3_fu_595_p3;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        j_0_reg_243 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln121_reg_1207 == 1'd0))) begin
        w_0_reg_199 <= select_ln122_2_reg_1247;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        w_0_reg_199 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln129_1_reg_1202 <= add_ln129_1_fu_323_p2;
        add_ln129_reg_1197 <= add_ln129_fu_309_p2;
        icmp_ln121_reg_1207 <= icmp_ln121_fu_335_p2;
        icmp_ln121_reg_1207_pp0_iter1_reg <= icmp_ln121_reg_1207;
        shl_ln129_1_reg_1192[3 : 1] <= shl_ln129_1_fu_293_p3[3 : 1];
        shl_ln_reg_1187[3 : 1] <= shl_ln_fu_285_p3[3 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln121_reg_1207 == 1'd0))) begin
        add_ln129_5_reg_1334 <= add_ln129_5_fu_805_p2;
        add_ln131_3_reg_1340 <= add_ln131_3_fu_852_p2;
        select_ln124_1_reg_1323 <= select_ln124_1_fu_762_p3;
        select_ln124_2_reg_1328 <= select_ln124_2_fu_769_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln121_reg_1207_pp0_iter1_reg == 1'd0))) begin
        add_ln129_7_reg_1345 <= add_ln129_7_fu_885_p2;
        output_0_addr_reg_1350 <= zext_ln131_2_fu_891_p1;
        output_1_addr_reg_1356 <= zext_ln131_2_fu_891_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln129_7_reg_1345_pp0_iter3_reg <= add_ln129_7_reg_1345;
        add_ln129_7_reg_1345_pp0_iter4_reg <= add_ln129_7_reg_1345_pp0_iter3_reg;
        icmp_ln121_reg_1207_pp0_iter2_reg <= icmp_ln121_reg_1207_pp0_iter1_reg;
        icmp_ln121_reg_1207_pp0_iter3_reg <= icmp_ln121_reg_1207_pp0_iter2_reg;
        icmp_ln121_reg_1207_pp0_iter4_reg <= icmp_ln121_reg_1207_pp0_iter3_reg;
        icmp_ln121_reg_1207_pp0_iter5_reg <= icmp_ln121_reg_1207_pp0_iter4_reg;
        icmp_ln121_reg_1207_pp0_iter6_reg <= icmp_ln121_reg_1207_pp0_iter5_reg;
        icmp_ln121_reg_1207_pp0_iter7_reg <= icmp_ln121_reg_1207_pp0_iter6_reg;
        output_0_addr_reg_1350_pp0_iter3_reg <= output_0_addr_reg_1350;
        output_0_addr_reg_1350_pp0_iter4_reg <= output_0_addr_reg_1350_pp0_iter3_reg;
        output_0_addr_reg_1350_pp0_iter5_reg <= output_0_addr_reg_1350_pp0_iter4_reg;
        output_0_addr_reg_1350_pp0_iter6_reg <= output_0_addr_reg_1350_pp0_iter5_reg;
        output_0_addr_reg_1350_pp0_iter7_reg <= output_0_addr_reg_1350_pp0_iter6_reg;
        output_1_addr_reg_1356_pp0_iter3_reg <= output_1_addr_reg_1356;
        output_1_addr_reg_1356_pp0_iter4_reg <= output_1_addr_reg_1356_pp0_iter3_reg;
        output_1_addr_reg_1356_pp0_iter5_reg <= output_1_addr_reg_1356_pp0_iter4_reg;
        output_1_addr_reg_1356_pp0_iter6_reg <= output_1_addr_reg_1356_pp0_iter5_reg;
        output_1_addr_reg_1356_pp0_iter7_reg <= output_1_addr_reg_1356_pp0_iter6_reg;
        select_ln124_2_reg_1328_pp0_iter2_reg <= select_ln124_2_reg_1328;
        select_ln131_1_reg_1369_pp0_iter4_reg <= select_ln131_1_reg_1369;
        select_ln131_reg_1362_pp0_iter4_reg <= select_ln131_reg_1362;
        select_ln132_1_reg_1393_pp0_iter6_reg <= select_ln132_1_reg_1393;
        select_ln132_reg_1386_pp0_iter6_reg <= select_ln132_reg_1386;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln121_fu_335_p2 == 1'd0))) begin
        and_ln121_4_reg_1235 <= and_ln121_4_fu_423_p2;
        and_ln122_3_reg_1253 <= and_ln122_3_fu_487_p2;
        and_ln123_reg_1269 <= and_ln123_fu_545_p2;
        h_reg_1216 <= h_fu_347_p2;
        i_reg_1259 <= i_fu_493_p2;
        icmp_ln122_reg_1221 <= icmp_ln122_fu_353_p2;
        j_reg_1280 <= j_fu_559_p2;
        lshr_ln_reg_1295 <= {{select_ln124_fu_577_p3[4:1]}};
        or_ln131_1_reg_1285 <= or_ln131_1_fu_589_p2;
        select_ln123_4_reg_1264 <= select_ln123_4_fu_531_p3;
        w_reg_1242 <= w_fu_429_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln121_reg_1207_pp0_iter5_reg == 1'd0))) begin
        input_0_load_reg_1400 <= input_0_q0;
        input_1_load_reg_1407 <= input_1_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln121_fu_335_p2 == 1'd0))) begin
        select_ln121_2_reg_1229 <= select_ln121_2_fu_367_p3;
        select_ln122_2_reg_1247 <= select_ln122_2_fu_449_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln121_reg_1207_pp0_iter2_reg == 1'd0))) begin
        select_ln131_1_reg_1369 <= select_ln131_1_fu_903_p3;
        select_ln131_reg_1362 <= select_ln131_fu_896_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln121_reg_1207_pp0_iter4_reg == 1'd0))) begin
        select_ln132_1_reg_1393 <= select_ln132_1_fu_1004_p3;
        select_ln132_reg_1386 <= select_ln132_fu_956_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln121_reg_1207_pp0_iter6_reg == 1'd0))) begin
        select_ln133_1_reg_1419 <= select_ln133_1_fu_1181_p3;
        select_ln133_reg_1414 <= select_ln133_fu_1093_p3;
    end
end

always @ (*) begin
    if ((icmp_ln121_fu_335_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln121_reg_1207 == 1'd0))) begin
        ap_phi_mux_h_0_phi_fu_181_p4 = select_ln121_2_reg_1229;
    end else begin
        ap_phi_mux_h_0_phi_fu_181_p4 = h_0_reg_177;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln121_reg_1207 == 1'd0))) begin
        ap_phi_mux_w_0_phi_fu_203_p4 = select_ln122_2_reg_1247;
    end else begin
        ap_phi_mux_w_0_phi_fu_203_p4 = w_0_reg_199;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        input_0_ce0 = 1'b1;
    end else begin
        input_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        input_1_ce0 = 1'b1;
    end else begin
        input_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        output_0_ce0 = 1'b1;
    end else begin
        output_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1))) begin
        output_0_ce1 = 1'b1;
    end else begin
        output_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1) & (icmp_ln121_reg_1207_pp0_iter7_reg == 1'd0))) begin
        output_0_we1 = 1'b1;
    end else begin
        output_0_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        output_1_ce0 = 1'b1;
    end else begin
        output_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1))) begin
        output_1_ce1 = 1'b1;
    end else begin
        output_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1) & (icmp_ln121_reg_1207_pp0_iter7_reg == 1'd0))) begin
        output_1_we1 = 1'b1;
    end else begin
        output_1_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln121_fu_335_p2 == 1'd1)) & ~((ap_enable_reg_pp0_iter7 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter8 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter7 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter8 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln121_fu_335_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln121_fu_341_p2 = (10'd1 + indvar_flatten111_reg_166);

assign add_ln122_1_fu_647_p2 = (9'd1 + indvar_flatten59_reg_188);

assign add_ln123_1_fu_633_p2 = (7'd1 + indvar_flatten21_reg_210);

assign add_ln124_1_fu_619_p2 = (6'd1 + indvar_flatten_reg_232);

assign add_ln125_fu_613_p2 = (5'd2 + select_ln124_fu_577_p3);

assign add_ln129_1_fu_323_p2 = (zext_ln124_fu_315_p1 + shl_ln129_1_fu_293_p3);

assign add_ln129_2_fu_716_p2 = (zext_ln123_1_fu_713_p1 + select_ln121_1_fu_668_p3);

assign add_ln129_3_fu_756_p2 = (zext_ln124_1_fu_753_p1 + select_ln122_1_fu_696_p3);

assign add_ln129_4_fu_799_p2 = (zext_ln129_3_fu_795_p1 + zext_ln129_2_fu_784_p1);

assign add_ln129_5_fu_805_p2 = (add_ln129_4_fu_799_p2 + zext_ln129_fu_742_p1);

assign add_ln129_6_fu_879_p2 = (zext_ln129_4_fu_875_p1 + p_shl1_cast_fu_861_p3);

assign add_ln129_7_fu_885_p2 = (add_ln129_6_fu_879_p2 + zext_ln124_2_fu_858_p1);

assign add_ln129_fu_309_p2 = (zext_ln123_fu_301_p1 + shl_ln_fu_285_p3);

assign add_ln131_1_fu_828_p2 = (add_ln131_fu_822_p2 + zext_ln121_fu_674_p1);

assign add_ln131_2_fu_846_p2 = (zext_ln131_1_fu_834_p1 + p_shl_cast_fu_838_p3);

assign add_ln131_3_fu_852_p2 = (add_ln131_2_fu_846_p2 + zext_ln122_fu_703_p1);

assign add_ln131_fu_822_p2 = (zext_ln129_1_fu_774_p1 + zext_ln131_fu_818_p1);

assign and_ln121_1_fu_387_p2 = (xor_ln121_fu_375_p2 & or_ln131_fu_329_p2);

assign and_ln121_2_fu_399_p2 = (xor_ln121_fu_375_p2 & icmp_ln125_fu_393_p2);

assign and_ln121_3_fu_411_p2 = (xor_ln121_fu_375_p2 & icmp_ln124_fu_405_p2);

assign and_ln121_4_fu_423_p2 = (xor_ln121_fu_375_p2 & icmp_ln123_fu_417_p2);

assign and_ln121_fu_381_p2 = (xor_ln121_fu_375_p2 & trunc_ln123_fu_305_p1);

assign and_ln122_1_fu_475_p2 = (or_ln122_1_fu_463_p2 & and_ln121_1_fu_387_p2);

assign and_ln122_2_fu_481_p2 = (or_ln122_1_fu_463_p2 & and_ln121_2_fu_399_p2);

assign and_ln122_3_fu_487_p2 = (or_ln122_1_fu_463_p2 & and_ln121_3_fu_411_p2);

assign and_ln122_fu_469_p2 = (or_ln122_1_fu_463_p2 & and_ln121_fu_381_p2);

assign and_ln123_fu_545_p2 = (xor_ln123_fu_539_p2 & and_ln122_2_fu_481_p2);

assign and_ln132_1_fu_998_p2 = (or_ln132_1_fu_992_p2 & grp_fu_270_p2);

assign and_ln132_fu_950_p2 = (or_ln132_fu_944_p2 & grp_fu_265_p2);

assign and_ln133_1_fu_1087_p2 = (grp_fu_275_p2 & and_ln133_fu_1081_p2);

assign and_ln133_2_fu_1169_p2 = (or_ln133_3_fu_1163_p2 & or_ln133_2_fu_1145_p2);

assign and_ln133_3_fu_1175_p2 = (grp_fu_280_p2 & and_ln133_2_fu_1169_p2);

assign and_ln133_fu_1081_p2 = (or_ln133_fu_1057_p2 & or_ln133_1_fu_1075_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state10_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign bitcast_ln132_1_fu_963_p1 = select_ln131_1_reg_1369_pp0_iter4_reg;

assign bitcast_ln132_fu_915_p1 = select_ln131_reg_1362_pp0_iter4_reg;

assign bitcast_ln133_1_fu_1028_p1 = input_0_load_reg_1400;

assign bitcast_ln133_2_fu_1099_p1 = select_ln132_1_reg_1393_pp0_iter6_reg;

assign bitcast_ln133_3_fu_1116_p1 = input_1_load_reg_1407;

assign bitcast_ln133_fu_1011_p1 = select_ln132_reg_1386_pp0_iter6_reg;

assign h_fu_347_p2 = (3'd1 + ap_phi_mux_h_0_phi_fu_181_p4);

assign i_fu_493_p2 = (2'd1 + select_ln122_fu_441_p3);

assign icmp_ln121_fu_335_p2 = ((indvar_flatten111_reg_166 == 10'd800) ? 1'b1 : 1'b0);

assign icmp_ln122_fu_353_p2 = ((indvar_flatten59_reg_188 == 9'd160) ? 1'b1 : 1'b0);

assign icmp_ln123_fu_417_p2 = ((indvar_flatten21_reg_210 == 7'd32) ? 1'b1 : 1'b0);

assign icmp_ln124_fu_405_p2 = ((indvar_flatten_reg_232 == 6'd16) ? 1'b1 : 1'b0);

assign icmp_ln125_fu_393_p2 = ((c_0_0_reg_254 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln132_1_fu_938_p2 = ((trunc_ln132_fu_928_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln132_2_fu_980_p2 = ((tmp_6_fu_966_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln132_3_fu_986_p2 = ((trunc_ln132_1_fu_976_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln132_fu_932_p2 = ((tmp_1_fu_918_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln133_1_fu_1051_p2 = ((trunc_ln133_fu_1024_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln133_2_fu_1063_p2 = ((tmp_4_fu_1031_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln133_3_fu_1069_p2 = ((trunc_ln133_1_fu_1041_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln133_4_fu_1133_p2 = ((tmp_8_fu_1102_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln133_5_fu_1139_p2 = ((trunc_ln133_2_fu_1112_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln133_6_fu_1151_p2 = ((tmp_9_fu_1119_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln133_7_fu_1157_p2 = ((trunc_ln133_3_fu_1129_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln133_fu_1045_p2 = ((tmp_3_fu_1014_p4 != 8'd255) ? 1'b1 : 1'b0);

assign input_0_address0 = zext_ln129_5_fu_910_p1;

assign input_1_address0 = zext_ln129_5_fu_910_p1;

assign j_fu_559_p2 = (2'd1 + select_ln123_fu_511_p3);

assign or_ln122_1_fu_463_p2 = (xor_ln122_fu_457_p2 | icmp_ln122_fu_353_p2);

assign or_ln122_fu_435_p2 = (icmp_ln122_fu_353_p2 | and_ln121_4_fu_423_p2);

assign or_ln123_1_fu_505_p2 = (or_ln123_fu_499_p2 | icmp_ln122_fu_353_p2);

assign or_ln123_fu_499_p2 = (and_ln122_3_fu_487_p2 | and_ln121_4_fu_423_p2);

assign or_ln124_1_fu_571_p2 = (or_ln124_fu_565_p2 | or_ln122_fu_435_p2);

assign or_ln124_fu_565_p2 = (and_ln123_fu_545_p2 | and_ln122_3_fu_487_p2);

assign or_ln131_1_fu_589_p2 = (trunc_ln124_1_fu_585_p1 | select_ln123_1_fu_523_p3);

assign or_ln131_fu_329_p2 = (trunc_ln124_fu_319_p1 | trunc_ln123_fu_305_p1);

assign or_ln132_1_fu_992_p2 = (icmp_ln132_3_fu_986_p2 | icmp_ln132_2_fu_980_p2);

assign or_ln132_fu_944_p2 = (icmp_ln132_fu_932_p2 | icmp_ln132_1_fu_938_p2);

assign or_ln133_1_fu_1075_p2 = (icmp_ln133_3_fu_1069_p2 | icmp_ln133_2_fu_1063_p2);

assign or_ln133_2_fu_1145_p2 = (icmp_ln133_5_fu_1139_p2 | icmp_ln133_4_fu_1133_p2);

assign or_ln133_3_fu_1163_p2 = (icmp_ln133_7_fu_1157_p2 | icmp_ln133_6_fu_1151_p2);

assign or_ln133_fu_1057_p2 = (icmp_ln133_fu_1045_p2 | icmp_ln133_1_fu_1051_p2);

assign output_0_address0 = zext_ln131_2_fu_891_p1;

assign output_0_address1 = output_0_addr_reg_1350_pp0_iter7_reg;

assign output_0_d1 = select_ln133_reg_1414;

assign output_1_address0 = zext_ln131_2_fu_891_p1;

assign output_1_address1 = output_1_addr_reg_1356_pp0_iter7_reg;

assign output_1_d1 = select_ln133_1_reg_1419;

assign p_shl1_cast_fu_861_p3 = {{add_ln129_5_reg_1334}, {3'd0}};

assign p_shl_cast_fu_838_p3 = {{add_ln131_1_fu_828_p2}, {2'd0}};

assign select_ln121_1_fu_668_p3 = ((icmp_ln122_reg_1221[0:0] === 1'b1) ? shl_ln129_mid1_fu_661_p3 : shl_ln_reg_1187);

assign select_ln121_2_fu_367_p3 = ((icmp_ln122_fu_353_p2[0:0] === 1'b1) ? h_fu_347_p2 : ap_phi_mux_h_0_phi_fu_181_p4);

assign select_ln121_3_fu_677_p3 = ((icmp_ln122_reg_1221[0:0] === 1'b1) ? 4'd0 : shl_ln129_1_reg_1192);

assign select_ln121_4_fu_683_p3 = ((icmp_ln122_reg_1221[0:0] === 1'b1) ? 4'd0 : add_ln129_1_reg_1202);

assign select_ln121_5_fu_722_p3 = ((icmp_ln122_reg_1221[0:0] === 1'b1) ? shl_ln129_mid1_fu_661_p3 : add_ln129_reg_1197);

assign select_ln121_fu_359_p3 = ((icmp_ln122_fu_353_p2[0:0] === 1'b1) ? 3'd0 : ap_phi_mux_w_0_phi_fu_203_p4);

assign select_ln122_1_fu_696_p3 = ((and_ln121_4_reg_1235[0:0] === 1'b1) ? shl_ln129_1_mid1_fu_689_p3 : select_ln121_3_fu_677_p3);

assign select_ln122_2_fu_449_p3 = ((and_ln121_4_fu_423_p2[0:0] === 1'b1) ? w_fu_429_p2 : select_ln121_fu_359_p3);

assign select_ln122_3_fu_706_p3 = ((and_ln121_4_reg_1235[0:0] === 1'b1) ? shl_ln129_1_mid1_fu_689_p3 : select_ln121_4_fu_683_p3);

assign select_ln122_4_fu_728_p3 = ((and_ln121_4_reg_1235[0:0] === 1'b1) ? select_ln121_1_fu_668_p3 : select_ln121_5_fu_722_p3);

assign select_ln122_5_fu_653_p3 = ((icmp_ln122_fu_353_p2[0:0] === 1'b1) ? 9'd1 : add_ln122_1_fu_647_p2);

assign select_ln122_fu_441_p3 = ((or_ln122_fu_435_p2[0:0] === 1'b1) ? 2'd0 : i_0_reg_221);

assign select_ln123_1_fu_523_p3 = ((and_ln122_3_fu_487_p2[0:0] === 1'b1) ? trunc_ln123_1_fu_519_p1 : and_ln122_fu_469_p2);

assign select_ln123_2_fu_735_p3 = ((and_ln122_3_reg_1253[0:0] === 1'b1) ? add_ln129_2_fu_716_p2 : select_ln122_4_fu_728_p3);

assign select_ln123_3_fu_746_p3 = ((and_ln122_3_reg_1253[0:0] === 1'b1) ? select_ln122_1_fu_696_p3 : select_ln122_3_fu_706_p3);

assign select_ln123_4_fu_531_p3 = ((and_ln122_3_fu_487_p2[0:0] === 1'b1) ? trunc_ln123_1_fu_519_p1 : and_ln122_1_fu_475_p2);

assign select_ln123_5_fu_551_p3 = ((and_ln122_3_fu_487_p2[0:0] === 1'b1) ? i_fu_493_p2 : select_ln122_fu_441_p3);

assign select_ln123_6_fu_639_p3 = ((or_ln122_fu_435_p2[0:0] === 1'b1) ? 7'd1 : add_ln123_1_fu_633_p2);

assign select_ln123_fu_511_p3 = ((or_ln123_1_fu_505_p2[0:0] === 1'b1) ? 2'd0 : j_0_reg_243);

assign select_ln124_1_fu_762_p3 = ((and_ln123_reg_1269[0:0] === 1'b1) ? add_ln129_3_fu_756_p2 : select_ln123_3_fu_746_p3);

assign select_ln124_2_fu_769_p3 = ((and_ln123_reg_1269[0:0] === 1'b1) ? or_ln131_1_reg_1285 : select_ln123_4_reg_1264);

assign select_ln124_3_fu_595_p3 = ((and_ln123_fu_545_p2[0:0] === 1'b1) ? j_fu_559_p2 : select_ln123_fu_511_p3);

assign select_ln124_4_fu_625_p3 = ((or_ln123_1_fu_505_p2[0:0] === 1'b1) ? 6'd1 : add_ln124_1_fu_619_p2);

assign select_ln124_fu_577_p3 = ((or_ln124_1_fu_571_p2[0:0] === 1'b1) ? 5'd0 : c_0_0_reg_254);

assign select_ln131_1_fu_903_p3 = ((select_ln124_2_reg_1328_pp0_iter2_reg[0:0] === 1'b1) ? output_1_q0 : 32'd3546862757);

assign select_ln131_fu_896_p3 = ((select_ln124_2_reg_1328_pp0_iter2_reg[0:0] === 1'b1) ? output_0_q0 : 32'd3546862757);

assign select_ln132_1_fu_1004_p3 = ((and_ln132_1_fu_998_p2[0:0] === 1'b1) ? select_ln131_1_reg_1369_pp0_iter4_reg : 32'd0);

assign select_ln132_fu_956_p3 = ((and_ln132_fu_950_p2[0:0] === 1'b1) ? select_ln131_reg_1362_pp0_iter4_reg : 32'd0);

assign select_ln133_1_fu_1181_p3 = ((and_ln133_3_fu_1175_p2[0:0] === 1'b1) ? select_ln132_1_reg_1393_pp0_iter6_reg : input_1_load_reg_1407);

assign select_ln133_fu_1093_p3 = ((and_ln133_1_fu_1087_p2[0:0] === 1'b1) ? select_ln132_reg_1386_pp0_iter6_reg : input_0_load_reg_1400);

assign shl_ln129_1_fu_293_p3 = {{ap_phi_mux_w_0_phi_fu_203_p4}, {1'd0}};

assign shl_ln129_1_mid1_fu_689_p3 = {{w_reg_1242}, {1'd0}};

assign shl_ln129_mid1_fu_661_p3 = {{h_reg_1216}, {1'd0}};

assign shl_ln_fu_285_p3 = {{ap_phi_mux_h_0_phi_fu_181_p4}, {1'd0}};

assign tmp_10_fu_777_p3 = {{lshr_ln_reg_1295}, {3'd0}};

assign tmp_11_fu_788_p3 = {{lshr_ln_reg_1295}, {1'd0}};

assign tmp_12_fu_868_p3 = {{add_ln129_5_reg_1334}, {1'd0}};

assign tmp_13_fu_811_p3 = {{lshr_ln_reg_1295}, {2'd0}};

assign tmp_1_fu_918_p4 = {{bitcast_ln132_fu_915_p1[30:23]}};

assign tmp_3_fu_1014_p4 = {{bitcast_ln133_fu_1011_p1[30:23]}};

assign tmp_4_fu_1031_p4 = {{bitcast_ln133_1_fu_1028_p1[30:23]}};

assign tmp_6_fu_966_p4 = {{bitcast_ln132_1_fu_963_p1[30:23]}};

assign tmp_8_fu_1102_p4 = {{bitcast_ln133_2_fu_1099_p1[30:23]}};

assign tmp_9_fu_1119_p4 = {{bitcast_ln133_3_fu_1116_p1[30:23]}};

assign trunc_ln123_1_fu_519_p1 = i_fu_493_p2[0:0];

assign trunc_ln123_fu_305_p1 = i_0_reg_221[0:0];

assign trunc_ln124_1_fu_585_p1 = j_fu_559_p2[0:0];

assign trunc_ln124_fu_319_p1 = j_0_reg_243[0:0];

assign trunc_ln132_1_fu_976_p1 = bitcast_ln132_1_fu_963_p1[22:0];

assign trunc_ln132_fu_928_p1 = bitcast_ln132_fu_915_p1[22:0];

assign trunc_ln133_1_fu_1041_p1 = bitcast_ln133_1_fu_1028_p1[22:0];

assign trunc_ln133_2_fu_1112_p1 = bitcast_ln133_2_fu_1099_p1[22:0];

assign trunc_ln133_3_fu_1129_p1 = bitcast_ln133_3_fu_1116_p1[22:0];

assign trunc_ln133_fu_1024_p1 = bitcast_ln133_fu_1011_p1[22:0];

assign w_fu_429_p2 = (3'd1 + select_ln121_fu_359_p3);

assign xor_ln121_fu_375_p2 = (icmp_ln122_fu_353_p2 ^ 1'd1);

assign xor_ln122_fu_457_p2 = (icmp_ln123_fu_417_p2 ^ 1'd1);

assign xor_ln123_fu_539_p2 = (1'd1 ^ and_ln122_3_fu_487_p2);

assign zext_ln121_fu_674_p1 = select_ln121_2_reg_1229;

assign zext_ln122_fu_703_p1 = select_ln122_2_reg_1247;

assign zext_ln123_1_fu_713_p1 = i_reg_1259;

assign zext_ln123_fu_301_p1 = i_0_reg_221;

assign zext_ln124_1_fu_753_p1 = j_reg_1280;

assign zext_ln124_2_fu_858_p1 = select_ln124_1_reg_1323;

assign zext_ln124_fu_315_p1 = j_0_reg_243;

assign zext_ln129_1_fu_774_p1 = lshr_ln_reg_1295;

assign zext_ln129_2_fu_784_p1 = tmp_10_fu_777_p3;

assign zext_ln129_3_fu_795_p1 = tmp_11_fu_788_p3;

assign zext_ln129_4_fu_875_p1 = tmp_12_fu_868_p3;

assign zext_ln129_5_fu_910_p1 = add_ln129_7_reg_1345_pp0_iter4_reg;

assign zext_ln129_fu_742_p1 = select_ln123_2_fu_735_p3;

assign zext_ln131_1_fu_834_p1 = add_ln131_1_fu_828_p2;

assign zext_ln131_2_fu_891_p1 = add_ln131_3_reg_1340;

assign zext_ln131_fu_818_p1 = tmp_13_fu_811_p3;

always @ (posedge ap_clk) begin
    shl_ln_reg_1187[0] <= 1'b0;
    shl_ln129_1_reg_1192[0] <= 1'b0;
end

endmodule //max_pooling4
