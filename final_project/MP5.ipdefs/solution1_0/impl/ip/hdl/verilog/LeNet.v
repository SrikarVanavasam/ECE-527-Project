// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="LeNet,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=9.167750,HLS_SYN_LAT=29894,HLS_SYN_TPT=20047,HLS_SYN_MEM=150,HLS_SYN_DSP=188,HLS_SYN_FF=31666,HLS_SYN_LUT=47043,HLS_VERSION=2019_1}" *)

module LeNet (
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        ap_clk,
        ap_rst_n,
        interrupt,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER
);

parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_S_AXI_ADDR_WIDTH = 32;
parameter    C_M_AXI_GMEM_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM_ADDR_WIDTH = 32;
parameter    C_M_AXI_GMEM_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_USER_VALUE = 0;
parameter    C_M_AXI_GMEM_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM_CACHE_VALUE = 3;
parameter    C_M_AXI_ID_WIDTH = 1;
parameter    C_M_AXI_ADDR_WIDTH = 32;
parameter    C_M_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_AWUSER_WIDTH = 1;
parameter    C_M_AXI_ARUSER_WIDTH = 1;
parameter    C_M_AXI_WUSER_WIDTH = 1;
parameter    C_M_AXI_RUSER_WIDTH = 1;
parameter    C_M_AXI_BUSER_WIDTH = 1;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
input   ap_clk;
input   ap_rst_n;
output   interrupt;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_AWADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_AWID;
output  [7:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [C_M_AXI_GMEM_AWUSER_WIDTH - 1:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_WDATA;
output  [C_M_AXI_GMEM_WSTRB_WIDTH - 1:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_WID;
output  [C_M_AXI_GMEM_WUSER_WIDTH - 1:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_ARADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_ARID;
output  [7:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [C_M_AXI_GMEM_ARUSER_WIDTH - 1:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_RID;
input  [C_M_AXI_GMEM_RUSER_WIDTH - 1:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_BID;
input  [C_M_AXI_GMEM_BUSER_WIDTH - 1:0] m_axi_gmem_BUSER;

 reg    ap_rst_n_inv;
wire    ap_start;
wire    ap_ready;
wire    ap_done;
wire    ap_idle;
wire   [31:0] input_r;
wire   [31:0] output_r;
wire    gmem_AWREADY;
wire    gmem_WREADY;
wire    gmem_ARREADY;
wire    gmem_RVALID;
wire   [31:0] gmem_RDATA;
wire    gmem_RLAST;
wire   [0:0] gmem_RID;
wire   [0:0] gmem_RUSER;
wire   [1:0] gmem_RRESP;
wire    gmem_BVALID;
wire   [1:0] gmem_BRESP;
wire   [0:0] gmem_BID;
wire   [0:0] gmem_BUSER;
wire   [31:0] input_buffer_0_i_q0;
wire   [31:0] input_buffer_0_t_q0;
wire   [31:0] output_conv1_buffer_s_i_q0;
wire   [31:0] output_conv1_buffer_s_t_q0;
wire   [31:0] output_conv1_buffer_1_i_q0;
wire   [31:0] output_conv1_buffer_1_t_q0;
wire   [31:0] output_conv1_buffer_2_i_q0;
wire   [31:0] output_conv1_buffer_2_t_q0;
wire   [31:0] output_conv1_buffer_3_i_q0;
wire   [31:0] output_conv1_buffer_3_t_q0;
wire   [31:0] output_conv1_buffer_4_i_q0;
wire   [31:0] output_conv1_buffer_4_t_q0;
wire   [31:0] output_conv1_buffer_5_i_q0;
wire   [31:0] output_conv1_buffer_5_t_q0;
wire   [31:0] output_maxp2_buffer_s_i_q0;
wire   [31:0] output_maxp2_buffer_s_t_q0;
wire   [31:0] output_maxp2_buffer_1_i_q0;
wire   [31:0] output_maxp2_buffer_1_t_q0;
wire   [31:0] output_maxp2_buffer_2_i_q0;
wire   [31:0] output_maxp2_buffer_2_t_q0;
wire   [31:0] output_maxp2_buffer_3_i_q0;
wire   [31:0] output_maxp2_buffer_3_t_q0;
wire   [31:0] output_maxp2_buffer_4_i_q0;
wire   [31:0] output_maxp2_buffer_4_t_q0;
wire   [31:0] output_maxp2_buffer_5_i_q0;
wire   [31:0] output_maxp2_buffer_5_t_q0;
wire   [31:0] output_conv3_buffer_s_i_q0;
wire   [31:0] output_conv3_buffer_s_t_q0;
wire   [31:0] output_conv3_buffer_1_i_q0;
wire   [31:0] output_conv3_buffer_1_t_q0;
wire   [31:0] output_maxp4_buffer_s_i_q0;
wire   [31:0] output_maxp4_buffer_s_i_q1;
wire   [31:0] output_maxp4_buffer_s_t_q0;
wire   [31:0] output_maxp4_buffer_s_t_q1;
wire   [31:0] output_maxp4_buffer_1_i_q0;
wire   [31:0] output_maxp4_buffer_1_i_q1;
wire   [31:0] output_maxp4_buffer_1_t_q0;
wire   [31:0] output_maxp4_buffer_1_t_q1;
wire   [31:0] output_conv5_buffer_s_i_q0;
wire   [31:0] output_conv5_buffer_s_t_q0;
wire   [31:0] output_conv5_buffer_1_i_q0;
wire   [31:0] output_conv5_buffer_1_t_q0;
wire   [31:0] output_conv5_buffer_2_i_q0;
wire   [31:0] output_conv5_buffer_2_t_q0;
wire   [31:0] output_conv5_buffer_3_i_q0;
wire   [31:0] output_conv5_buffer_3_t_q0;
wire   [31:0] output_conv5_buffer_4_i_q0;
wire   [31:0] output_conv5_buffer_4_t_q0;
wire   [31:0] output_conv5_buffer_5_i_q0;
wire   [31:0] output_conv5_buffer_5_t_q0;
wire   [31:0] output_fc6_buffer_0_i_q0;
wire   [31:0] output_fc6_buffer_0_t_q0;
wire   [31:0] output_fc6_buffer_1_i_q0;
wire   [31:0] output_fc6_buffer_1_t_q0;
wire    load_input19_U0_ap_start;
wire    load_input19_U0_ap_done;
wire    load_input19_U0_ap_continue;
wire    load_input19_U0_ap_idle;
wire    load_input19_U0_ap_ready;
wire    load_input19_U0_m_axi_input_r_AWVALID;
wire   [31:0] load_input19_U0_m_axi_input_r_AWADDR;
wire   [0:0] load_input19_U0_m_axi_input_r_AWID;
wire   [31:0] load_input19_U0_m_axi_input_r_AWLEN;
wire   [2:0] load_input19_U0_m_axi_input_r_AWSIZE;
wire   [1:0] load_input19_U0_m_axi_input_r_AWBURST;
wire   [1:0] load_input19_U0_m_axi_input_r_AWLOCK;
wire   [3:0] load_input19_U0_m_axi_input_r_AWCACHE;
wire   [2:0] load_input19_U0_m_axi_input_r_AWPROT;
wire   [3:0] load_input19_U0_m_axi_input_r_AWQOS;
wire   [3:0] load_input19_U0_m_axi_input_r_AWREGION;
wire   [0:0] load_input19_U0_m_axi_input_r_AWUSER;
wire    load_input19_U0_m_axi_input_r_WVALID;
wire   [31:0] load_input19_U0_m_axi_input_r_WDATA;
wire   [3:0] load_input19_U0_m_axi_input_r_WSTRB;
wire    load_input19_U0_m_axi_input_r_WLAST;
wire   [0:0] load_input19_U0_m_axi_input_r_WID;
wire   [0:0] load_input19_U0_m_axi_input_r_WUSER;
wire    load_input19_U0_m_axi_input_r_ARVALID;
wire   [31:0] load_input19_U0_m_axi_input_r_ARADDR;
wire   [0:0] load_input19_U0_m_axi_input_r_ARID;
wire   [31:0] load_input19_U0_m_axi_input_r_ARLEN;
wire   [2:0] load_input19_U0_m_axi_input_r_ARSIZE;
wire   [1:0] load_input19_U0_m_axi_input_r_ARBURST;
wire   [1:0] load_input19_U0_m_axi_input_r_ARLOCK;
wire   [3:0] load_input19_U0_m_axi_input_r_ARCACHE;
wire   [2:0] load_input19_U0_m_axi_input_r_ARPROT;
wire   [3:0] load_input19_U0_m_axi_input_r_ARQOS;
wire   [3:0] load_input19_U0_m_axi_input_r_ARREGION;
wire   [0:0] load_input19_U0_m_axi_input_r_ARUSER;
wire    load_input19_U0_m_axi_input_r_RREADY;
wire    load_input19_U0_m_axi_input_r_BREADY;
wire   [9:0] load_input19_U0_input_buffer_0_address0;
wire    load_input19_U0_input_buffer_0_ce0;
wire    load_input19_U0_input_buffer_0_we0;
wire   [31:0] load_input19_U0_input_buffer_0_d0;
wire   [31:0] load_input19_U0_output_out_din;
wire    load_input19_U0_output_out_write;
wire    ap_channel_done_input_buffer_0;
wire    load_input19_U0_input_buffer_0_full_n;
wire    convolution1_U0_ap_start;
wire    convolution1_U0_ap_done;
wire    convolution1_U0_ap_continue;
wire    convolution1_U0_ap_idle;
wire    convolution1_U0_ap_ready;
wire   [9:0] convolution1_U0_input_0_address0;
wire    convolution1_U0_input_0_ce0;
wire   [9:0] convolution1_U0_output_0_address0;
wire    convolution1_U0_output_0_ce0;
wire   [9:0] convolution1_U0_output_0_address1;
wire    convolution1_U0_output_0_ce1;
wire    convolution1_U0_output_0_we1;
wire   [31:0] convolution1_U0_output_0_d1;
wire   [9:0] convolution1_U0_output_1_address0;
wire    convolution1_U0_output_1_ce0;
wire   [9:0] convolution1_U0_output_1_address1;
wire    convolution1_U0_output_1_ce1;
wire    convolution1_U0_output_1_we1;
wire   [31:0] convolution1_U0_output_1_d1;
wire   [9:0] convolution1_U0_output_2_address0;
wire    convolution1_U0_output_2_ce0;
wire   [9:0] convolution1_U0_output_2_address1;
wire    convolution1_U0_output_2_ce1;
wire    convolution1_U0_output_2_we1;
wire   [31:0] convolution1_U0_output_2_d1;
wire   [9:0] convolution1_U0_output_3_address0;
wire    convolution1_U0_output_3_ce0;
wire   [9:0] convolution1_U0_output_3_address1;
wire    convolution1_U0_output_3_ce1;
wire    convolution1_U0_output_3_we1;
wire   [31:0] convolution1_U0_output_3_d1;
wire   [9:0] convolution1_U0_output_4_address0;
wire    convolution1_U0_output_4_ce0;
wire   [9:0] convolution1_U0_output_4_address1;
wire    convolution1_U0_output_4_ce1;
wire    convolution1_U0_output_4_we1;
wire   [31:0] convolution1_U0_output_4_d1;
wire   [9:0] convolution1_U0_output_5_address0;
wire    convolution1_U0_output_5_ce0;
wire   [9:0] convolution1_U0_output_5_address1;
wire    convolution1_U0_output_5_ce1;
wire    convolution1_U0_output_5_we1;
wire   [31:0] convolution1_U0_output_5_d1;
wire    ap_channel_done_output_conv1_buffer_5;
wire    convolution1_U0_output_5_full_n;
reg    ap_sync_reg_channel_write_output_conv1_buffer_5;
wire    ap_sync_channel_write_output_conv1_buffer_5;
wire    ap_channel_done_output_conv1_buffer_4;
wire    convolution1_U0_output_4_full_n;
reg    ap_sync_reg_channel_write_output_conv1_buffer_4;
wire    ap_sync_channel_write_output_conv1_buffer_4;
wire    ap_channel_done_output_conv1_buffer_3;
wire    convolution1_U0_output_3_full_n;
reg    ap_sync_reg_channel_write_output_conv1_buffer_3;
wire    ap_sync_channel_write_output_conv1_buffer_3;
wire    ap_channel_done_output_conv1_buffer_2;
wire    convolution1_U0_output_2_full_n;
reg    ap_sync_reg_channel_write_output_conv1_buffer_2;
wire    ap_sync_channel_write_output_conv1_buffer_2;
wire    ap_channel_done_output_conv1_buffer_1;
wire    convolution1_U0_output_1_full_n;
reg    ap_sync_reg_channel_write_output_conv1_buffer_1;
wire    ap_sync_channel_write_output_conv1_buffer_1;
wire    ap_channel_done_output_conv1_buffer_s;
wire    convolution1_U0_output_0_full_n;
reg    ap_sync_reg_channel_write_output_conv1_buffer_s;
wire    ap_sync_channel_write_output_conv1_buffer_s;
wire    max_pooling2_U0_ap_start;
wire    max_pooling2_U0_ap_done;
wire    max_pooling2_U0_ap_continue;
wire    max_pooling2_U0_ap_idle;
wire    max_pooling2_U0_ap_ready;
wire   [9:0] max_pooling2_U0_input_0_address0;
wire    max_pooling2_U0_input_0_ce0;
wire   [9:0] max_pooling2_U0_input_1_address0;
wire    max_pooling2_U0_input_1_ce0;
wire   [9:0] max_pooling2_U0_input_2_address0;
wire    max_pooling2_U0_input_2_ce0;
wire   [9:0] max_pooling2_U0_input_3_address0;
wire    max_pooling2_U0_input_3_ce0;
wire   [9:0] max_pooling2_U0_input_4_address0;
wire    max_pooling2_U0_input_4_ce0;
wire   [9:0] max_pooling2_U0_input_5_address0;
wire    max_pooling2_U0_input_5_ce0;
wire   [7:0] max_pooling2_U0_output_0_address0;
wire    max_pooling2_U0_output_0_ce0;
wire    max_pooling2_U0_output_0_we0;
wire   [31:0] max_pooling2_U0_output_0_d0;
wire   [7:0] max_pooling2_U0_output_1_address0;
wire    max_pooling2_U0_output_1_ce0;
wire    max_pooling2_U0_output_1_we0;
wire   [31:0] max_pooling2_U0_output_1_d0;
wire   [7:0] max_pooling2_U0_output_2_address0;
wire    max_pooling2_U0_output_2_ce0;
wire    max_pooling2_U0_output_2_we0;
wire   [31:0] max_pooling2_U0_output_2_d0;
wire   [7:0] max_pooling2_U0_output_3_address0;
wire    max_pooling2_U0_output_3_ce0;
wire    max_pooling2_U0_output_3_we0;
wire   [31:0] max_pooling2_U0_output_3_d0;
wire   [7:0] max_pooling2_U0_output_4_address0;
wire    max_pooling2_U0_output_4_ce0;
wire    max_pooling2_U0_output_4_we0;
wire   [31:0] max_pooling2_U0_output_4_d0;
wire   [7:0] max_pooling2_U0_output_5_address0;
wire    max_pooling2_U0_output_5_ce0;
wire    max_pooling2_U0_output_5_we0;
wire   [31:0] max_pooling2_U0_output_5_d0;
wire    ap_channel_done_output_maxp2_buffer_5;
wire    max_pooling2_U0_output_5_full_n;
reg    ap_sync_reg_channel_write_output_maxp2_buffer_5;
wire    ap_sync_channel_write_output_maxp2_buffer_5;
wire    ap_channel_done_output_maxp2_buffer_4;
wire    max_pooling2_U0_output_4_full_n;
reg    ap_sync_reg_channel_write_output_maxp2_buffer_4;
wire    ap_sync_channel_write_output_maxp2_buffer_4;
wire    ap_channel_done_output_maxp2_buffer_3;
wire    max_pooling2_U0_output_3_full_n;
reg    ap_sync_reg_channel_write_output_maxp2_buffer_3;
wire    ap_sync_channel_write_output_maxp2_buffer_3;
wire    ap_channel_done_output_maxp2_buffer_2;
wire    max_pooling2_U0_output_2_full_n;
reg    ap_sync_reg_channel_write_output_maxp2_buffer_2;
wire    ap_sync_channel_write_output_maxp2_buffer_2;
wire    ap_channel_done_output_maxp2_buffer_1;
wire    max_pooling2_U0_output_1_full_n;
reg    ap_sync_reg_channel_write_output_maxp2_buffer_1;
wire    ap_sync_channel_write_output_maxp2_buffer_1;
wire    ap_channel_done_output_maxp2_buffer_s;
wire    max_pooling2_U0_output_0_full_n;
reg    ap_sync_reg_channel_write_output_maxp2_buffer_s;
wire    ap_sync_channel_write_output_maxp2_buffer_s;
wire    convolution3_U0_ap_start;
wire    convolution3_U0_ap_done;
wire    convolution3_U0_ap_continue;
wire    convolution3_U0_ap_idle;
wire    convolution3_U0_ap_ready;
wire   [7:0] convolution3_U0_input_0_address0;
wire    convolution3_U0_input_0_ce0;
wire   [7:0] convolution3_U0_input_1_address0;
wire    convolution3_U0_input_1_ce0;
wire   [7:0] convolution3_U0_input_2_address0;
wire    convolution3_U0_input_2_ce0;
wire   [7:0] convolution3_U0_input_3_address0;
wire    convolution3_U0_input_3_ce0;
wire   [7:0] convolution3_U0_input_4_address0;
wire    convolution3_U0_input_4_ce0;
wire   [7:0] convolution3_U0_input_5_address0;
wire    convolution3_U0_input_5_ce0;
wire   [9:0] convolution3_U0_output_0_address0;
wire    convolution3_U0_output_0_ce0;
wire   [9:0] convolution3_U0_output_0_address1;
wire    convolution3_U0_output_0_ce1;
wire    convolution3_U0_output_0_we1;
wire   [31:0] convolution3_U0_output_0_d1;
wire   [9:0] convolution3_U0_output_1_address0;
wire    convolution3_U0_output_1_ce0;
wire   [9:0] convolution3_U0_output_1_address1;
wire    convolution3_U0_output_1_ce1;
wire    convolution3_U0_output_1_we1;
wire   [31:0] convolution3_U0_output_1_d1;
wire    ap_channel_done_output_conv3_buffer_1;
wire    convolution3_U0_output_1_full_n;
reg    ap_sync_reg_channel_write_output_conv3_buffer_1;
wire    ap_sync_channel_write_output_conv3_buffer_1;
wire    ap_channel_done_output_conv3_buffer_s;
wire    convolution3_U0_output_0_full_n;
reg    ap_sync_reg_channel_write_output_conv3_buffer_s;
wire    ap_sync_channel_write_output_conv3_buffer_s;
wire    max_pooling4_U0_ap_start;
wire    max_pooling4_U0_ap_done;
wire    max_pooling4_U0_ap_continue;
wire    max_pooling4_U0_ap_idle;
wire    max_pooling4_U0_ap_ready;
wire   [9:0] max_pooling4_U0_input_0_address0;
wire    max_pooling4_U0_input_0_ce0;
wire   [9:0] max_pooling4_U0_input_1_address0;
wire    max_pooling4_U0_input_1_ce0;
wire   [7:0] max_pooling4_U0_output_0_address0;
wire    max_pooling4_U0_output_0_ce0;
wire   [7:0] max_pooling4_U0_output_0_address1;
wire    max_pooling4_U0_output_0_ce1;
wire    max_pooling4_U0_output_0_we1;
wire   [31:0] max_pooling4_U0_output_0_d1;
wire   [7:0] max_pooling4_U0_output_1_address0;
wire    max_pooling4_U0_output_1_ce0;
wire   [7:0] max_pooling4_U0_output_1_address1;
wire    max_pooling4_U0_output_1_ce1;
wire    max_pooling4_U0_output_1_we1;
wire   [31:0] max_pooling4_U0_output_1_d1;
wire    ap_channel_done_output_maxp4_buffer_1;
wire    max_pooling4_U0_output_1_full_n;
reg    ap_sync_reg_channel_write_output_maxp4_buffer_1;
wire    ap_sync_channel_write_output_maxp4_buffer_1;
wire    ap_channel_done_output_maxp4_buffer_s;
wire    max_pooling4_U0_output_0_full_n;
reg    ap_sync_reg_channel_write_output_maxp4_buffer_s;
wire    ap_sync_channel_write_output_maxp4_buffer_s;
wire    convolution5_U0_ap_start;
wire    convolution5_U0_ap_done;
wire    convolution5_U0_ap_continue;
wire    convolution5_U0_ap_idle;
wire    convolution5_U0_ap_ready;
wire   [7:0] convolution5_U0_input_0_address0;
wire    convolution5_U0_input_0_ce0;
wire   [7:0] convolution5_U0_input_0_address1;
wire    convolution5_U0_input_0_ce1;
wire   [7:0] convolution5_U0_input_1_address0;
wire    convolution5_U0_input_1_ce0;
wire   [7:0] convolution5_U0_input_1_address1;
wire    convolution5_U0_input_1_ce1;
wire   [4:0] convolution5_U0_output_0_0_0_address0;
wire    convolution5_U0_output_0_0_0_ce0;
wire   [4:0] convolution5_U0_output_0_0_0_address1;
wire    convolution5_U0_output_0_0_0_ce1;
wire    convolution5_U0_output_0_0_0_we1;
wire   [31:0] convolution5_U0_output_0_0_0_d1;
wire   [4:0] convolution5_U0_output_1_0_0_address0;
wire    convolution5_U0_output_1_0_0_ce0;
wire   [4:0] convolution5_U0_output_1_0_0_address1;
wire    convolution5_U0_output_1_0_0_ce1;
wire    convolution5_U0_output_1_0_0_we1;
wire   [31:0] convolution5_U0_output_1_0_0_d1;
wire   [4:0] convolution5_U0_output_2_0_0_address0;
wire    convolution5_U0_output_2_0_0_ce0;
wire   [4:0] convolution5_U0_output_2_0_0_address1;
wire    convolution5_U0_output_2_0_0_ce1;
wire    convolution5_U0_output_2_0_0_we1;
wire   [31:0] convolution5_U0_output_2_0_0_d1;
wire   [4:0] convolution5_U0_output_3_0_0_address0;
wire    convolution5_U0_output_3_0_0_ce0;
wire   [4:0] convolution5_U0_output_3_0_0_address1;
wire    convolution5_U0_output_3_0_0_ce1;
wire    convolution5_U0_output_3_0_0_we1;
wire   [31:0] convolution5_U0_output_3_0_0_d1;
wire   [4:0] convolution5_U0_output_4_0_0_address0;
wire    convolution5_U0_output_4_0_0_ce0;
wire   [4:0] convolution5_U0_output_4_0_0_address1;
wire    convolution5_U0_output_4_0_0_ce1;
wire    convolution5_U0_output_4_0_0_we1;
wire   [31:0] convolution5_U0_output_4_0_0_d1;
wire   [4:0] convolution5_U0_output_5_0_0_address0;
wire    convolution5_U0_output_5_0_0_ce0;
wire   [4:0] convolution5_U0_output_5_0_0_address1;
wire    convolution5_U0_output_5_0_0_ce1;
wire    convolution5_U0_output_5_0_0_we1;
wire   [31:0] convolution5_U0_output_5_0_0_d1;
wire    ap_channel_done_output_conv5_buffer_5;
wire    convolution5_U0_output_5_0_0_full_n;
reg    ap_sync_reg_channel_write_output_conv5_buffer_5;
wire    ap_sync_channel_write_output_conv5_buffer_5;
wire    ap_channel_done_output_conv5_buffer_4;
wire    convolution5_U0_output_4_0_0_full_n;
reg    ap_sync_reg_channel_write_output_conv5_buffer_4;
wire    ap_sync_channel_write_output_conv5_buffer_4;
wire    ap_channel_done_output_conv5_buffer_3;
wire    convolution5_U0_output_3_0_0_full_n;
reg    ap_sync_reg_channel_write_output_conv5_buffer_3;
wire    ap_sync_channel_write_output_conv5_buffer_3;
wire    ap_channel_done_output_conv5_buffer_2;
wire    convolution5_U0_output_2_0_0_full_n;
reg    ap_sync_reg_channel_write_output_conv5_buffer_2;
wire    ap_sync_channel_write_output_conv5_buffer_2;
wire    ap_channel_done_output_conv5_buffer_1;
wire    convolution5_U0_output_1_0_0_full_n;
reg    ap_sync_reg_channel_write_output_conv5_buffer_1;
wire    ap_sync_channel_write_output_conv5_buffer_1;
wire    ap_channel_done_output_conv5_buffer_s;
wire    convolution5_U0_output_0_0_0_full_n;
reg    ap_sync_reg_channel_write_output_conv5_buffer_s;
wire    ap_sync_channel_write_output_conv5_buffer_s;
wire    fc6_U0_ap_start;
wire    fc6_U0_ap_done;
wire    fc6_U0_ap_continue;
wire    fc6_U0_ap_idle;
wire    fc6_U0_ap_ready;
wire   [4:0] fc6_U0_input_0_0_0_address0;
wire    fc6_U0_input_0_0_0_ce0;
wire   [4:0] fc6_U0_input_1_0_0_address0;
wire    fc6_U0_input_1_0_0_ce0;
wire   [4:0] fc6_U0_input_2_0_0_address0;
wire    fc6_U0_input_2_0_0_ce0;
wire   [4:0] fc6_U0_input_3_0_0_address0;
wire    fc6_U0_input_3_0_0_ce0;
wire   [4:0] fc6_U0_input_4_0_0_address0;
wire    fc6_U0_input_4_0_0_ce0;
wire   [4:0] fc6_U0_input_5_0_0_address0;
wire    fc6_U0_input_5_0_0_ce0;
wire   [2:0] fc6_U0_output_0_address0;
wire    fc6_U0_output_0_ce0;
wire    fc6_U0_output_0_we0;
wire   [31:0] fc6_U0_output_0_d0;
wire   [2:0] fc6_U0_output_1_address0;
wire    fc6_U0_output_1_ce0;
wire    fc6_U0_output_1_we0;
wire   [31:0] fc6_U0_output_1_d0;
wire    ap_channel_done_output_fc6_buffer_1;
wire    fc6_U0_output_1_full_n;
reg    ap_sync_reg_channel_write_output_fc6_buffer_1;
wire    ap_sync_channel_write_output_fc6_buffer_1;
wire    ap_channel_done_output_fc6_buffer_0;
wire    fc6_U0_output_0_full_n;
reg    ap_sync_reg_channel_write_output_fc6_buffer_0;
wire    ap_sync_channel_write_output_fc6_buffer_0;
wire    store_output_U0_ap_start;
wire    store_output_U0_ap_done;
wire    store_output_U0_ap_continue;
wire    store_output_U0_ap_idle;
wire    store_output_U0_ap_ready;
wire    store_output_U0_m_axi_output_r_AWVALID;
wire   [31:0] store_output_U0_m_axi_output_r_AWADDR;
wire   [0:0] store_output_U0_m_axi_output_r_AWID;
wire   [31:0] store_output_U0_m_axi_output_r_AWLEN;
wire   [2:0] store_output_U0_m_axi_output_r_AWSIZE;
wire   [1:0] store_output_U0_m_axi_output_r_AWBURST;
wire   [1:0] store_output_U0_m_axi_output_r_AWLOCK;
wire   [3:0] store_output_U0_m_axi_output_r_AWCACHE;
wire   [2:0] store_output_U0_m_axi_output_r_AWPROT;
wire   [3:0] store_output_U0_m_axi_output_r_AWQOS;
wire   [3:0] store_output_U0_m_axi_output_r_AWREGION;
wire   [0:0] store_output_U0_m_axi_output_r_AWUSER;
wire    store_output_U0_m_axi_output_r_WVALID;
wire   [31:0] store_output_U0_m_axi_output_r_WDATA;
wire   [3:0] store_output_U0_m_axi_output_r_WSTRB;
wire    store_output_U0_m_axi_output_r_WLAST;
wire   [0:0] store_output_U0_m_axi_output_r_WID;
wire   [0:0] store_output_U0_m_axi_output_r_WUSER;
wire    store_output_U0_m_axi_output_r_ARVALID;
wire   [31:0] store_output_U0_m_axi_output_r_ARADDR;
wire   [0:0] store_output_U0_m_axi_output_r_ARID;
wire   [31:0] store_output_U0_m_axi_output_r_ARLEN;
wire   [2:0] store_output_U0_m_axi_output_r_ARSIZE;
wire   [1:0] store_output_U0_m_axi_output_r_ARBURST;
wire   [1:0] store_output_U0_m_axi_output_r_ARLOCK;
wire   [3:0] store_output_U0_m_axi_output_r_ARCACHE;
wire   [2:0] store_output_U0_m_axi_output_r_ARPROT;
wire   [3:0] store_output_U0_m_axi_output_r_ARQOS;
wire   [3:0] store_output_U0_m_axi_output_r_ARREGION;
wire   [0:0] store_output_U0_m_axi_output_r_ARUSER;
wire    store_output_U0_m_axi_output_r_RREADY;
wire    store_output_U0_m_axi_output_r_BREADY;
wire    store_output_U0_output_offset_read;
wire   [2:0] store_output_U0_output_fc6_buffer_0_address0;
wire    store_output_U0_output_fc6_buffer_0_ce0;
wire   [2:0] store_output_U0_output_fc6_buffer_1_address0;
wire    store_output_U0_output_fc6_buffer_1_ce0;
wire    ap_sync_continue;
wire    input_buffer_0_i_full_n;
wire    input_buffer_0_t_empty_n;
wire    output_conv1_buffer_s_i_full_n;
wire    output_conv1_buffer_s_t_empty_n;
wire   [31:0] output_conv1_buffer_s_i_d0;
wire    output_conv1_buffer_s_i_we0;
wire   [31:0] output_conv1_buffer_s_t_d0;
wire    output_conv1_buffer_s_t_we0;
wire    output_conv1_buffer_1_i_full_n;
wire    output_conv1_buffer_1_t_empty_n;
wire   [31:0] output_conv1_buffer_1_i_d0;
wire    output_conv1_buffer_1_i_we0;
wire   [31:0] output_conv1_buffer_1_t_d0;
wire    output_conv1_buffer_1_t_we0;
wire    output_conv1_buffer_2_i_full_n;
wire    output_conv1_buffer_2_t_empty_n;
wire   [31:0] output_conv1_buffer_2_i_d0;
wire    output_conv1_buffer_2_i_we0;
wire   [31:0] output_conv1_buffer_2_t_d0;
wire    output_conv1_buffer_2_t_we0;
wire    output_conv1_buffer_3_i_full_n;
wire    output_conv1_buffer_3_t_empty_n;
wire   [31:0] output_conv1_buffer_3_i_d0;
wire    output_conv1_buffer_3_i_we0;
wire   [31:0] output_conv1_buffer_3_t_d0;
wire    output_conv1_buffer_3_t_we0;
wire    output_conv1_buffer_4_i_full_n;
wire    output_conv1_buffer_4_t_empty_n;
wire   [31:0] output_conv1_buffer_4_i_d0;
wire    output_conv1_buffer_4_i_we0;
wire   [31:0] output_conv1_buffer_4_t_d0;
wire    output_conv1_buffer_4_t_we0;
wire    output_conv1_buffer_5_i_full_n;
wire    output_conv1_buffer_5_t_empty_n;
wire   [31:0] output_conv1_buffer_5_i_d0;
wire    output_conv1_buffer_5_i_we0;
wire   [31:0] output_conv1_buffer_5_t_d0;
wire    output_conv1_buffer_5_t_we0;
wire    output_maxp2_buffer_s_i_full_n;
wire    output_maxp2_buffer_s_t_empty_n;
wire    output_maxp2_buffer_1_i_full_n;
wire    output_maxp2_buffer_1_t_empty_n;
wire    output_maxp2_buffer_2_i_full_n;
wire    output_maxp2_buffer_2_t_empty_n;
wire    output_maxp2_buffer_3_i_full_n;
wire    output_maxp2_buffer_3_t_empty_n;
wire    output_maxp2_buffer_4_i_full_n;
wire    output_maxp2_buffer_4_t_empty_n;
wire    output_maxp2_buffer_5_i_full_n;
wire    output_maxp2_buffer_5_t_empty_n;
wire    output_conv3_buffer_s_i_full_n;
wire    output_conv3_buffer_s_t_empty_n;
wire   [31:0] output_conv3_buffer_s_i_d0;
wire    output_conv3_buffer_s_i_we0;
wire   [31:0] output_conv3_buffer_s_t_d0;
wire    output_conv3_buffer_s_t_we0;
wire    output_conv3_buffer_1_i_full_n;
wire    output_conv3_buffer_1_t_empty_n;
wire   [31:0] output_conv3_buffer_1_i_d0;
wire    output_conv3_buffer_1_i_we0;
wire   [31:0] output_conv3_buffer_1_t_d0;
wire    output_conv3_buffer_1_t_we0;
wire    output_maxp4_buffer_s_i_full_n;
wire    output_maxp4_buffer_s_t_empty_n;
wire   [31:0] output_maxp4_buffer_s_i_d0;
wire    output_maxp4_buffer_s_i_we0;
wire   [31:0] output_maxp4_buffer_s_t_d0;
wire    output_maxp4_buffer_s_t_we0;
wire    output_maxp4_buffer_1_i_full_n;
wire    output_maxp4_buffer_1_t_empty_n;
wire   [31:0] output_maxp4_buffer_1_i_d0;
wire    output_maxp4_buffer_1_i_we0;
wire   [31:0] output_maxp4_buffer_1_t_d0;
wire    output_maxp4_buffer_1_t_we0;
wire    output_conv5_buffer_s_i_full_n;
wire    output_conv5_buffer_s_t_empty_n;
wire   [31:0] output_conv5_buffer_s_i_d0;
wire    output_conv5_buffer_s_i_we0;
wire   [31:0] output_conv5_buffer_s_t_d0;
wire    output_conv5_buffer_s_t_we0;
wire    output_conv5_buffer_1_i_full_n;
wire    output_conv5_buffer_1_t_empty_n;
wire   [31:0] output_conv5_buffer_1_i_d0;
wire    output_conv5_buffer_1_i_we0;
wire   [31:0] output_conv5_buffer_1_t_d0;
wire    output_conv5_buffer_1_t_we0;
wire    output_conv5_buffer_2_i_full_n;
wire    output_conv5_buffer_2_t_empty_n;
wire   [31:0] output_conv5_buffer_2_i_d0;
wire    output_conv5_buffer_2_i_we0;
wire   [31:0] output_conv5_buffer_2_t_d0;
wire    output_conv5_buffer_2_t_we0;
wire    output_conv5_buffer_3_i_full_n;
wire    output_conv5_buffer_3_t_empty_n;
wire   [31:0] output_conv5_buffer_3_i_d0;
wire    output_conv5_buffer_3_i_we0;
wire   [31:0] output_conv5_buffer_3_t_d0;
wire    output_conv5_buffer_3_t_we0;
wire    output_conv5_buffer_4_i_full_n;
wire    output_conv5_buffer_4_t_empty_n;
wire   [31:0] output_conv5_buffer_4_i_d0;
wire    output_conv5_buffer_4_i_we0;
wire   [31:0] output_conv5_buffer_4_t_d0;
wire    output_conv5_buffer_4_t_we0;
wire    output_conv5_buffer_5_i_full_n;
wire    output_conv5_buffer_5_t_empty_n;
wire   [31:0] output_conv5_buffer_5_i_d0;
wire    output_conv5_buffer_5_i_we0;
wire   [31:0] output_conv5_buffer_5_t_d0;
wire    output_conv5_buffer_5_t_we0;
wire    output_fc6_buffer_0_i_full_n;
wire    output_fc6_buffer_0_t_empty_n;
wire    output_fc6_buffer_1_i_full_n;
wire    output_fc6_buffer_1_t_empty_n;
wire    output_c_full_n;
wire   [31:0] output_c_dout;
wire    output_c_empty_n;
wire    ap_sync_done;
wire    ap_sync_ready;
wire    load_input19_U0_start_full_n;
wire    load_input19_U0_start_write;
wire    convolution1_U0_start_full_n;
wire    convolution1_U0_start_write;
wire    max_pooling2_U0_start_full_n;
wire    max_pooling2_U0_start_write;
wire    convolution3_U0_start_full_n;
wire    convolution3_U0_start_write;
wire    max_pooling4_U0_start_full_n;
wire    max_pooling4_U0_start_write;
wire    convolution5_U0_start_full_n;
wire    convolution5_U0_start_write;
wire    fc6_U0_start_full_n;
wire    fc6_U0_start_write;
wire    store_output_U0_start_full_n;
wire    store_output_U0_start_write;

// power-on initialization
initial begin
#0 ap_sync_reg_channel_write_output_conv1_buffer_5 = 1'b0;
#0 ap_sync_reg_channel_write_output_conv1_buffer_4 = 1'b0;
#0 ap_sync_reg_channel_write_output_conv1_buffer_3 = 1'b0;
#0 ap_sync_reg_channel_write_output_conv1_buffer_2 = 1'b0;
#0 ap_sync_reg_channel_write_output_conv1_buffer_1 = 1'b0;
#0 ap_sync_reg_channel_write_output_conv1_buffer_s = 1'b0;
#0 ap_sync_reg_channel_write_output_maxp2_buffer_5 = 1'b0;
#0 ap_sync_reg_channel_write_output_maxp2_buffer_4 = 1'b0;
#0 ap_sync_reg_channel_write_output_maxp2_buffer_3 = 1'b0;
#0 ap_sync_reg_channel_write_output_maxp2_buffer_2 = 1'b0;
#0 ap_sync_reg_channel_write_output_maxp2_buffer_1 = 1'b0;
#0 ap_sync_reg_channel_write_output_maxp2_buffer_s = 1'b0;
#0 ap_sync_reg_channel_write_output_conv3_buffer_1 = 1'b0;
#0 ap_sync_reg_channel_write_output_conv3_buffer_s = 1'b0;
#0 ap_sync_reg_channel_write_output_maxp4_buffer_1 = 1'b0;
#0 ap_sync_reg_channel_write_output_maxp4_buffer_s = 1'b0;
#0 ap_sync_reg_channel_write_output_conv5_buffer_5 = 1'b0;
#0 ap_sync_reg_channel_write_output_conv5_buffer_4 = 1'b0;
#0 ap_sync_reg_channel_write_output_conv5_buffer_3 = 1'b0;
#0 ap_sync_reg_channel_write_output_conv5_buffer_2 = 1'b0;
#0 ap_sync_reg_channel_write_output_conv5_buffer_1 = 1'b0;
#0 ap_sync_reg_channel_write_output_conv5_buffer_s = 1'b0;
#0 ap_sync_reg_channel_write_output_fc6_buffer_1 = 1'b0;
#0 ap_sync_reg_channel_write_output_fc6_buffer_0 = 1'b0;
end

LeNet_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
LeNet_control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .input_r(input_r),
    .output_r(output_r)
);

LeNet_gmem_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM_CACHE_VALUE ))
LeNet_gmem_m_axi_U(
    .AWVALID(m_axi_gmem_AWVALID),
    .AWREADY(m_axi_gmem_AWREADY),
    .AWADDR(m_axi_gmem_AWADDR),
    .AWID(m_axi_gmem_AWID),
    .AWLEN(m_axi_gmem_AWLEN),
    .AWSIZE(m_axi_gmem_AWSIZE),
    .AWBURST(m_axi_gmem_AWBURST),
    .AWLOCK(m_axi_gmem_AWLOCK),
    .AWCACHE(m_axi_gmem_AWCACHE),
    .AWPROT(m_axi_gmem_AWPROT),
    .AWQOS(m_axi_gmem_AWQOS),
    .AWREGION(m_axi_gmem_AWREGION),
    .AWUSER(m_axi_gmem_AWUSER),
    .WVALID(m_axi_gmem_WVALID),
    .WREADY(m_axi_gmem_WREADY),
    .WDATA(m_axi_gmem_WDATA),
    .WSTRB(m_axi_gmem_WSTRB),
    .WLAST(m_axi_gmem_WLAST),
    .WID(m_axi_gmem_WID),
    .WUSER(m_axi_gmem_WUSER),
    .ARVALID(m_axi_gmem_ARVALID),
    .ARREADY(m_axi_gmem_ARREADY),
    .ARADDR(m_axi_gmem_ARADDR),
    .ARID(m_axi_gmem_ARID),
    .ARLEN(m_axi_gmem_ARLEN),
    .ARSIZE(m_axi_gmem_ARSIZE),
    .ARBURST(m_axi_gmem_ARBURST),
    .ARLOCK(m_axi_gmem_ARLOCK),
    .ARCACHE(m_axi_gmem_ARCACHE),
    .ARPROT(m_axi_gmem_ARPROT),
    .ARQOS(m_axi_gmem_ARQOS),
    .ARREGION(m_axi_gmem_ARREGION),
    .ARUSER(m_axi_gmem_ARUSER),
    .RVALID(m_axi_gmem_RVALID),
    .RREADY(m_axi_gmem_RREADY),
    .RDATA(m_axi_gmem_RDATA),
    .RLAST(m_axi_gmem_RLAST),
    .RID(m_axi_gmem_RID),
    .RUSER(m_axi_gmem_RUSER),
    .RRESP(m_axi_gmem_RRESP),
    .BVALID(m_axi_gmem_BVALID),
    .BREADY(m_axi_gmem_BREADY),
    .BRESP(m_axi_gmem_BRESP),
    .BID(m_axi_gmem_BID),
    .BUSER(m_axi_gmem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(load_input19_U0_m_axi_input_r_ARVALID),
    .I_ARREADY(gmem_ARREADY),
    .I_ARADDR(load_input19_U0_m_axi_input_r_ARADDR),
    .I_ARID(load_input19_U0_m_axi_input_r_ARID),
    .I_ARLEN(load_input19_U0_m_axi_input_r_ARLEN),
    .I_ARSIZE(load_input19_U0_m_axi_input_r_ARSIZE),
    .I_ARLOCK(load_input19_U0_m_axi_input_r_ARLOCK),
    .I_ARCACHE(load_input19_U0_m_axi_input_r_ARCACHE),
    .I_ARQOS(load_input19_U0_m_axi_input_r_ARQOS),
    .I_ARPROT(load_input19_U0_m_axi_input_r_ARPROT),
    .I_ARUSER(load_input19_U0_m_axi_input_r_ARUSER),
    .I_ARBURST(load_input19_U0_m_axi_input_r_ARBURST),
    .I_ARREGION(load_input19_U0_m_axi_input_r_ARREGION),
    .I_RVALID(gmem_RVALID),
    .I_RREADY(load_input19_U0_m_axi_input_r_RREADY),
    .I_RDATA(gmem_RDATA),
    .I_RID(gmem_RID),
    .I_RUSER(gmem_RUSER),
    .I_RRESP(gmem_RRESP),
    .I_RLAST(gmem_RLAST),
    .I_AWVALID(store_output_U0_m_axi_output_r_AWVALID),
    .I_AWREADY(gmem_AWREADY),
    .I_AWADDR(store_output_U0_m_axi_output_r_AWADDR),
    .I_AWID(store_output_U0_m_axi_output_r_AWID),
    .I_AWLEN(store_output_U0_m_axi_output_r_AWLEN),
    .I_AWSIZE(store_output_U0_m_axi_output_r_AWSIZE),
    .I_AWLOCK(store_output_U0_m_axi_output_r_AWLOCK),
    .I_AWCACHE(store_output_U0_m_axi_output_r_AWCACHE),
    .I_AWQOS(store_output_U0_m_axi_output_r_AWQOS),
    .I_AWPROT(store_output_U0_m_axi_output_r_AWPROT),
    .I_AWUSER(store_output_U0_m_axi_output_r_AWUSER),
    .I_AWBURST(store_output_U0_m_axi_output_r_AWBURST),
    .I_AWREGION(store_output_U0_m_axi_output_r_AWREGION),
    .I_WVALID(store_output_U0_m_axi_output_r_WVALID),
    .I_WREADY(gmem_WREADY),
    .I_WDATA(store_output_U0_m_axi_output_r_WDATA),
    .I_WID(store_output_U0_m_axi_output_r_WID),
    .I_WUSER(store_output_U0_m_axi_output_r_WUSER),
    .I_WLAST(store_output_U0_m_axi_output_r_WLAST),
    .I_WSTRB(store_output_U0_m_axi_output_r_WSTRB),
    .I_BVALID(gmem_BVALID),
    .I_BREADY(store_output_U0_m_axi_output_r_BREADY),
    .I_BRESP(gmem_BRESP),
    .I_BID(gmem_BID),
    .I_BUSER(gmem_BUSER)
);

LeNet_input_buffeZio #(
    .DataWidth( 32 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
input_buffer_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .i_address0(load_input19_U0_input_buffer_0_address0),
    .i_ce0(load_input19_U0_input_buffer_0_ce0),
    .i_we0(load_input19_U0_input_buffer_0_we0),
    .i_d0(load_input19_U0_input_buffer_0_d0),
    .i_q0(input_buffer_0_i_q0),
    .t_address0(convolution1_U0_input_0_address0),
    .t_ce0(convolution1_U0_input_0_ce0),
    .t_we0(1'b0),
    .t_d0(32'd0),
    .t_q0(input_buffer_0_t_q0),
    .i_ce(1'b1),
    .t_ce(1'b1),
    .i_full_n(input_buffer_0_i_full_n),
    .i_write(load_input19_U0_ap_done),
    .t_empty_n(input_buffer_0_t_empty_n),
    .t_read(convolution1_U0_ap_ready)
);

LeNet_output_conv0iy #(
    .DataWidth( 32 ),
    .AddressRange( 784 ),
    .AddressWidth( 10 ))
output_conv1_buffer_s_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .i_address0(convolution1_U0_output_0_address0),
    .i_ce0(convolution1_U0_output_0_ce0),
    .i_q0(output_conv1_buffer_s_i_q0),
    .i_address1(convolution1_U0_output_0_address1),
    .i_ce1(convolution1_U0_output_0_ce1),
    .i_we1(convolution1_U0_output_0_we1),
    .i_d1(convolution1_U0_output_0_d1),
    .t_address0(max_pooling2_U0_input_0_address0),
    .t_ce0(max_pooling2_U0_input_0_ce0),
    .t_q0(output_conv1_buffer_s_t_q0),
    .t_address1(10'd0),
    .t_ce1(1'b0),
    .t_we1(1'b0),
    .t_d1(32'd0),
    .i_ce(1'b1),
    .t_ce(1'b1),
    .i_full_n(output_conv1_buffer_s_i_full_n),
    .i_write(ap_channel_done_output_conv1_buffer_s),
    .t_empty_n(output_conv1_buffer_s_t_empty_n),
    .t_read(max_pooling2_U0_ap_ready)
);

LeNet_output_conv0iy #(
    .DataWidth( 32 ),
    .AddressRange( 784 ),
    .AddressWidth( 10 ))
output_conv1_buffer_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .i_address0(convolution1_U0_output_1_address0),
    .i_ce0(convolution1_U0_output_1_ce0),
    .i_q0(output_conv1_buffer_1_i_q0),
    .i_address1(convolution1_U0_output_1_address1),
    .i_ce1(convolution1_U0_output_1_ce1),
    .i_we1(convolution1_U0_output_1_we1),
    .i_d1(convolution1_U0_output_1_d1),
    .t_address0(max_pooling2_U0_input_1_address0),
    .t_ce0(max_pooling2_U0_input_1_ce0),
    .t_q0(output_conv1_buffer_1_t_q0),
    .t_address1(10'd0),
    .t_ce1(1'b0),
    .t_we1(1'b0),
    .t_d1(32'd0),
    .i_ce(1'b1),
    .t_ce(1'b1),
    .i_full_n(output_conv1_buffer_1_i_full_n),
    .i_write(ap_channel_done_output_conv1_buffer_1),
    .t_empty_n(output_conv1_buffer_1_t_empty_n),
    .t_read(max_pooling2_U0_ap_ready)
);

LeNet_output_conv0iy #(
    .DataWidth( 32 ),
    .AddressRange( 784 ),
    .AddressWidth( 10 ))
output_conv1_buffer_2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .i_address0(convolution1_U0_output_2_address0),
    .i_ce0(convolution1_U0_output_2_ce0),
    .i_q0(output_conv1_buffer_2_i_q0),
    .i_address1(convolution1_U0_output_2_address1),
    .i_ce1(convolution1_U0_output_2_ce1),
    .i_we1(convolution1_U0_output_2_we1),
    .i_d1(convolution1_U0_output_2_d1),
    .t_address0(max_pooling2_U0_input_2_address0),
    .t_ce0(max_pooling2_U0_input_2_ce0),
    .t_q0(output_conv1_buffer_2_t_q0),
    .t_address1(10'd0),
    .t_ce1(1'b0),
    .t_we1(1'b0),
    .t_d1(32'd0),
    .i_ce(1'b1),
    .t_ce(1'b1),
    .i_full_n(output_conv1_buffer_2_i_full_n),
    .i_write(ap_channel_done_output_conv1_buffer_2),
    .t_empty_n(output_conv1_buffer_2_t_empty_n),
    .t_read(max_pooling2_U0_ap_ready)
);

LeNet_output_conv0iy #(
    .DataWidth( 32 ),
    .AddressRange( 784 ),
    .AddressWidth( 10 ))
output_conv1_buffer_3_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .i_address0(convolution1_U0_output_3_address0),
    .i_ce0(convolution1_U0_output_3_ce0),
    .i_q0(output_conv1_buffer_3_i_q0),
    .i_address1(convolution1_U0_output_3_address1),
    .i_ce1(convolution1_U0_output_3_ce1),
    .i_we1(convolution1_U0_output_3_we1),
    .i_d1(convolution1_U0_output_3_d1),
    .t_address0(max_pooling2_U0_input_3_address0),
    .t_ce0(max_pooling2_U0_input_3_ce0),
    .t_q0(output_conv1_buffer_3_t_q0),
    .t_address1(10'd0),
    .t_ce1(1'b0),
    .t_we1(1'b0),
    .t_d1(32'd0),
    .i_ce(1'b1),
    .t_ce(1'b1),
    .i_full_n(output_conv1_buffer_3_i_full_n),
    .i_write(ap_channel_done_output_conv1_buffer_3),
    .t_empty_n(output_conv1_buffer_3_t_empty_n),
    .t_read(max_pooling2_U0_ap_ready)
);

LeNet_output_conv0iy #(
    .DataWidth( 32 ),
    .AddressRange( 784 ),
    .AddressWidth( 10 ))
output_conv1_buffer_4_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .i_address0(convolution1_U0_output_4_address0),
    .i_ce0(convolution1_U0_output_4_ce0),
    .i_q0(output_conv1_buffer_4_i_q0),
    .i_address1(convolution1_U0_output_4_address1),
    .i_ce1(convolution1_U0_output_4_ce1),
    .i_we1(convolution1_U0_output_4_we1),
    .i_d1(convolution1_U0_output_4_d1),
    .t_address0(max_pooling2_U0_input_4_address0),
    .t_ce0(max_pooling2_U0_input_4_ce0),
    .t_q0(output_conv1_buffer_4_t_q0),
    .t_address1(10'd0),
    .t_ce1(1'b0),
    .t_we1(1'b0),
    .t_d1(32'd0),
    .i_ce(1'b1),
    .t_ce(1'b1),
    .i_full_n(output_conv1_buffer_4_i_full_n),
    .i_write(ap_channel_done_output_conv1_buffer_4),
    .t_empty_n(output_conv1_buffer_4_t_empty_n),
    .t_read(max_pooling2_U0_ap_ready)
);

LeNet_output_conv0iy #(
    .DataWidth( 32 ),
    .AddressRange( 784 ),
    .AddressWidth( 10 ))
output_conv1_buffer_5_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .i_address0(convolution1_U0_output_5_address0),
    .i_ce0(convolution1_U0_output_5_ce0),
    .i_q0(output_conv1_buffer_5_i_q0),
    .i_address1(convolution1_U0_output_5_address1),
    .i_ce1(convolution1_U0_output_5_ce1),
    .i_we1(convolution1_U0_output_5_we1),
    .i_d1(convolution1_U0_output_5_d1),
    .t_address0(max_pooling2_U0_input_5_address0),
    .t_ce0(max_pooling2_U0_input_5_ce0),
    .t_q0(output_conv1_buffer_5_t_q0),
    .t_address1(10'd0),
    .t_ce1(1'b0),
    .t_we1(1'b0),
    .t_d1(32'd0),
    .i_ce(1'b1),
    .t_ce(1'b1),
    .i_full_n(output_conv1_buffer_5_i_full_n),
    .i_write(ap_channel_done_output_conv1_buffer_5),
    .t_empty_n(output_conv1_buffer_5_t_empty_n),
    .t_read(max_pooling2_U0_ap_ready)
);

LeNet_output_maxp6jw #(
    .DataWidth( 32 ),
    .AddressRange( 196 ),
    .AddressWidth( 8 ))
output_maxp2_buffer_s_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .i_address0(max_pooling2_U0_output_0_address0),
    .i_ce0(max_pooling2_U0_output_0_ce0),
    .i_we0(max_pooling2_U0_output_0_we0),
    .i_d0(max_pooling2_U0_output_0_d0),
    .i_q0(output_maxp2_buffer_s_i_q0),
    .t_address0(convolution3_U0_input_0_address0),
    .t_ce0(convolution3_U0_input_0_ce0),
    .t_we0(1'b0),
    .t_d0(32'd0),
    .t_q0(output_maxp2_buffer_s_t_q0),
    .i_ce(1'b1),
    .t_ce(1'b1),
    .i_full_n(output_maxp2_buffer_s_i_full_n),
    .i_write(ap_channel_done_output_maxp2_buffer_s),
    .t_empty_n(output_maxp2_buffer_s_t_empty_n),
    .t_read(convolution3_U0_ap_ready)
);

LeNet_output_maxp6jw #(
    .DataWidth( 32 ),
    .AddressRange( 196 ),
    .AddressWidth( 8 ))
output_maxp2_buffer_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .i_address0(max_pooling2_U0_output_1_address0),
    .i_ce0(max_pooling2_U0_output_1_ce0),
    .i_we0(max_pooling2_U0_output_1_we0),
    .i_d0(max_pooling2_U0_output_1_d0),
    .i_q0(output_maxp2_buffer_1_i_q0),
    .t_address0(convolution3_U0_input_1_address0),
    .t_ce0(convolution3_U0_input_1_ce0),
    .t_we0(1'b0),
    .t_d0(32'd0),
    .t_q0(output_maxp2_buffer_1_t_q0),
    .i_ce(1'b1),
    .t_ce(1'b1),
    .i_full_n(output_maxp2_buffer_1_i_full_n),
    .i_write(ap_channel_done_output_maxp2_buffer_1),
    .t_empty_n(output_maxp2_buffer_1_t_empty_n),
    .t_read(convolution3_U0_ap_ready)
);

LeNet_output_maxp6jw #(
    .DataWidth( 32 ),
    .AddressRange( 196 ),
    .AddressWidth( 8 ))
output_maxp2_buffer_2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .i_address0(max_pooling2_U0_output_2_address0),
    .i_ce0(max_pooling2_U0_output_2_ce0),
    .i_we0(max_pooling2_U0_output_2_we0),
    .i_d0(max_pooling2_U0_output_2_d0),
    .i_q0(output_maxp2_buffer_2_i_q0),
    .t_address0(convolution3_U0_input_2_address0),
    .t_ce0(convolution3_U0_input_2_ce0),
    .t_we0(1'b0),
    .t_d0(32'd0),
    .t_q0(output_maxp2_buffer_2_t_q0),
    .i_ce(1'b1),
    .t_ce(1'b1),
    .i_full_n(output_maxp2_buffer_2_i_full_n),
    .i_write(ap_channel_done_output_maxp2_buffer_2),
    .t_empty_n(output_maxp2_buffer_2_t_empty_n),
    .t_read(convolution3_U0_ap_ready)
);

LeNet_output_maxp6jw #(
    .DataWidth( 32 ),
    .AddressRange( 196 ),
    .AddressWidth( 8 ))
output_maxp2_buffer_3_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .i_address0(max_pooling2_U0_output_3_address0),
    .i_ce0(max_pooling2_U0_output_3_ce0),
    .i_we0(max_pooling2_U0_output_3_we0),
    .i_d0(max_pooling2_U0_output_3_d0),
    .i_q0(output_maxp2_buffer_3_i_q0),
    .t_address0(convolution3_U0_input_3_address0),
    .t_ce0(convolution3_U0_input_3_ce0),
    .t_we0(1'b0),
    .t_d0(32'd0),
    .t_q0(output_maxp2_buffer_3_t_q0),
    .i_ce(1'b1),
    .t_ce(1'b1),
    .i_full_n(output_maxp2_buffer_3_i_full_n),
    .i_write(ap_channel_done_output_maxp2_buffer_3),
    .t_empty_n(output_maxp2_buffer_3_t_empty_n),
    .t_read(convolution3_U0_ap_ready)
);

LeNet_output_maxp6jw #(
    .DataWidth( 32 ),
    .AddressRange( 196 ),
    .AddressWidth( 8 ))
output_maxp2_buffer_4_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .i_address0(max_pooling2_U0_output_4_address0),
    .i_ce0(max_pooling2_U0_output_4_ce0),
    .i_we0(max_pooling2_U0_output_4_we0),
    .i_d0(max_pooling2_U0_output_4_d0),
    .i_q0(output_maxp2_buffer_4_i_q0),
    .t_address0(convolution3_U0_input_4_address0),
    .t_ce0(convolution3_U0_input_4_ce0),
    .t_we0(1'b0),
    .t_d0(32'd0),
    .t_q0(output_maxp2_buffer_4_t_q0),
    .i_ce(1'b1),
    .t_ce(1'b1),
    .i_full_n(output_maxp2_buffer_4_i_full_n),
    .i_write(ap_channel_done_output_maxp2_buffer_4),
    .t_empty_n(output_maxp2_buffer_4_t_empty_n),
    .t_read(convolution3_U0_ap_ready)
);

LeNet_output_maxp6jw #(
    .DataWidth( 32 ),
    .AddressRange( 196 ),
    .AddressWidth( 8 ))
output_maxp2_buffer_5_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .i_address0(max_pooling2_U0_output_5_address0),
    .i_ce0(max_pooling2_U0_output_5_ce0),
    .i_we0(max_pooling2_U0_output_5_we0),
    .i_d0(max_pooling2_U0_output_5_d0),
    .i_q0(output_maxp2_buffer_5_i_q0),
    .t_address0(convolution3_U0_input_5_address0),
    .t_ce0(convolution3_U0_input_5_ce0),
    .t_we0(1'b0),
    .t_d0(32'd0),
    .t_q0(output_maxp2_buffer_5_t_q0),
    .i_ce(1'b1),
    .t_ce(1'b1),
    .i_full_n(output_maxp2_buffer_5_i_full_n),
    .i_write(ap_channel_done_output_maxp2_buffer_5),
    .t_empty_n(output_maxp2_buffer_5_t_empty_n),
    .t_read(convolution3_U0_ap_ready)
);

LeNet_output_convbck #(
    .DataWidth( 32 ),
    .AddressRange( 800 ),
    .AddressWidth( 10 ))
output_conv3_buffer_s_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .i_address0(convolution3_U0_output_0_address0),
    .i_ce0(convolution3_U0_output_0_ce0),
    .i_q0(output_conv3_buffer_s_i_q0),
    .i_address1(convolution3_U0_output_0_address1),
    .i_ce1(convolution3_U0_output_0_ce1),
    .i_we1(convolution3_U0_output_0_we1),
    .i_d1(convolution3_U0_output_0_d1),
    .t_address0(max_pooling4_U0_input_0_address0),
    .t_ce0(max_pooling4_U0_input_0_ce0),
    .t_q0(output_conv3_buffer_s_t_q0),
    .t_address1(10'd0),
    .t_ce1(1'b0),
    .t_we1(1'b0),
    .t_d1(32'd0),
    .i_ce(1'b1),
    .t_ce(1'b1),
    .i_full_n(output_conv3_buffer_s_i_full_n),
    .i_write(ap_channel_done_output_conv3_buffer_s),
    .t_empty_n(output_conv3_buffer_s_t_empty_n),
    .t_read(max_pooling4_U0_ap_ready)
);

LeNet_output_convbck #(
    .DataWidth( 32 ),
    .AddressRange( 800 ),
    .AddressWidth( 10 ))
output_conv3_buffer_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .i_address0(convolution3_U0_output_1_address0),
    .i_ce0(convolution3_U0_output_1_ce0),
    .i_q0(output_conv3_buffer_1_i_q0),
    .i_address1(convolution3_U0_output_1_address1),
    .i_ce1(convolution3_U0_output_1_ce1),
    .i_we1(convolution3_U0_output_1_we1),
    .i_d1(convolution3_U0_output_1_d1),
    .t_address0(max_pooling4_U0_input_1_address0),
    .t_ce0(max_pooling4_U0_input_1_ce0),
    .t_q0(output_conv3_buffer_1_t_q0),
    .t_address1(10'd0),
    .t_ce1(1'b0),
    .t_we1(1'b0),
    .t_d1(32'd0),
    .i_ce(1'b1),
    .t_ce(1'b1),
    .i_full_n(output_conv3_buffer_1_i_full_n),
    .i_write(ap_channel_done_output_conv3_buffer_1),
    .t_empty_n(output_conv3_buffer_1_t_empty_n),
    .t_read(max_pooling4_U0_ap_ready)
);

LeNet_output_maxpbek #(
    .DataWidth( 32 ),
    .AddressRange( 200 ),
    .AddressWidth( 8 ))
output_maxp4_buffer_s_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .i_address0(max_pooling4_U0_output_0_address0),
    .i_ce0(max_pooling4_U0_output_0_ce0),
    .i_q0(output_maxp4_buffer_s_i_q0),
    .i_address1(max_pooling4_U0_output_0_address1),
    .i_ce1(max_pooling4_U0_output_0_ce1),
    .i_we1(max_pooling4_U0_output_0_we1),
    .i_d1(max_pooling4_U0_output_0_d1),
    .i_q1(output_maxp4_buffer_s_i_q1),
    .t_address0(convolution5_U0_input_0_address0),
    .t_ce0(convolution5_U0_input_0_ce0),
    .t_q0(output_maxp4_buffer_s_t_q0),
    .t_address1(convolution5_U0_input_0_address1),
    .t_ce1(convolution5_U0_input_0_ce1),
    .t_we1(1'b0),
    .t_d1(32'd0),
    .t_q1(output_maxp4_buffer_s_t_q1),
    .i_ce(1'b1),
    .t_ce(1'b1),
    .i_full_n(output_maxp4_buffer_s_i_full_n),
    .i_write(ap_channel_done_output_maxp4_buffer_s),
    .t_empty_n(output_maxp4_buffer_s_t_empty_n),
    .t_read(convolution5_U0_ap_ready)
);

LeNet_output_maxpbek #(
    .DataWidth( 32 ),
    .AddressRange( 200 ),
    .AddressWidth( 8 ))
output_maxp4_buffer_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .i_address0(max_pooling4_U0_output_1_address0),
    .i_ce0(max_pooling4_U0_output_1_ce0),
    .i_q0(output_maxp4_buffer_1_i_q0),
    .i_address1(max_pooling4_U0_output_1_address1),
    .i_ce1(max_pooling4_U0_output_1_ce1),
    .i_we1(max_pooling4_U0_output_1_we1),
    .i_d1(max_pooling4_U0_output_1_d1),
    .i_q1(output_maxp4_buffer_1_i_q1),
    .t_address0(convolution5_U0_input_1_address0),
    .t_ce0(convolution5_U0_input_1_ce0),
    .t_q0(output_maxp4_buffer_1_t_q0),
    .t_address1(convolution5_U0_input_1_address1),
    .t_ce1(convolution5_U0_input_1_ce1),
    .t_we1(1'b0),
    .t_d1(32'd0),
    .t_q1(output_maxp4_buffer_1_t_q1),
    .i_ce(1'b1),
    .t_ce(1'b1),
    .i_full_n(output_maxp4_buffer_1_i_full_n),
    .i_write(ap_channel_done_output_maxp4_buffer_1),
    .t_empty_n(output_maxp4_buffer_1_t_empty_n),
    .t_read(convolution5_U0_ap_ready)
);

LeNet_output_convbgk #(
    .DataWidth( 32 ),
    .AddressRange( 20 ),
    .AddressWidth( 5 ))
output_conv5_buffer_s_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .i_address0(convolution5_U0_output_0_0_0_address0),
    .i_ce0(convolution5_U0_output_0_0_0_ce0),
    .i_q0(output_conv5_buffer_s_i_q0),
    .i_address1(convolution5_U0_output_0_0_0_address1),
    .i_ce1(convolution5_U0_output_0_0_0_ce1),
    .i_we1(convolution5_U0_output_0_0_0_we1),
    .i_d1(convolution5_U0_output_0_0_0_d1),
    .t_address0(fc6_U0_input_0_0_0_address0),
    .t_ce0(fc6_U0_input_0_0_0_ce0),
    .t_q0(output_conv5_buffer_s_t_q0),
    .t_address1(5'd0),
    .t_ce1(1'b0),
    .t_we1(1'b0),
    .t_d1(32'd0),
    .i_ce(1'b1),
    .t_ce(1'b1),
    .i_full_n(output_conv5_buffer_s_i_full_n),
    .i_write(ap_channel_done_output_conv5_buffer_s),
    .t_empty_n(output_conv5_buffer_s_t_empty_n),
    .t_read(fc6_U0_ap_ready)
);

LeNet_output_convbgk #(
    .DataWidth( 32 ),
    .AddressRange( 20 ),
    .AddressWidth( 5 ))
output_conv5_buffer_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .i_address0(convolution5_U0_output_1_0_0_address0),
    .i_ce0(convolution5_U0_output_1_0_0_ce0),
    .i_q0(output_conv5_buffer_1_i_q0),
    .i_address1(convolution5_U0_output_1_0_0_address1),
    .i_ce1(convolution5_U0_output_1_0_0_ce1),
    .i_we1(convolution5_U0_output_1_0_0_we1),
    .i_d1(convolution5_U0_output_1_0_0_d1),
    .t_address0(fc6_U0_input_1_0_0_address0),
    .t_ce0(fc6_U0_input_1_0_0_ce0),
    .t_q0(output_conv5_buffer_1_t_q0),
    .t_address1(5'd0),
    .t_ce1(1'b0),
    .t_we1(1'b0),
    .t_d1(32'd0),
    .i_ce(1'b1),
    .t_ce(1'b1),
    .i_full_n(output_conv5_buffer_1_i_full_n),
    .i_write(ap_channel_done_output_conv5_buffer_1),
    .t_empty_n(output_conv5_buffer_1_t_empty_n),
    .t_read(fc6_U0_ap_ready)
);

LeNet_output_convbgk #(
    .DataWidth( 32 ),
    .AddressRange( 20 ),
    .AddressWidth( 5 ))
output_conv5_buffer_2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .i_address0(convolution5_U0_output_2_0_0_address0),
    .i_ce0(convolution5_U0_output_2_0_0_ce0),
    .i_q0(output_conv5_buffer_2_i_q0),
    .i_address1(convolution5_U0_output_2_0_0_address1),
    .i_ce1(convolution5_U0_output_2_0_0_ce1),
    .i_we1(convolution5_U0_output_2_0_0_we1),
    .i_d1(convolution5_U0_output_2_0_0_d1),
    .t_address0(fc6_U0_input_2_0_0_address0),
    .t_ce0(fc6_U0_input_2_0_0_ce0),
    .t_q0(output_conv5_buffer_2_t_q0),
    .t_address1(5'd0),
    .t_ce1(1'b0),
    .t_we1(1'b0),
    .t_d1(32'd0),
    .i_ce(1'b1),
    .t_ce(1'b1),
    .i_full_n(output_conv5_buffer_2_i_full_n),
    .i_write(ap_channel_done_output_conv5_buffer_2),
    .t_empty_n(output_conv5_buffer_2_t_empty_n),
    .t_read(fc6_U0_ap_ready)
);

LeNet_output_convbgk #(
    .DataWidth( 32 ),
    .AddressRange( 20 ),
    .AddressWidth( 5 ))
output_conv5_buffer_3_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .i_address0(convolution5_U0_output_3_0_0_address0),
    .i_ce0(convolution5_U0_output_3_0_0_ce0),
    .i_q0(output_conv5_buffer_3_i_q0),
    .i_address1(convolution5_U0_output_3_0_0_address1),
    .i_ce1(convolution5_U0_output_3_0_0_ce1),
    .i_we1(convolution5_U0_output_3_0_0_we1),
    .i_d1(convolution5_U0_output_3_0_0_d1),
    .t_address0(fc6_U0_input_3_0_0_address0),
    .t_ce0(fc6_U0_input_3_0_0_ce0),
    .t_q0(output_conv5_buffer_3_t_q0),
    .t_address1(5'd0),
    .t_ce1(1'b0),
    .t_we1(1'b0),
    .t_d1(32'd0),
    .i_ce(1'b1),
    .t_ce(1'b1),
    .i_full_n(output_conv5_buffer_3_i_full_n),
    .i_write(ap_channel_done_output_conv5_buffer_3),
    .t_empty_n(output_conv5_buffer_3_t_empty_n),
    .t_read(fc6_U0_ap_ready)
);

LeNet_output_convbgk #(
    .DataWidth( 32 ),
    .AddressRange( 20 ),
    .AddressWidth( 5 ))
output_conv5_buffer_4_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .i_address0(convolution5_U0_output_4_0_0_address0),
    .i_ce0(convolution5_U0_output_4_0_0_ce0),
    .i_q0(output_conv5_buffer_4_i_q0),
    .i_address1(convolution5_U0_output_4_0_0_address1),
    .i_ce1(convolution5_U0_output_4_0_0_ce1),
    .i_we1(convolution5_U0_output_4_0_0_we1),
    .i_d1(convolution5_U0_output_4_0_0_d1),
    .t_address0(fc6_U0_input_4_0_0_address0),
    .t_ce0(fc6_U0_input_4_0_0_ce0),
    .t_q0(output_conv5_buffer_4_t_q0),
    .t_address1(5'd0),
    .t_ce1(1'b0),
    .t_we1(1'b0),
    .t_d1(32'd0),
    .i_ce(1'b1),
    .t_ce(1'b1),
    .i_full_n(output_conv5_buffer_4_i_full_n),
    .i_write(ap_channel_done_output_conv5_buffer_4),
    .t_empty_n(output_conv5_buffer_4_t_empty_n),
    .t_read(fc6_U0_ap_ready)
);

LeNet_output_convbgk #(
    .DataWidth( 32 ),
    .AddressRange( 20 ),
    .AddressWidth( 5 ))
output_conv5_buffer_5_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .i_address0(convolution5_U0_output_5_0_0_address0),
    .i_ce0(convolution5_U0_output_5_0_0_ce0),
    .i_q0(output_conv5_buffer_5_i_q0),
    .i_address1(convolution5_U0_output_5_0_0_address1),
    .i_ce1(convolution5_U0_output_5_0_0_ce1),
    .i_we1(convolution5_U0_output_5_0_0_we1),
    .i_d1(convolution5_U0_output_5_0_0_d1),
    .t_address0(fc6_U0_input_5_0_0_address0),
    .t_ce0(fc6_U0_input_5_0_0_ce0),
    .t_q0(output_conv5_buffer_5_t_q0),
    .t_address1(5'd0),
    .t_ce1(1'b0),
    .t_we1(1'b0),
    .t_d1(32'd0),
    .i_ce(1'b1),
    .t_ce(1'b1),
    .i_full_n(output_conv5_buffer_5_i_full_n),
    .i_write(ap_channel_done_output_conv5_buffer_5),
    .t_empty_n(output_conv5_buffer_5_t_empty_n),
    .t_read(fc6_U0_ap_ready)
);

LeNet_output_fc6_bml #(
    .DataWidth( 32 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
output_fc6_buffer_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .i_address0(fc6_U0_output_0_address0),
    .i_ce0(fc6_U0_output_0_ce0),
    .i_we0(fc6_U0_output_0_we0),
    .i_d0(fc6_U0_output_0_d0),
    .i_q0(output_fc6_buffer_0_i_q0),
    .t_address0(store_output_U0_output_fc6_buffer_0_address0),
    .t_ce0(store_output_U0_output_fc6_buffer_0_ce0),
    .t_we0(1'b0),
    .t_d0(32'd0),
    .t_q0(output_fc6_buffer_0_t_q0),
    .i_ce(1'b1),
    .t_ce(1'b1),
    .i_full_n(output_fc6_buffer_0_i_full_n),
    .i_write(ap_channel_done_output_fc6_buffer_0),
    .t_empty_n(output_fc6_buffer_0_t_empty_n),
    .t_read(store_output_U0_ap_ready)
);

LeNet_output_fc6_bml #(
    .DataWidth( 32 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
output_fc6_buffer_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .i_address0(fc6_U0_output_1_address0),
    .i_ce0(fc6_U0_output_1_ce0),
    .i_we0(fc6_U0_output_1_we0),
    .i_d0(fc6_U0_output_1_d0),
    .i_q0(output_fc6_buffer_1_i_q0),
    .t_address0(store_output_U0_output_fc6_buffer_1_address0),
    .t_ce0(store_output_U0_output_fc6_buffer_1_ce0),
    .t_we0(1'b0),
    .t_d0(32'd0),
    .t_q0(output_fc6_buffer_1_t_q0),
    .i_ce(1'b1),
    .t_ce(1'b1),
    .i_full_n(output_fc6_buffer_1_i_full_n),
    .i_write(ap_channel_done_output_fc6_buffer_1),
    .t_empty_n(output_fc6_buffer_1_t_empty_n),
    .t_read(store_output_U0_ap_ready)
);

load_input19 load_input19_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(load_input19_U0_ap_start),
    .ap_done(load_input19_U0_ap_done),
    .ap_continue(load_input19_U0_ap_continue),
    .ap_idle(load_input19_U0_ap_idle),
    .ap_ready(load_input19_U0_ap_ready),
    .m_axi_input_r_AWVALID(load_input19_U0_m_axi_input_r_AWVALID),
    .m_axi_input_r_AWREADY(1'b0),
    .m_axi_input_r_AWADDR(load_input19_U0_m_axi_input_r_AWADDR),
    .m_axi_input_r_AWID(load_input19_U0_m_axi_input_r_AWID),
    .m_axi_input_r_AWLEN(load_input19_U0_m_axi_input_r_AWLEN),
    .m_axi_input_r_AWSIZE(load_input19_U0_m_axi_input_r_AWSIZE),
    .m_axi_input_r_AWBURST(load_input19_U0_m_axi_input_r_AWBURST),
    .m_axi_input_r_AWLOCK(load_input19_U0_m_axi_input_r_AWLOCK),
    .m_axi_input_r_AWCACHE(load_input19_U0_m_axi_input_r_AWCACHE),
    .m_axi_input_r_AWPROT(load_input19_U0_m_axi_input_r_AWPROT),
    .m_axi_input_r_AWQOS(load_input19_U0_m_axi_input_r_AWQOS),
    .m_axi_input_r_AWREGION(load_input19_U0_m_axi_input_r_AWREGION),
    .m_axi_input_r_AWUSER(load_input19_U0_m_axi_input_r_AWUSER),
    .m_axi_input_r_WVALID(load_input19_U0_m_axi_input_r_WVALID),
    .m_axi_input_r_WREADY(1'b0),
    .m_axi_input_r_WDATA(load_input19_U0_m_axi_input_r_WDATA),
    .m_axi_input_r_WSTRB(load_input19_U0_m_axi_input_r_WSTRB),
    .m_axi_input_r_WLAST(load_input19_U0_m_axi_input_r_WLAST),
    .m_axi_input_r_WID(load_input19_U0_m_axi_input_r_WID),
    .m_axi_input_r_WUSER(load_input19_U0_m_axi_input_r_WUSER),
    .m_axi_input_r_ARVALID(load_input19_U0_m_axi_input_r_ARVALID),
    .m_axi_input_r_ARREADY(gmem_ARREADY),
    .m_axi_input_r_ARADDR(load_input19_U0_m_axi_input_r_ARADDR),
    .m_axi_input_r_ARID(load_input19_U0_m_axi_input_r_ARID),
    .m_axi_input_r_ARLEN(load_input19_U0_m_axi_input_r_ARLEN),
    .m_axi_input_r_ARSIZE(load_input19_U0_m_axi_input_r_ARSIZE),
    .m_axi_input_r_ARBURST(load_input19_U0_m_axi_input_r_ARBURST),
    .m_axi_input_r_ARLOCK(load_input19_U0_m_axi_input_r_ARLOCK),
    .m_axi_input_r_ARCACHE(load_input19_U0_m_axi_input_r_ARCACHE),
    .m_axi_input_r_ARPROT(load_input19_U0_m_axi_input_r_ARPROT),
    .m_axi_input_r_ARQOS(load_input19_U0_m_axi_input_r_ARQOS),
    .m_axi_input_r_ARREGION(load_input19_U0_m_axi_input_r_ARREGION),
    .m_axi_input_r_ARUSER(load_input19_U0_m_axi_input_r_ARUSER),
    .m_axi_input_r_RVALID(gmem_RVALID),
    .m_axi_input_r_RREADY(load_input19_U0_m_axi_input_r_RREADY),
    .m_axi_input_r_RDATA(gmem_RDATA),
    .m_axi_input_r_RLAST(gmem_RLAST),
    .m_axi_input_r_RID(gmem_RID),
    .m_axi_input_r_RUSER(gmem_RUSER),
    .m_axi_input_r_RRESP(gmem_RRESP),
    .m_axi_input_r_BVALID(1'b0),
    .m_axi_input_r_BREADY(load_input19_U0_m_axi_input_r_BREADY),
    .m_axi_input_r_BRESP(2'd0),
    .m_axi_input_r_BID(1'd0),
    .m_axi_input_r_BUSER(1'd0),
    .input_offset(input_r),
    .input_buffer_0_address0(load_input19_U0_input_buffer_0_address0),
    .input_buffer_0_ce0(load_input19_U0_input_buffer_0_ce0),
    .input_buffer_0_we0(load_input19_U0_input_buffer_0_we0),
    .input_buffer_0_d0(load_input19_U0_input_buffer_0_d0),
    .output_r(output_r),
    .output_out_din(load_input19_U0_output_out_din),
    .output_out_full_n(output_c_full_n),
    .output_out_write(load_input19_U0_output_out_write)
);

convolution1 convolution1_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(convolution1_U0_ap_start),
    .ap_done(convolution1_U0_ap_done),
    .ap_continue(convolution1_U0_ap_continue),
    .ap_idle(convolution1_U0_ap_idle),
    .ap_ready(convolution1_U0_ap_ready),
    .input_0_address0(convolution1_U0_input_0_address0),
    .input_0_ce0(convolution1_U0_input_0_ce0),
    .input_0_q0(input_buffer_0_t_q0),
    .output_0_address0(convolution1_U0_output_0_address0),
    .output_0_ce0(convolution1_U0_output_0_ce0),
    .output_0_q0(output_conv1_buffer_s_i_q0),
    .output_0_address1(convolution1_U0_output_0_address1),
    .output_0_ce1(convolution1_U0_output_0_ce1),
    .output_0_we1(convolution1_U0_output_0_we1),
    .output_0_d1(convolution1_U0_output_0_d1),
    .output_1_address0(convolution1_U0_output_1_address0),
    .output_1_ce0(convolution1_U0_output_1_ce0),
    .output_1_q0(output_conv1_buffer_1_i_q0),
    .output_1_address1(convolution1_U0_output_1_address1),
    .output_1_ce1(convolution1_U0_output_1_ce1),
    .output_1_we1(convolution1_U0_output_1_we1),
    .output_1_d1(convolution1_U0_output_1_d1),
    .output_2_address0(convolution1_U0_output_2_address0),
    .output_2_ce0(convolution1_U0_output_2_ce0),
    .output_2_q0(output_conv1_buffer_2_i_q0),
    .output_2_address1(convolution1_U0_output_2_address1),
    .output_2_ce1(convolution1_U0_output_2_ce1),
    .output_2_we1(convolution1_U0_output_2_we1),
    .output_2_d1(convolution1_U0_output_2_d1),
    .output_3_address0(convolution1_U0_output_3_address0),
    .output_3_ce0(convolution1_U0_output_3_ce0),
    .output_3_q0(output_conv1_buffer_3_i_q0),
    .output_3_address1(convolution1_U0_output_3_address1),
    .output_3_ce1(convolution1_U0_output_3_ce1),
    .output_3_we1(convolution1_U0_output_3_we1),
    .output_3_d1(convolution1_U0_output_3_d1),
    .output_4_address0(convolution1_U0_output_4_address0),
    .output_4_ce0(convolution1_U0_output_4_ce0),
    .output_4_q0(output_conv1_buffer_4_i_q0),
    .output_4_address1(convolution1_U0_output_4_address1),
    .output_4_ce1(convolution1_U0_output_4_ce1),
    .output_4_we1(convolution1_U0_output_4_we1),
    .output_4_d1(convolution1_U0_output_4_d1),
    .output_5_address0(convolution1_U0_output_5_address0),
    .output_5_ce0(convolution1_U0_output_5_ce0),
    .output_5_q0(output_conv1_buffer_5_i_q0),
    .output_5_address1(convolution1_U0_output_5_address1),
    .output_5_ce1(convolution1_U0_output_5_ce1),
    .output_5_we1(convolution1_U0_output_5_we1),
    .output_5_d1(convolution1_U0_output_5_d1)
);

max_pooling2 max_pooling2_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(max_pooling2_U0_ap_start),
    .ap_done(max_pooling2_U0_ap_done),
    .ap_continue(max_pooling2_U0_ap_continue),
    .ap_idle(max_pooling2_U0_ap_idle),
    .ap_ready(max_pooling2_U0_ap_ready),
    .input_0_address0(max_pooling2_U0_input_0_address0),
    .input_0_ce0(max_pooling2_U0_input_0_ce0),
    .input_0_q0(output_conv1_buffer_s_t_q0),
    .input_1_address0(max_pooling2_U0_input_1_address0),
    .input_1_ce0(max_pooling2_U0_input_1_ce0),
    .input_1_q0(output_conv1_buffer_1_t_q0),
    .input_2_address0(max_pooling2_U0_input_2_address0),
    .input_2_ce0(max_pooling2_U0_input_2_ce0),
    .input_2_q0(output_conv1_buffer_2_t_q0),
    .input_3_address0(max_pooling2_U0_input_3_address0),
    .input_3_ce0(max_pooling2_U0_input_3_ce0),
    .input_3_q0(output_conv1_buffer_3_t_q0),
    .input_4_address0(max_pooling2_U0_input_4_address0),
    .input_4_ce0(max_pooling2_U0_input_4_ce0),
    .input_4_q0(output_conv1_buffer_4_t_q0),
    .input_5_address0(max_pooling2_U0_input_5_address0),
    .input_5_ce0(max_pooling2_U0_input_5_ce0),
    .input_5_q0(output_conv1_buffer_5_t_q0),
    .output_0_address0(max_pooling2_U0_output_0_address0),
    .output_0_ce0(max_pooling2_U0_output_0_ce0),
    .output_0_we0(max_pooling2_U0_output_0_we0),
    .output_0_d0(max_pooling2_U0_output_0_d0),
    .output_0_q0(output_maxp2_buffer_s_i_q0),
    .output_1_address0(max_pooling2_U0_output_1_address0),
    .output_1_ce0(max_pooling2_U0_output_1_ce0),
    .output_1_we0(max_pooling2_U0_output_1_we0),
    .output_1_d0(max_pooling2_U0_output_1_d0),
    .output_1_q0(output_maxp2_buffer_1_i_q0),
    .output_2_address0(max_pooling2_U0_output_2_address0),
    .output_2_ce0(max_pooling2_U0_output_2_ce0),
    .output_2_we0(max_pooling2_U0_output_2_we0),
    .output_2_d0(max_pooling2_U0_output_2_d0),
    .output_2_q0(output_maxp2_buffer_2_i_q0),
    .output_3_address0(max_pooling2_U0_output_3_address0),
    .output_3_ce0(max_pooling2_U0_output_3_ce0),
    .output_3_we0(max_pooling2_U0_output_3_we0),
    .output_3_d0(max_pooling2_U0_output_3_d0),
    .output_3_q0(output_maxp2_buffer_3_i_q0),
    .output_4_address0(max_pooling2_U0_output_4_address0),
    .output_4_ce0(max_pooling2_U0_output_4_ce0),
    .output_4_we0(max_pooling2_U0_output_4_we0),
    .output_4_d0(max_pooling2_U0_output_4_d0),
    .output_4_q0(output_maxp2_buffer_4_i_q0),
    .output_5_address0(max_pooling2_U0_output_5_address0),
    .output_5_ce0(max_pooling2_U0_output_5_ce0),
    .output_5_we0(max_pooling2_U0_output_5_we0),
    .output_5_d0(max_pooling2_U0_output_5_d0),
    .output_5_q0(output_maxp2_buffer_5_i_q0)
);

convolution3 convolution3_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(convolution3_U0_ap_start),
    .ap_done(convolution3_U0_ap_done),
    .ap_continue(convolution3_U0_ap_continue),
    .ap_idle(convolution3_U0_ap_idle),
    .ap_ready(convolution3_U0_ap_ready),
    .input_0_address0(convolution3_U0_input_0_address0),
    .input_0_ce0(convolution3_U0_input_0_ce0),
    .input_0_q0(output_maxp2_buffer_s_t_q0),
    .input_1_address0(convolution3_U0_input_1_address0),
    .input_1_ce0(convolution3_U0_input_1_ce0),
    .input_1_q0(output_maxp2_buffer_1_t_q0),
    .input_2_address0(convolution3_U0_input_2_address0),
    .input_2_ce0(convolution3_U0_input_2_ce0),
    .input_2_q0(output_maxp2_buffer_2_t_q0),
    .input_3_address0(convolution3_U0_input_3_address0),
    .input_3_ce0(convolution3_U0_input_3_ce0),
    .input_3_q0(output_maxp2_buffer_3_t_q0),
    .input_4_address0(convolution3_U0_input_4_address0),
    .input_4_ce0(convolution3_U0_input_4_ce0),
    .input_4_q0(output_maxp2_buffer_4_t_q0),
    .input_5_address0(convolution3_U0_input_5_address0),
    .input_5_ce0(convolution3_U0_input_5_ce0),
    .input_5_q0(output_maxp2_buffer_5_t_q0),
    .output_0_address0(convolution3_U0_output_0_address0),
    .output_0_ce0(convolution3_U0_output_0_ce0),
    .output_0_q0(output_conv3_buffer_s_i_q0),
    .output_0_address1(convolution3_U0_output_0_address1),
    .output_0_ce1(convolution3_U0_output_0_ce1),
    .output_0_we1(convolution3_U0_output_0_we1),
    .output_0_d1(convolution3_U0_output_0_d1),
    .output_1_address0(convolution3_U0_output_1_address0),
    .output_1_ce0(convolution3_U0_output_1_ce0),
    .output_1_q0(output_conv3_buffer_1_i_q0),
    .output_1_address1(convolution3_U0_output_1_address1),
    .output_1_ce1(convolution3_U0_output_1_ce1),
    .output_1_we1(convolution3_U0_output_1_we1),
    .output_1_d1(convolution3_U0_output_1_d1)
);

max_pooling4 max_pooling4_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(max_pooling4_U0_ap_start),
    .ap_done(max_pooling4_U0_ap_done),
    .ap_continue(max_pooling4_U0_ap_continue),
    .ap_idle(max_pooling4_U0_ap_idle),
    .ap_ready(max_pooling4_U0_ap_ready),
    .input_0_address0(max_pooling4_U0_input_0_address0),
    .input_0_ce0(max_pooling4_U0_input_0_ce0),
    .input_0_q0(output_conv3_buffer_s_t_q0),
    .input_1_address0(max_pooling4_U0_input_1_address0),
    .input_1_ce0(max_pooling4_U0_input_1_ce0),
    .input_1_q0(output_conv3_buffer_1_t_q0),
    .output_0_address0(max_pooling4_U0_output_0_address0),
    .output_0_ce0(max_pooling4_U0_output_0_ce0),
    .output_0_q0(output_maxp4_buffer_s_i_q0),
    .output_0_address1(max_pooling4_U0_output_0_address1),
    .output_0_ce1(max_pooling4_U0_output_0_ce1),
    .output_0_we1(max_pooling4_U0_output_0_we1),
    .output_0_d1(max_pooling4_U0_output_0_d1),
    .output_1_address0(max_pooling4_U0_output_1_address0),
    .output_1_ce0(max_pooling4_U0_output_1_ce0),
    .output_1_q0(output_maxp4_buffer_1_i_q0),
    .output_1_address1(max_pooling4_U0_output_1_address1),
    .output_1_ce1(max_pooling4_U0_output_1_ce1),
    .output_1_we1(max_pooling4_U0_output_1_we1),
    .output_1_d1(max_pooling4_U0_output_1_d1)
);

convolution5 convolution5_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(convolution5_U0_ap_start),
    .ap_done(convolution5_U0_ap_done),
    .ap_continue(convolution5_U0_ap_continue),
    .ap_idle(convolution5_U0_ap_idle),
    .ap_ready(convolution5_U0_ap_ready),
    .input_0_address0(convolution5_U0_input_0_address0),
    .input_0_ce0(convolution5_U0_input_0_ce0),
    .input_0_q0(output_maxp4_buffer_s_t_q0),
    .input_0_address1(convolution5_U0_input_0_address1),
    .input_0_ce1(convolution5_U0_input_0_ce1),
    .input_0_q1(output_maxp4_buffer_s_t_q1),
    .input_1_address0(convolution5_U0_input_1_address0),
    .input_1_ce0(convolution5_U0_input_1_ce0),
    .input_1_q0(output_maxp4_buffer_1_t_q0),
    .input_1_address1(convolution5_U0_input_1_address1),
    .input_1_ce1(convolution5_U0_input_1_ce1),
    .input_1_q1(output_maxp4_buffer_1_t_q1),
    .output_0_0_0_address0(convolution5_U0_output_0_0_0_address0),
    .output_0_0_0_ce0(convolution5_U0_output_0_0_0_ce0),
    .output_0_0_0_q0(output_conv5_buffer_s_i_q0),
    .output_0_0_0_address1(convolution5_U0_output_0_0_0_address1),
    .output_0_0_0_ce1(convolution5_U0_output_0_0_0_ce1),
    .output_0_0_0_we1(convolution5_U0_output_0_0_0_we1),
    .output_0_0_0_d1(convolution5_U0_output_0_0_0_d1),
    .output_1_0_0_address0(convolution5_U0_output_1_0_0_address0),
    .output_1_0_0_ce0(convolution5_U0_output_1_0_0_ce0),
    .output_1_0_0_q0(output_conv5_buffer_1_i_q0),
    .output_1_0_0_address1(convolution5_U0_output_1_0_0_address1),
    .output_1_0_0_ce1(convolution5_U0_output_1_0_0_ce1),
    .output_1_0_0_we1(convolution5_U0_output_1_0_0_we1),
    .output_1_0_0_d1(convolution5_U0_output_1_0_0_d1),
    .output_2_0_0_address0(convolution5_U0_output_2_0_0_address0),
    .output_2_0_0_ce0(convolution5_U0_output_2_0_0_ce0),
    .output_2_0_0_q0(output_conv5_buffer_2_i_q0),
    .output_2_0_0_address1(convolution5_U0_output_2_0_0_address1),
    .output_2_0_0_ce1(convolution5_U0_output_2_0_0_ce1),
    .output_2_0_0_we1(convolution5_U0_output_2_0_0_we1),
    .output_2_0_0_d1(convolution5_U0_output_2_0_0_d1),
    .output_3_0_0_address0(convolution5_U0_output_3_0_0_address0),
    .output_3_0_0_ce0(convolution5_U0_output_3_0_0_ce0),
    .output_3_0_0_q0(output_conv5_buffer_3_i_q0),
    .output_3_0_0_address1(convolution5_U0_output_3_0_0_address1),
    .output_3_0_0_ce1(convolution5_U0_output_3_0_0_ce1),
    .output_3_0_0_we1(convolution5_U0_output_3_0_0_we1),
    .output_3_0_0_d1(convolution5_U0_output_3_0_0_d1),
    .output_4_0_0_address0(convolution5_U0_output_4_0_0_address0),
    .output_4_0_0_ce0(convolution5_U0_output_4_0_0_ce0),
    .output_4_0_0_q0(output_conv5_buffer_4_i_q0),
    .output_4_0_0_address1(convolution5_U0_output_4_0_0_address1),
    .output_4_0_0_ce1(convolution5_U0_output_4_0_0_ce1),
    .output_4_0_0_we1(convolution5_U0_output_4_0_0_we1),
    .output_4_0_0_d1(convolution5_U0_output_4_0_0_d1),
    .output_5_0_0_address0(convolution5_U0_output_5_0_0_address0),
    .output_5_0_0_ce0(convolution5_U0_output_5_0_0_ce0),
    .output_5_0_0_q0(output_conv5_buffer_5_i_q0),
    .output_5_0_0_address1(convolution5_U0_output_5_0_0_address1),
    .output_5_0_0_ce1(convolution5_U0_output_5_0_0_ce1),
    .output_5_0_0_we1(convolution5_U0_output_5_0_0_we1),
    .output_5_0_0_d1(convolution5_U0_output_5_0_0_d1)
);

fc6 fc6_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(fc6_U0_ap_start),
    .ap_done(fc6_U0_ap_done),
    .ap_continue(fc6_U0_ap_continue),
    .ap_idle(fc6_U0_ap_idle),
    .ap_ready(fc6_U0_ap_ready),
    .input_0_0_0_address0(fc6_U0_input_0_0_0_address0),
    .input_0_0_0_ce0(fc6_U0_input_0_0_0_ce0),
    .input_0_0_0_q0(output_conv5_buffer_s_t_q0),
    .input_1_0_0_address0(fc6_U0_input_1_0_0_address0),
    .input_1_0_0_ce0(fc6_U0_input_1_0_0_ce0),
    .input_1_0_0_q0(output_conv5_buffer_1_t_q0),
    .input_2_0_0_address0(fc6_U0_input_2_0_0_address0),
    .input_2_0_0_ce0(fc6_U0_input_2_0_0_ce0),
    .input_2_0_0_q0(output_conv5_buffer_2_t_q0),
    .input_3_0_0_address0(fc6_U0_input_3_0_0_address0),
    .input_3_0_0_ce0(fc6_U0_input_3_0_0_ce0),
    .input_3_0_0_q0(output_conv5_buffer_3_t_q0),
    .input_4_0_0_address0(fc6_U0_input_4_0_0_address0),
    .input_4_0_0_ce0(fc6_U0_input_4_0_0_ce0),
    .input_4_0_0_q0(output_conv5_buffer_4_t_q0),
    .input_5_0_0_address0(fc6_U0_input_5_0_0_address0),
    .input_5_0_0_ce0(fc6_U0_input_5_0_0_ce0),
    .input_5_0_0_q0(output_conv5_buffer_5_t_q0),
    .output_0_address0(fc6_U0_output_0_address0),
    .output_0_ce0(fc6_U0_output_0_ce0),
    .output_0_we0(fc6_U0_output_0_we0),
    .output_0_d0(fc6_U0_output_0_d0),
    .output_0_q0(output_fc6_buffer_0_i_q0),
    .output_1_address0(fc6_U0_output_1_address0),
    .output_1_ce0(fc6_U0_output_1_ce0),
    .output_1_we0(fc6_U0_output_1_we0),
    .output_1_d0(fc6_U0_output_1_d0),
    .output_1_q0(output_fc6_buffer_1_i_q0)
);

store_output store_output_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(store_output_U0_ap_start),
    .ap_done(store_output_U0_ap_done),
    .ap_continue(store_output_U0_ap_continue),
    .ap_idle(store_output_U0_ap_idle),
    .ap_ready(store_output_U0_ap_ready),
    .m_axi_output_r_AWVALID(store_output_U0_m_axi_output_r_AWVALID),
    .m_axi_output_r_AWREADY(gmem_AWREADY),
    .m_axi_output_r_AWADDR(store_output_U0_m_axi_output_r_AWADDR),
    .m_axi_output_r_AWID(store_output_U0_m_axi_output_r_AWID),
    .m_axi_output_r_AWLEN(store_output_U0_m_axi_output_r_AWLEN),
    .m_axi_output_r_AWSIZE(store_output_U0_m_axi_output_r_AWSIZE),
    .m_axi_output_r_AWBURST(store_output_U0_m_axi_output_r_AWBURST),
    .m_axi_output_r_AWLOCK(store_output_U0_m_axi_output_r_AWLOCK),
    .m_axi_output_r_AWCACHE(store_output_U0_m_axi_output_r_AWCACHE),
    .m_axi_output_r_AWPROT(store_output_U0_m_axi_output_r_AWPROT),
    .m_axi_output_r_AWQOS(store_output_U0_m_axi_output_r_AWQOS),
    .m_axi_output_r_AWREGION(store_output_U0_m_axi_output_r_AWREGION),
    .m_axi_output_r_AWUSER(store_output_U0_m_axi_output_r_AWUSER),
    .m_axi_output_r_WVALID(store_output_U0_m_axi_output_r_WVALID),
    .m_axi_output_r_WREADY(gmem_WREADY),
    .m_axi_output_r_WDATA(store_output_U0_m_axi_output_r_WDATA),
    .m_axi_output_r_WSTRB(store_output_U0_m_axi_output_r_WSTRB),
    .m_axi_output_r_WLAST(store_output_U0_m_axi_output_r_WLAST),
    .m_axi_output_r_WID(store_output_U0_m_axi_output_r_WID),
    .m_axi_output_r_WUSER(store_output_U0_m_axi_output_r_WUSER),
    .m_axi_output_r_ARVALID(store_output_U0_m_axi_output_r_ARVALID),
    .m_axi_output_r_ARREADY(1'b0),
    .m_axi_output_r_ARADDR(store_output_U0_m_axi_output_r_ARADDR),
    .m_axi_output_r_ARID(store_output_U0_m_axi_output_r_ARID),
    .m_axi_output_r_ARLEN(store_output_U0_m_axi_output_r_ARLEN),
    .m_axi_output_r_ARSIZE(store_output_U0_m_axi_output_r_ARSIZE),
    .m_axi_output_r_ARBURST(store_output_U0_m_axi_output_r_ARBURST),
    .m_axi_output_r_ARLOCK(store_output_U0_m_axi_output_r_ARLOCK),
    .m_axi_output_r_ARCACHE(store_output_U0_m_axi_output_r_ARCACHE),
    .m_axi_output_r_ARPROT(store_output_U0_m_axi_output_r_ARPROT),
    .m_axi_output_r_ARQOS(store_output_U0_m_axi_output_r_ARQOS),
    .m_axi_output_r_ARREGION(store_output_U0_m_axi_output_r_ARREGION),
    .m_axi_output_r_ARUSER(store_output_U0_m_axi_output_r_ARUSER),
    .m_axi_output_r_RVALID(1'b0),
    .m_axi_output_r_RREADY(store_output_U0_m_axi_output_r_RREADY),
    .m_axi_output_r_RDATA(32'd0),
    .m_axi_output_r_RLAST(1'b0),
    .m_axi_output_r_RID(1'd0),
    .m_axi_output_r_RUSER(1'd0),
    .m_axi_output_r_RRESP(2'd0),
    .m_axi_output_r_BVALID(gmem_BVALID),
    .m_axi_output_r_BREADY(store_output_U0_m_axi_output_r_BREADY),
    .m_axi_output_r_BRESP(gmem_BRESP),
    .m_axi_output_r_BID(gmem_BID),
    .m_axi_output_r_BUSER(gmem_BUSER),
    .output_offset_dout(output_c_dout),
    .output_offset_empty_n(output_c_empty_n),
    .output_offset_read(store_output_U0_output_offset_read),
    .output_fc6_buffer_0_address0(store_output_U0_output_fc6_buffer_0_address0),
    .output_fc6_buffer_0_ce0(store_output_U0_output_fc6_buffer_0_ce0),
    .output_fc6_buffer_0_q0(output_fc6_buffer_0_t_q0),
    .output_fc6_buffer_1_address0(store_output_U0_output_fc6_buffer_1_address0),
    .output_fc6_buffer_1_ce0(store_output_U0_output_fc6_buffer_1_ce0),
    .output_fc6_buffer_1_q0(output_fc6_buffer_1_t_q0)
);

fifo_w32_d8_A output_c_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(load_input19_U0_output_out_din),
    .if_full_n(output_c_full_n),
    .if_write(load_input19_U0_output_out_write),
    .if_dout(output_c_dout),
    .if_empty_n(output_c_empty_n),
    .if_read(store_output_U0_output_offset_read)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_channel_write_output_conv1_buffer_1 <= 1'b0;
    end else begin
        if (((convolution1_U0_ap_done & convolution1_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_output_conv1_buffer_1 <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_output_conv1_buffer_1 <= ap_sync_channel_write_output_conv1_buffer_1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_channel_write_output_conv1_buffer_2 <= 1'b0;
    end else begin
        if (((convolution1_U0_ap_done & convolution1_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_output_conv1_buffer_2 <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_output_conv1_buffer_2 <= ap_sync_channel_write_output_conv1_buffer_2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_channel_write_output_conv1_buffer_3 <= 1'b0;
    end else begin
        if (((convolution1_U0_ap_done & convolution1_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_output_conv1_buffer_3 <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_output_conv1_buffer_3 <= ap_sync_channel_write_output_conv1_buffer_3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_channel_write_output_conv1_buffer_4 <= 1'b0;
    end else begin
        if (((convolution1_U0_ap_done & convolution1_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_output_conv1_buffer_4 <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_output_conv1_buffer_4 <= ap_sync_channel_write_output_conv1_buffer_4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_channel_write_output_conv1_buffer_5 <= 1'b0;
    end else begin
        if (((convolution1_U0_ap_done & convolution1_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_output_conv1_buffer_5 <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_output_conv1_buffer_5 <= ap_sync_channel_write_output_conv1_buffer_5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_channel_write_output_conv1_buffer_s <= 1'b0;
    end else begin
        if (((convolution1_U0_ap_done & convolution1_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_output_conv1_buffer_s <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_output_conv1_buffer_s <= ap_sync_channel_write_output_conv1_buffer_s;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_channel_write_output_conv3_buffer_1 <= 1'b0;
    end else begin
        if (((convolution3_U0_ap_done & convolution3_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_output_conv3_buffer_1 <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_output_conv3_buffer_1 <= ap_sync_channel_write_output_conv3_buffer_1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_channel_write_output_conv3_buffer_s <= 1'b0;
    end else begin
        if (((convolution3_U0_ap_done & convolution3_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_output_conv3_buffer_s <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_output_conv3_buffer_s <= ap_sync_channel_write_output_conv3_buffer_s;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_channel_write_output_conv5_buffer_1 <= 1'b0;
    end else begin
        if (((convolution5_U0_ap_done & convolution5_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_output_conv5_buffer_1 <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_output_conv5_buffer_1 <= ap_sync_channel_write_output_conv5_buffer_1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_channel_write_output_conv5_buffer_2 <= 1'b0;
    end else begin
        if (((convolution5_U0_ap_done & convolution5_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_output_conv5_buffer_2 <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_output_conv5_buffer_2 <= ap_sync_channel_write_output_conv5_buffer_2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_channel_write_output_conv5_buffer_3 <= 1'b0;
    end else begin
        if (((convolution5_U0_ap_done & convolution5_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_output_conv5_buffer_3 <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_output_conv5_buffer_3 <= ap_sync_channel_write_output_conv5_buffer_3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_channel_write_output_conv5_buffer_4 <= 1'b0;
    end else begin
        if (((convolution5_U0_ap_done & convolution5_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_output_conv5_buffer_4 <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_output_conv5_buffer_4 <= ap_sync_channel_write_output_conv5_buffer_4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_channel_write_output_conv5_buffer_5 <= 1'b0;
    end else begin
        if (((convolution5_U0_ap_done & convolution5_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_output_conv5_buffer_5 <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_output_conv5_buffer_5 <= ap_sync_channel_write_output_conv5_buffer_5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_channel_write_output_conv5_buffer_s <= 1'b0;
    end else begin
        if (((convolution5_U0_ap_done & convolution5_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_output_conv5_buffer_s <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_output_conv5_buffer_s <= ap_sync_channel_write_output_conv5_buffer_s;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_channel_write_output_fc6_buffer_0 <= 1'b0;
    end else begin
        if (((fc6_U0_ap_done & fc6_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_output_fc6_buffer_0 <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_output_fc6_buffer_0 <= ap_sync_channel_write_output_fc6_buffer_0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_channel_write_output_fc6_buffer_1 <= 1'b0;
    end else begin
        if (((fc6_U0_ap_done & fc6_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_output_fc6_buffer_1 <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_output_fc6_buffer_1 <= ap_sync_channel_write_output_fc6_buffer_1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_channel_write_output_maxp2_buffer_1 <= 1'b0;
    end else begin
        if (((max_pooling2_U0_ap_done & max_pooling2_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_output_maxp2_buffer_1 <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_output_maxp2_buffer_1 <= ap_sync_channel_write_output_maxp2_buffer_1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_channel_write_output_maxp2_buffer_2 <= 1'b0;
    end else begin
        if (((max_pooling2_U0_ap_done & max_pooling2_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_output_maxp2_buffer_2 <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_output_maxp2_buffer_2 <= ap_sync_channel_write_output_maxp2_buffer_2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_channel_write_output_maxp2_buffer_3 <= 1'b0;
    end else begin
        if (((max_pooling2_U0_ap_done & max_pooling2_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_output_maxp2_buffer_3 <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_output_maxp2_buffer_3 <= ap_sync_channel_write_output_maxp2_buffer_3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_channel_write_output_maxp2_buffer_4 <= 1'b0;
    end else begin
        if (((max_pooling2_U0_ap_done & max_pooling2_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_output_maxp2_buffer_4 <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_output_maxp2_buffer_4 <= ap_sync_channel_write_output_maxp2_buffer_4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_channel_write_output_maxp2_buffer_5 <= 1'b0;
    end else begin
        if (((max_pooling2_U0_ap_done & max_pooling2_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_output_maxp2_buffer_5 <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_output_maxp2_buffer_5 <= ap_sync_channel_write_output_maxp2_buffer_5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_channel_write_output_maxp2_buffer_s <= 1'b0;
    end else begin
        if (((max_pooling2_U0_ap_done & max_pooling2_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_output_maxp2_buffer_s <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_output_maxp2_buffer_s <= ap_sync_channel_write_output_maxp2_buffer_s;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_channel_write_output_maxp4_buffer_1 <= 1'b0;
    end else begin
        if (((max_pooling4_U0_ap_done & max_pooling4_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_output_maxp4_buffer_1 <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_output_maxp4_buffer_1 <= ap_sync_channel_write_output_maxp4_buffer_1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_channel_write_output_maxp4_buffer_s <= 1'b0;
    end else begin
        if (((max_pooling4_U0_ap_done & max_pooling4_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_output_maxp4_buffer_s <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_output_maxp4_buffer_s <= ap_sync_channel_write_output_maxp4_buffer_s;
        end
    end
end

assign ap_channel_done_input_buffer_0 = load_input19_U0_ap_done;

assign ap_channel_done_output_conv1_buffer_1 = ((ap_sync_reg_channel_write_output_conv1_buffer_1 ^ 1'b1) & convolution1_U0_ap_done);

assign ap_channel_done_output_conv1_buffer_2 = ((ap_sync_reg_channel_write_output_conv1_buffer_2 ^ 1'b1) & convolution1_U0_ap_done);

assign ap_channel_done_output_conv1_buffer_3 = ((ap_sync_reg_channel_write_output_conv1_buffer_3 ^ 1'b1) & convolution1_U0_ap_done);

assign ap_channel_done_output_conv1_buffer_4 = ((ap_sync_reg_channel_write_output_conv1_buffer_4 ^ 1'b1) & convolution1_U0_ap_done);

assign ap_channel_done_output_conv1_buffer_5 = ((ap_sync_reg_channel_write_output_conv1_buffer_5 ^ 1'b1) & convolution1_U0_ap_done);

assign ap_channel_done_output_conv1_buffer_s = ((ap_sync_reg_channel_write_output_conv1_buffer_s ^ 1'b1) & convolution1_U0_ap_done);

assign ap_channel_done_output_conv3_buffer_1 = ((ap_sync_reg_channel_write_output_conv3_buffer_1 ^ 1'b1) & convolution3_U0_ap_done);

assign ap_channel_done_output_conv3_buffer_s = ((ap_sync_reg_channel_write_output_conv3_buffer_s ^ 1'b1) & convolution3_U0_ap_done);

assign ap_channel_done_output_conv5_buffer_1 = ((ap_sync_reg_channel_write_output_conv5_buffer_1 ^ 1'b1) & convolution5_U0_ap_done);

assign ap_channel_done_output_conv5_buffer_2 = ((ap_sync_reg_channel_write_output_conv5_buffer_2 ^ 1'b1) & convolution5_U0_ap_done);

assign ap_channel_done_output_conv5_buffer_3 = ((ap_sync_reg_channel_write_output_conv5_buffer_3 ^ 1'b1) & convolution5_U0_ap_done);

assign ap_channel_done_output_conv5_buffer_4 = ((ap_sync_reg_channel_write_output_conv5_buffer_4 ^ 1'b1) & convolution5_U0_ap_done);

assign ap_channel_done_output_conv5_buffer_5 = ((ap_sync_reg_channel_write_output_conv5_buffer_5 ^ 1'b1) & convolution5_U0_ap_done);

assign ap_channel_done_output_conv5_buffer_s = ((ap_sync_reg_channel_write_output_conv5_buffer_s ^ 1'b1) & convolution5_U0_ap_done);

assign ap_channel_done_output_fc6_buffer_0 = (fc6_U0_ap_done & (ap_sync_reg_channel_write_output_fc6_buffer_0 ^ 1'b1));

assign ap_channel_done_output_fc6_buffer_1 = (fc6_U0_ap_done & (ap_sync_reg_channel_write_output_fc6_buffer_1 ^ 1'b1));

assign ap_channel_done_output_maxp2_buffer_1 = (max_pooling2_U0_ap_done & (ap_sync_reg_channel_write_output_maxp2_buffer_1 ^ 1'b1));

assign ap_channel_done_output_maxp2_buffer_2 = (max_pooling2_U0_ap_done & (ap_sync_reg_channel_write_output_maxp2_buffer_2 ^ 1'b1));

assign ap_channel_done_output_maxp2_buffer_3 = (max_pooling2_U0_ap_done & (ap_sync_reg_channel_write_output_maxp2_buffer_3 ^ 1'b1));

assign ap_channel_done_output_maxp2_buffer_4 = (max_pooling2_U0_ap_done & (ap_sync_reg_channel_write_output_maxp2_buffer_4 ^ 1'b1));

assign ap_channel_done_output_maxp2_buffer_5 = (max_pooling2_U0_ap_done & (ap_sync_reg_channel_write_output_maxp2_buffer_5 ^ 1'b1));

assign ap_channel_done_output_maxp2_buffer_s = (max_pooling2_U0_ap_done & (ap_sync_reg_channel_write_output_maxp2_buffer_s ^ 1'b1));

assign ap_channel_done_output_maxp4_buffer_1 = (max_pooling4_U0_ap_done & (ap_sync_reg_channel_write_output_maxp4_buffer_1 ^ 1'b1));

assign ap_channel_done_output_maxp4_buffer_s = (max_pooling4_U0_ap_done & (ap_sync_reg_channel_write_output_maxp4_buffer_s ^ 1'b1));

assign ap_done = store_output_U0_ap_done;

assign ap_idle = (store_output_U0_ap_idle & max_pooling4_U0_ap_idle & max_pooling2_U0_ap_idle & load_input19_U0_ap_idle & fc6_U0_ap_idle & (output_fc6_buffer_1_t_empty_n ^ 1'b1) & (output_fc6_buffer_0_t_empty_n ^ 1'b1) & (output_conv5_buffer_5_t_empty_n ^ 1'b1) & (output_conv5_buffer_4_t_empty_n ^ 1'b1) & (output_conv5_buffer_3_t_empty_n ^ 1'b1) & (output_conv5_buffer_2_t_empty_n ^ 1'b1) & (output_conv5_buffer_1_t_empty_n ^ 1'b1) & (output_conv5_buffer_s_t_empty_n ^ 1'b1) & (output_maxp4_buffer_1_t_empty_n ^ 1'b1) & (output_maxp4_buffer_s_t_empty_n ^ 1'b1) & (output_conv3_buffer_1_t_empty_n ^ 1'b1) & (output_conv3_buffer_s_t_empty_n ^ 1'b1) & (output_maxp2_buffer_5_t_empty_n ^ 1'b1) & (output_maxp2_buffer_4_t_empty_n ^ 1'b1) & (output_maxp2_buffer_3_t_empty_n ^ 1'b1) & (output_maxp2_buffer_2_t_empty_n ^ 1'b1) & (output_maxp2_buffer_1_t_empty_n ^ 1'b1) & (output_maxp2_buffer_s_t_empty_n ^ 1'b1) & (output_conv1_buffer_5_t_empty_n ^ 1'b1) & (output_conv1_buffer_4_t_empty_n ^ 1'b1) & (output_conv1_buffer_3_t_empty_n ^ 1'b1) & (output_conv1_buffer_2_t_empty_n ^ 1'b1) & (output_conv1_buffer_1_t_empty_n ^ 1'b1) & (output_conv1_buffer_s_t_empty_n ^ 1'b1) & (input_buffer_0_t_empty_n ^ 1'b1) & convolution5_U0_ap_idle & convolution3_U0_ap_idle & convolution1_U0_ap_idle);

assign ap_ready = load_input19_U0_ap_ready;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign ap_sync_channel_write_output_conv1_buffer_1 = ((convolution1_U0_output_1_full_n & ap_channel_done_output_conv1_buffer_1) | ap_sync_reg_channel_write_output_conv1_buffer_1);

assign ap_sync_channel_write_output_conv1_buffer_2 = ((convolution1_U0_output_2_full_n & ap_channel_done_output_conv1_buffer_2) | ap_sync_reg_channel_write_output_conv1_buffer_2);

assign ap_sync_channel_write_output_conv1_buffer_3 = ((convolution1_U0_output_3_full_n & ap_channel_done_output_conv1_buffer_3) | ap_sync_reg_channel_write_output_conv1_buffer_3);

assign ap_sync_channel_write_output_conv1_buffer_4 = ((convolution1_U0_output_4_full_n & ap_channel_done_output_conv1_buffer_4) | ap_sync_reg_channel_write_output_conv1_buffer_4);

assign ap_sync_channel_write_output_conv1_buffer_5 = ((convolution1_U0_output_5_full_n & ap_channel_done_output_conv1_buffer_5) | ap_sync_reg_channel_write_output_conv1_buffer_5);

assign ap_sync_channel_write_output_conv1_buffer_s = ((convolution1_U0_output_0_full_n & ap_channel_done_output_conv1_buffer_s) | ap_sync_reg_channel_write_output_conv1_buffer_s);

assign ap_sync_channel_write_output_conv3_buffer_1 = ((convolution3_U0_output_1_full_n & ap_channel_done_output_conv3_buffer_1) | ap_sync_reg_channel_write_output_conv3_buffer_1);

assign ap_sync_channel_write_output_conv3_buffer_s = ((convolution3_U0_output_0_full_n & ap_channel_done_output_conv3_buffer_s) | ap_sync_reg_channel_write_output_conv3_buffer_s);

assign ap_sync_channel_write_output_conv5_buffer_1 = ((convolution5_U0_output_1_0_0_full_n & ap_channel_done_output_conv5_buffer_1) | ap_sync_reg_channel_write_output_conv5_buffer_1);

assign ap_sync_channel_write_output_conv5_buffer_2 = ((convolution5_U0_output_2_0_0_full_n & ap_channel_done_output_conv5_buffer_2) | ap_sync_reg_channel_write_output_conv5_buffer_2);

assign ap_sync_channel_write_output_conv5_buffer_3 = ((convolution5_U0_output_3_0_0_full_n & ap_channel_done_output_conv5_buffer_3) | ap_sync_reg_channel_write_output_conv5_buffer_3);

assign ap_sync_channel_write_output_conv5_buffer_4 = ((convolution5_U0_output_4_0_0_full_n & ap_channel_done_output_conv5_buffer_4) | ap_sync_reg_channel_write_output_conv5_buffer_4);

assign ap_sync_channel_write_output_conv5_buffer_5 = ((convolution5_U0_output_5_0_0_full_n & ap_channel_done_output_conv5_buffer_5) | ap_sync_reg_channel_write_output_conv5_buffer_5);

assign ap_sync_channel_write_output_conv5_buffer_s = ((convolution5_U0_output_0_0_0_full_n & ap_channel_done_output_conv5_buffer_s) | ap_sync_reg_channel_write_output_conv5_buffer_s);

assign ap_sync_channel_write_output_fc6_buffer_0 = ((fc6_U0_output_0_full_n & ap_channel_done_output_fc6_buffer_0) | ap_sync_reg_channel_write_output_fc6_buffer_0);

assign ap_sync_channel_write_output_fc6_buffer_1 = ((fc6_U0_output_1_full_n & ap_channel_done_output_fc6_buffer_1) | ap_sync_reg_channel_write_output_fc6_buffer_1);

assign ap_sync_channel_write_output_maxp2_buffer_1 = ((max_pooling2_U0_output_1_full_n & ap_channel_done_output_maxp2_buffer_1) | ap_sync_reg_channel_write_output_maxp2_buffer_1);

assign ap_sync_channel_write_output_maxp2_buffer_2 = ((max_pooling2_U0_output_2_full_n & ap_channel_done_output_maxp2_buffer_2) | ap_sync_reg_channel_write_output_maxp2_buffer_2);

assign ap_sync_channel_write_output_maxp2_buffer_3 = ((max_pooling2_U0_output_3_full_n & ap_channel_done_output_maxp2_buffer_3) | ap_sync_reg_channel_write_output_maxp2_buffer_3);

assign ap_sync_channel_write_output_maxp2_buffer_4 = ((max_pooling2_U0_output_4_full_n & ap_channel_done_output_maxp2_buffer_4) | ap_sync_reg_channel_write_output_maxp2_buffer_4);

assign ap_sync_channel_write_output_maxp2_buffer_5 = ((max_pooling2_U0_output_5_full_n & ap_channel_done_output_maxp2_buffer_5) | ap_sync_reg_channel_write_output_maxp2_buffer_5);

assign ap_sync_channel_write_output_maxp2_buffer_s = ((max_pooling2_U0_output_0_full_n & ap_channel_done_output_maxp2_buffer_s) | ap_sync_reg_channel_write_output_maxp2_buffer_s);

assign ap_sync_channel_write_output_maxp4_buffer_1 = ((max_pooling4_U0_output_1_full_n & ap_channel_done_output_maxp4_buffer_1) | ap_sync_reg_channel_write_output_maxp4_buffer_1);

assign ap_sync_channel_write_output_maxp4_buffer_s = ((max_pooling4_U0_output_0_full_n & ap_channel_done_output_maxp4_buffer_s) | ap_sync_reg_channel_write_output_maxp4_buffer_s);

assign ap_sync_continue = 1'b1;

assign ap_sync_done = store_output_U0_ap_done;

assign ap_sync_ready = load_input19_U0_ap_ready;

assign convolution1_U0_ap_continue = (ap_sync_channel_write_output_conv1_buffer_s & ap_sync_channel_write_output_conv1_buffer_5 & ap_sync_channel_write_output_conv1_buffer_4 & ap_sync_channel_write_output_conv1_buffer_3 & ap_sync_channel_write_output_conv1_buffer_2 & ap_sync_channel_write_output_conv1_buffer_1);

assign convolution1_U0_ap_start = input_buffer_0_t_empty_n;

assign convolution1_U0_output_0_full_n = output_conv1_buffer_s_i_full_n;

assign convolution1_U0_output_1_full_n = output_conv1_buffer_1_i_full_n;

assign convolution1_U0_output_2_full_n = output_conv1_buffer_2_i_full_n;

assign convolution1_U0_output_3_full_n = output_conv1_buffer_3_i_full_n;

assign convolution1_U0_output_4_full_n = output_conv1_buffer_4_i_full_n;

assign convolution1_U0_output_5_full_n = output_conv1_buffer_5_i_full_n;

assign convolution1_U0_start_full_n = 1'b1;

assign convolution1_U0_start_write = 1'b0;

assign convolution3_U0_ap_continue = (ap_sync_channel_write_output_conv3_buffer_s & ap_sync_channel_write_output_conv3_buffer_1);

assign convolution3_U0_ap_start = (output_maxp2_buffer_s_t_empty_n & output_maxp2_buffer_5_t_empty_n & output_maxp2_buffer_4_t_empty_n & output_maxp2_buffer_3_t_empty_n & output_maxp2_buffer_2_t_empty_n & output_maxp2_buffer_1_t_empty_n);

assign convolution3_U0_output_0_full_n = output_conv3_buffer_s_i_full_n;

assign convolution3_U0_output_1_full_n = output_conv3_buffer_1_i_full_n;

assign convolution3_U0_start_full_n = 1'b1;

assign convolution3_U0_start_write = 1'b0;

assign convolution5_U0_ap_continue = (ap_sync_channel_write_output_conv5_buffer_s & ap_sync_channel_write_output_conv5_buffer_5 & ap_sync_channel_write_output_conv5_buffer_4 & ap_sync_channel_write_output_conv5_buffer_3 & ap_sync_channel_write_output_conv5_buffer_2 & ap_sync_channel_write_output_conv5_buffer_1);

assign convolution5_U0_ap_start = (output_maxp4_buffer_s_t_empty_n & output_maxp4_buffer_1_t_empty_n);

assign convolution5_U0_output_0_0_0_full_n = output_conv5_buffer_s_i_full_n;

assign convolution5_U0_output_1_0_0_full_n = output_conv5_buffer_1_i_full_n;

assign convolution5_U0_output_2_0_0_full_n = output_conv5_buffer_2_i_full_n;

assign convolution5_U0_output_3_0_0_full_n = output_conv5_buffer_3_i_full_n;

assign convolution5_U0_output_4_0_0_full_n = output_conv5_buffer_4_i_full_n;

assign convolution5_U0_output_5_0_0_full_n = output_conv5_buffer_5_i_full_n;

assign convolution5_U0_start_full_n = 1'b1;

assign convolution5_U0_start_write = 1'b0;

assign fc6_U0_ap_continue = (ap_sync_channel_write_output_fc6_buffer_1 & ap_sync_channel_write_output_fc6_buffer_0);

assign fc6_U0_ap_start = (output_conv5_buffer_s_t_empty_n & output_conv5_buffer_5_t_empty_n & output_conv5_buffer_4_t_empty_n & output_conv5_buffer_3_t_empty_n & output_conv5_buffer_2_t_empty_n & output_conv5_buffer_1_t_empty_n);

assign fc6_U0_output_0_full_n = output_fc6_buffer_0_i_full_n;

assign fc6_U0_output_1_full_n = output_fc6_buffer_1_i_full_n;

assign fc6_U0_start_full_n = 1'b1;

assign fc6_U0_start_write = 1'b0;

assign load_input19_U0_ap_continue = input_buffer_0_i_full_n;

assign load_input19_U0_ap_start = ap_start;

assign load_input19_U0_input_buffer_0_full_n = input_buffer_0_i_full_n;

assign load_input19_U0_start_full_n = 1'b1;

assign load_input19_U0_start_write = 1'b0;

assign max_pooling2_U0_ap_continue = (ap_sync_channel_write_output_maxp2_buffer_s & ap_sync_channel_write_output_maxp2_buffer_5 & ap_sync_channel_write_output_maxp2_buffer_4 & ap_sync_channel_write_output_maxp2_buffer_3 & ap_sync_channel_write_output_maxp2_buffer_2 & ap_sync_channel_write_output_maxp2_buffer_1);

assign max_pooling2_U0_ap_start = (output_conv1_buffer_s_t_empty_n & output_conv1_buffer_5_t_empty_n & output_conv1_buffer_4_t_empty_n & output_conv1_buffer_3_t_empty_n & output_conv1_buffer_2_t_empty_n & output_conv1_buffer_1_t_empty_n);

assign max_pooling2_U0_output_0_full_n = output_maxp2_buffer_s_i_full_n;

assign max_pooling2_U0_output_1_full_n = output_maxp2_buffer_1_i_full_n;

assign max_pooling2_U0_output_2_full_n = output_maxp2_buffer_2_i_full_n;

assign max_pooling2_U0_output_3_full_n = output_maxp2_buffer_3_i_full_n;

assign max_pooling2_U0_output_4_full_n = output_maxp2_buffer_4_i_full_n;

assign max_pooling2_U0_output_5_full_n = output_maxp2_buffer_5_i_full_n;

assign max_pooling2_U0_start_full_n = 1'b1;

assign max_pooling2_U0_start_write = 1'b0;

assign max_pooling4_U0_ap_continue = (ap_sync_channel_write_output_maxp4_buffer_s & ap_sync_channel_write_output_maxp4_buffer_1);

assign max_pooling4_U0_ap_start = (output_conv3_buffer_s_t_empty_n & output_conv3_buffer_1_t_empty_n);

assign max_pooling4_U0_output_0_full_n = output_maxp4_buffer_s_i_full_n;

assign max_pooling4_U0_output_1_full_n = output_maxp4_buffer_1_i_full_n;

assign max_pooling4_U0_start_full_n = 1'b1;

assign max_pooling4_U0_start_write = 1'b0;

assign output_conv1_buffer_1_i_d0 = 32'd0;

assign output_conv1_buffer_1_i_we0 = 1'b0;

assign output_conv1_buffer_1_t_d0 = 32'd0;

assign output_conv1_buffer_1_t_we0 = 1'b0;

assign output_conv1_buffer_2_i_d0 = 32'd0;

assign output_conv1_buffer_2_i_we0 = 1'b0;

assign output_conv1_buffer_2_t_d0 = 32'd0;

assign output_conv1_buffer_2_t_we0 = 1'b0;

assign output_conv1_buffer_3_i_d0 = 32'd0;

assign output_conv1_buffer_3_i_we0 = 1'b0;

assign output_conv1_buffer_3_t_d0 = 32'd0;

assign output_conv1_buffer_3_t_we0 = 1'b0;

assign output_conv1_buffer_4_i_d0 = 32'd0;

assign output_conv1_buffer_4_i_we0 = 1'b0;

assign output_conv1_buffer_4_t_d0 = 32'd0;

assign output_conv1_buffer_4_t_we0 = 1'b0;

assign output_conv1_buffer_5_i_d0 = 32'd0;

assign output_conv1_buffer_5_i_we0 = 1'b0;

assign output_conv1_buffer_5_t_d0 = 32'd0;

assign output_conv1_buffer_5_t_we0 = 1'b0;

assign output_conv1_buffer_s_i_d0 = 32'd0;

assign output_conv1_buffer_s_i_we0 = 1'b0;

assign output_conv1_buffer_s_t_d0 = 32'd0;

assign output_conv1_buffer_s_t_we0 = 1'b0;

assign output_conv3_buffer_1_i_d0 = 32'd0;

assign output_conv3_buffer_1_i_we0 = 1'b0;

assign output_conv3_buffer_1_t_d0 = 32'd0;

assign output_conv3_buffer_1_t_we0 = 1'b0;

assign output_conv3_buffer_s_i_d0 = 32'd0;

assign output_conv3_buffer_s_i_we0 = 1'b0;

assign output_conv3_buffer_s_t_d0 = 32'd0;

assign output_conv3_buffer_s_t_we0 = 1'b0;

assign output_conv5_buffer_1_i_d0 = 32'd0;

assign output_conv5_buffer_1_i_we0 = 1'b0;

assign output_conv5_buffer_1_t_d0 = 32'd0;

assign output_conv5_buffer_1_t_we0 = 1'b0;

assign output_conv5_buffer_2_i_d0 = 32'd0;

assign output_conv5_buffer_2_i_we0 = 1'b0;

assign output_conv5_buffer_2_t_d0 = 32'd0;

assign output_conv5_buffer_2_t_we0 = 1'b0;

assign output_conv5_buffer_3_i_d0 = 32'd0;

assign output_conv5_buffer_3_i_we0 = 1'b0;

assign output_conv5_buffer_3_t_d0 = 32'd0;

assign output_conv5_buffer_3_t_we0 = 1'b0;

assign output_conv5_buffer_4_i_d0 = 32'd0;

assign output_conv5_buffer_4_i_we0 = 1'b0;

assign output_conv5_buffer_4_t_d0 = 32'd0;

assign output_conv5_buffer_4_t_we0 = 1'b0;

assign output_conv5_buffer_5_i_d0 = 32'd0;

assign output_conv5_buffer_5_i_we0 = 1'b0;

assign output_conv5_buffer_5_t_d0 = 32'd0;

assign output_conv5_buffer_5_t_we0 = 1'b0;

assign output_conv5_buffer_s_i_d0 = 32'd0;

assign output_conv5_buffer_s_i_we0 = 1'b0;

assign output_conv5_buffer_s_t_d0 = 32'd0;

assign output_conv5_buffer_s_t_we0 = 1'b0;

assign output_maxp4_buffer_1_i_d0 = 32'd0;

assign output_maxp4_buffer_1_i_we0 = 1'b0;

assign output_maxp4_buffer_1_t_d0 = 32'd0;

assign output_maxp4_buffer_1_t_we0 = 1'b0;

assign output_maxp4_buffer_s_i_d0 = 32'd0;

assign output_maxp4_buffer_s_i_we0 = 1'b0;

assign output_maxp4_buffer_s_t_d0 = 32'd0;

assign output_maxp4_buffer_s_t_we0 = 1'b0;

assign store_output_U0_ap_continue = 1'b1;

assign store_output_U0_ap_start = (output_fc6_buffer_1_t_empty_n & output_fc6_buffer_0_t_empty_n);

assign store_output_U0_start_full_n = 1'b1;

assign store_output_U0_start_write = 1'b0;

endmodule //LeNet
