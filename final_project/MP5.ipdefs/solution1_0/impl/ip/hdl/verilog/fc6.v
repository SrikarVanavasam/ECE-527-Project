// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module fc6 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        input_0_0_0_address0,
        input_0_0_0_ce0,
        input_0_0_0_q0,
        input_1_0_0_address0,
        input_1_0_0_ce0,
        input_1_0_0_q0,
        input_2_0_0_address0,
        input_2_0_0_ce0,
        input_2_0_0_q0,
        input_3_0_0_address0,
        input_3_0_0_ce0,
        input_3_0_0_q0,
        input_4_0_0_address0,
        input_4_0_0_ce0,
        input_4_0_0_q0,
        input_5_0_0_address0,
        input_5_0_0_ce0,
        input_5_0_0_q0,
        output_0_address0,
        output_0_ce0,
        output_0_we0,
        output_0_d0,
        output_0_q0,
        output_1_address0,
        output_1_ce0,
        output_1_we0,
        output_1_d0,
        output_1_q0
);

parameter    ap_ST_fsm_state1 = 45'd1;
parameter    ap_ST_fsm_state2 = 45'd2;
parameter    ap_ST_fsm_state3 = 45'd4;
parameter    ap_ST_fsm_state4 = 45'd8;
parameter    ap_ST_fsm_state5 = 45'd16;
parameter    ap_ST_fsm_state6 = 45'd32;
parameter    ap_ST_fsm_state7 = 45'd64;
parameter    ap_ST_fsm_state8 = 45'd128;
parameter    ap_ST_fsm_state9 = 45'd256;
parameter    ap_ST_fsm_state10 = 45'd512;
parameter    ap_ST_fsm_state11 = 45'd1024;
parameter    ap_ST_fsm_state12 = 45'd2048;
parameter    ap_ST_fsm_state13 = 45'd4096;
parameter    ap_ST_fsm_state14 = 45'd8192;
parameter    ap_ST_fsm_state15 = 45'd16384;
parameter    ap_ST_fsm_state16 = 45'd32768;
parameter    ap_ST_fsm_state17 = 45'd65536;
parameter    ap_ST_fsm_state18 = 45'd131072;
parameter    ap_ST_fsm_state19 = 45'd262144;
parameter    ap_ST_fsm_state20 = 45'd524288;
parameter    ap_ST_fsm_state21 = 45'd1048576;
parameter    ap_ST_fsm_state22 = 45'd2097152;
parameter    ap_ST_fsm_state23 = 45'd4194304;
parameter    ap_ST_fsm_state24 = 45'd8388608;
parameter    ap_ST_fsm_state25 = 45'd16777216;
parameter    ap_ST_fsm_state26 = 45'd33554432;
parameter    ap_ST_fsm_state27 = 45'd67108864;
parameter    ap_ST_fsm_state28 = 45'd134217728;
parameter    ap_ST_fsm_state29 = 45'd268435456;
parameter    ap_ST_fsm_state30 = 45'd536870912;
parameter    ap_ST_fsm_state31 = 45'd1073741824;
parameter    ap_ST_fsm_state32 = 45'd2147483648;
parameter    ap_ST_fsm_state33 = 45'd4294967296;
parameter    ap_ST_fsm_state34 = 45'd8589934592;
parameter    ap_ST_fsm_state35 = 45'd17179869184;
parameter    ap_ST_fsm_state36 = 45'd34359738368;
parameter    ap_ST_fsm_state37 = 45'd68719476736;
parameter    ap_ST_fsm_state38 = 45'd137438953472;
parameter    ap_ST_fsm_state39 = 45'd274877906944;
parameter    ap_ST_fsm_state40 = 45'd549755813888;
parameter    ap_ST_fsm_state41 = 45'd1099511627776;
parameter    ap_ST_fsm_state42 = 45'd2199023255552;
parameter    ap_ST_fsm_state43 = 45'd4398046511104;
parameter    ap_ST_fsm_state44 = 45'd8796093022208;
parameter    ap_ST_fsm_state45 = 45'd17592186044416;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [4:0] input_0_0_0_address0;
output   input_0_0_0_ce0;
input  [31:0] input_0_0_0_q0;
output  [4:0] input_1_0_0_address0;
output   input_1_0_0_ce0;
input  [31:0] input_1_0_0_q0;
output  [4:0] input_2_0_0_address0;
output   input_2_0_0_ce0;
input  [31:0] input_2_0_0_q0;
output  [4:0] input_3_0_0_address0;
output   input_3_0_0_ce0;
input  [31:0] input_3_0_0_q0;
output  [4:0] input_4_0_0_address0;
output   input_4_0_0_ce0;
input  [31:0] input_4_0_0_q0;
output  [4:0] input_5_0_0_address0;
output   input_5_0_0_ce0;
input  [31:0] input_5_0_0_q0;
output  [2:0] output_0_address0;
output   output_0_ce0;
output   output_0_we0;
output  [31:0] output_0_d0;
input  [31:0] output_0_q0;
output  [2:0] output_1_address0;
output   output_1_ce0;
output   output_1_we0;
output  [31:0] output_1_d0;
input  [31:0] output_1_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_0_0_0_ce0;
reg input_1_0_0_ce0;
reg input_2_0_0_ce0;
reg input_3_0_0_ce0;
reg input_4_0_0_ce0;
reg input_5_0_0_ce0;
reg[2:0] output_0_address0;
reg output_0_ce0;
reg output_0_we0;
reg[2:0] output_1_address0;
reg output_1_ce0;
reg output_1_we0;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [44:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [2:0] bias_fc6_buffer_0_address0;
reg    bias_fc6_buffer_0_ce0;
wire   [31:0] bias_fc6_buffer_0_q0;
wire   [6:0] weights_fc6_buffer_0_5_address0;
reg    weights_fc6_buffer_0_5_ce0;
wire   [31:0] weights_fc6_buffer_0_5_q0;
wire   [6:0] weights_fc6_buffer_0_4_address0;
reg    weights_fc6_buffer_0_4_ce0;
wire   [31:0] weights_fc6_buffer_0_4_q0;
wire   [6:0] weights_fc6_buffer_0_3_address0;
reg    weights_fc6_buffer_0_3_ce0;
wire   [31:0] weights_fc6_buffer_0_3_q0;
wire   [6:0] weights_fc6_buffer_0_2_address0;
reg    weights_fc6_buffer_0_2_ce0;
wire   [31:0] weights_fc6_buffer_0_2_q0;
wire   [6:0] weights_fc6_buffer_0_1_address0;
reg    weights_fc6_buffer_0_1_ce0;
wire   [31:0] weights_fc6_buffer_0_1_q0;
wire   [6:0] weights_fc6_buffer_0_address0;
reg    weights_fc6_buffer_0_ce0;
wire   [31:0] weights_fc6_buffer_0_q0;
wire   [2:0] bias_fc6_buffer_1_address0;
reg    bias_fc6_buffer_1_ce0;
wire   [31:0] bias_fc6_buffer_1_q0;
wire   [6:0] weights_fc6_buffer_1_5_address0;
reg    weights_fc6_buffer_1_5_ce0;
wire   [31:0] weights_fc6_buffer_1_5_q0;
wire   [6:0] weights_fc6_buffer_1_4_address0;
reg    weights_fc6_buffer_1_4_ce0;
wire   [31:0] weights_fc6_buffer_1_4_q0;
wire   [6:0] weights_fc6_buffer_1_3_address0;
reg    weights_fc6_buffer_1_3_ce0;
wire   [31:0] weights_fc6_buffer_1_3_q0;
wire   [6:0] weights_fc6_buffer_1_2_address0;
reg    weights_fc6_buffer_1_2_ce0;
wire   [31:0] weights_fc6_buffer_1_2_q0;
wire   [6:0] weights_fc6_buffer_1_1_address0;
reg    weights_fc6_buffer_1_1_ce0;
wire   [31:0] weights_fc6_buffer_1_1_q0;
wire   [6:0] weights_fc6_buffer_1_address0;
reg    weights_fc6_buffer_1_ce0;
wire   [31:0] weights_fc6_buffer_1_q0;
wire   [31:0] grp_fu_416_p2;
reg   [31:0] reg_454;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state28;
wire   [31:0] grp_fu_421_p2;
reg   [31:0] reg_459;
wire   [31:0] grp_fu_408_p2;
reg   [31:0] reg_465;
wire    ap_CS_fsm_state33;
wire    ap_CS_fsm_state38;
wire   [31:0] grp_fu_412_p2;
reg   [31:0] reg_470;
wire   [4:0] add_ln202_fu_481_p2;
reg   [4:0] add_ln202_reg_716;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln208_fu_487_p2;
reg   [0:0] icmp_ln208_reg_721;
wire   [0:0] icmp_ln202_fu_475_p2;
wire   [7:0] zext_ln210_1_fu_503_p1;
reg   [7:0] zext_ln210_1_reg_727;
reg   [4:0] input_0_0_0_addr_reg_732;
reg   [4:0] input_1_0_0_addr_reg_737;
reg   [4:0] input_2_0_0_addr_reg_742;
reg   [4:0] input_3_0_0_addr_reg_747;
reg   [4:0] input_4_0_0_addr_reg_752;
reg   [4:0] input_5_0_0_addr_reg_757;
wire   [0:0] icmp_ln213_fu_507_p2;
reg   [0:0] icmp_ln213_reg_762;
wire   [2:0] lshr_ln_fu_519_p4;
reg   [2:0] lshr_ln_reg_771;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln203_fu_513_p2;
wire   [63:0] zext_ln210_4_fu_564_p1;
reg   [63:0] zext_ln210_4_reg_776;
wire   [3:0] n_fu_570_p2;
reg   [3:0] n_reg_800;
wire   [6:0] c_fu_576_p2;
reg   [31:0] weights_fc6_buffer_0_12_reg_810;
wire    ap_CS_fsm_state4;
reg   [31:0] weights_fc6_buffer_1_12_reg_815;
wire    ap_CS_fsm_state5;
wire   [63:0] zext_ln211_fu_582_p1;
reg   [63:0] zext_ln211_reg_826;
wire    ap_CS_fsm_state7;
reg   [2:0] output_0_addr_reg_832;
reg   [2:0] output_1_addr_reg_837;
wire   [31:0] select_ln208_fu_587_p3;
reg   [31:0] select_ln208_reg_852;
wire   [31:0] select_ln208_1_fu_594_p3;
reg   [31:0] select_ln208_1_reg_857;
reg   [31:0] weights_fc6_buffer_0_13_reg_862;
wire    ap_CS_fsm_state9;
reg   [31:0] weights_fc6_buffer_1_13_reg_867;
wire    ap_CS_fsm_state10;
reg   [31:0] weights_fc6_buffer_0_14_reg_888;
wire    ap_CS_fsm_state14;
reg   [31:0] weights_fc6_buffer_1_14_reg_893;
wire    ap_CS_fsm_state15;
reg   [31:0] weights_fc6_buffer_0_15_reg_914;
wire    ap_CS_fsm_state19;
reg   [31:0] weights_fc6_buffer_1_15_reg_919;
wire    ap_CS_fsm_state20;
reg   [31:0] weights_fc6_buffer_0_16_reg_950;
wire    ap_CS_fsm_state24;
reg   [31:0] weights_fc6_buffer_0_17_reg_955;
reg   [31:0] weights_fc6_buffer_1_16_reg_960;
reg   [31:0] weights_fc6_buffer_1_17_reg_965;
wire    ap_CS_fsm_state25;
wire   [31:0] grp_fu_434_p2;
reg   [31:0] tmp_1_4_reg_982;
wire   [31:0] grp_fu_439_p2;
reg   [31:0] tmp_1_5_reg_987;
wire    ap_CS_fsm_state37;
reg   [31:0] bias_fc6_buffer_0_lo_reg_1002;
reg   [31:0] bias_fc6_buffer_1_lo_reg_1007;
reg   [31:0] biased_0_5_reg_1012;
wire    ap_CS_fsm_state43;
reg   [31:0] biased_112_5_reg_1019;
reg   [4:0] indvars_iv137_reg_374;
reg    ap_block_state1;
reg   [6:0] c_0_reg_385;
reg   [3:0] n_0_reg_397;
wire    ap_CS_fsm_state45;
wire   [63:0] zext_ln210_fu_493_p1;
reg   [31:0] grp_fu_408_p0;
reg   [31:0] grp_fu_408_p1;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state34;
wire    ap_CS_fsm_state39;
reg   [31:0] grp_fu_412_p0;
reg   [31:0] grp_fu_412_p1;
reg   [31:0] grp_fu_416_p0;
reg   [31:0] grp_fu_416_p1;
reg   [31:0] grp_fu_421_p0;
reg   [31:0] grp_fu_421_p1;
wire    ap_CS_fsm_state44;
wire   [6:0] tmp_34_fu_529_p3;
wire   [4:0] tmp_35_fu_541_p3;
wire   [7:0] zext_ln210_2_fu_537_p1;
wire   [7:0] zext_ln210_3_fu_549_p1;
wire   [7:0] add_ln210_fu_553_p2;
wire   [7:0] add_ln210_1_fu_559_p2;
wire   [31:0] bitcast_ln212_fu_601_p1;
wire   [7:0] tmp_s_fu_604_p4;
wire   [22:0] trunc_ln212_fu_614_p1;
wire   [0:0] icmp_ln212_1_fu_624_p2;
wire   [0:0] icmp_ln212_fu_618_p2;
wire   [0:0] or_ln212_fu_630_p2;
wire   [0:0] grp_fu_444_p2;
wire   [0:0] and_ln212_fu_636_p2;
wire   [31:0] select_ln212_fu_642_p3;
wire   [31:0] bitcast_ln212_1_fu_657_p1;
wire   [7:0] tmp_31_fu_660_p4;
wire   [22:0] trunc_ln212_1_fu_670_p1;
wire   [0:0] icmp_ln212_3_fu_680_p2;
wire   [0:0] icmp_ln212_2_fu_674_p2;
wire   [0:0] or_ln212_1_fu_686_p2;
wire   [0:0] grp_fu_449_p2;
wire   [0:0] and_ln212_1_fu_692_p2;
wire   [31:0] select_ln212_1_fu_698_p3;
reg   [44:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 45'd1;
end

fc6_bias_fc6_buffLf8 #(
    .DataWidth( 32 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
bias_fc6_buffer_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(bias_fc6_buffer_0_address0),
    .ce0(bias_fc6_buffer_0_ce0),
    .q0(bias_fc6_buffer_0_q0)
);

fc6_weights_fc6_bMgi #(
    .DataWidth( 32 ),
    .AddressRange( 100 ),
    .AddressWidth( 7 ))
weights_fc6_buffer_0_5_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights_fc6_buffer_0_5_address0),
    .ce0(weights_fc6_buffer_0_5_ce0),
    .q0(weights_fc6_buffer_0_5_q0)
);

fc6_weights_fc6_bNgs #(
    .DataWidth( 32 ),
    .AddressRange( 100 ),
    .AddressWidth( 7 ))
weights_fc6_buffer_0_4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights_fc6_buffer_0_4_address0),
    .ce0(weights_fc6_buffer_0_4_ce0),
    .q0(weights_fc6_buffer_0_4_q0)
);

fc6_weights_fc6_bOgC #(
    .DataWidth( 32 ),
    .AddressRange( 100 ),
    .AddressWidth( 7 ))
weights_fc6_buffer_0_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights_fc6_buffer_0_3_address0),
    .ce0(weights_fc6_buffer_0_3_ce0),
    .q0(weights_fc6_buffer_0_3_q0)
);

fc6_weights_fc6_bPgM #(
    .DataWidth( 32 ),
    .AddressRange( 100 ),
    .AddressWidth( 7 ))
weights_fc6_buffer_0_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights_fc6_buffer_0_2_address0),
    .ce0(weights_fc6_buffer_0_2_ce0),
    .q0(weights_fc6_buffer_0_2_q0)
);

fc6_weights_fc6_bQgW #(
    .DataWidth( 32 ),
    .AddressRange( 100 ),
    .AddressWidth( 7 ))
weights_fc6_buffer_0_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights_fc6_buffer_0_1_address0),
    .ce0(weights_fc6_buffer_0_1_ce0),
    .q0(weights_fc6_buffer_0_1_q0)
);

fc6_weights_fc6_bRg6 #(
    .DataWidth( 32 ),
    .AddressRange( 100 ),
    .AddressWidth( 7 ))
weights_fc6_buffer_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights_fc6_buffer_0_address0),
    .ce0(weights_fc6_buffer_0_ce0),
    .q0(weights_fc6_buffer_0_q0)
);

fc6_bias_fc6_buffShg #(
    .DataWidth( 32 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
bias_fc6_buffer_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(bias_fc6_buffer_1_address0),
    .ce0(bias_fc6_buffer_1_ce0),
    .q0(bias_fc6_buffer_1_q0)
);

fc6_weights_fc6_bThq #(
    .DataWidth( 32 ),
    .AddressRange( 100 ),
    .AddressWidth( 7 ))
weights_fc6_buffer_1_5_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights_fc6_buffer_1_5_address0),
    .ce0(weights_fc6_buffer_1_5_ce0),
    .q0(weights_fc6_buffer_1_5_q0)
);

fc6_weights_fc6_bUhA #(
    .DataWidth( 32 ),
    .AddressRange( 100 ),
    .AddressWidth( 7 ))
weights_fc6_buffer_1_4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights_fc6_buffer_1_4_address0),
    .ce0(weights_fc6_buffer_1_4_ce0),
    .q0(weights_fc6_buffer_1_4_q0)
);

fc6_weights_fc6_bVhK #(
    .DataWidth( 32 ),
    .AddressRange( 100 ),
    .AddressWidth( 7 ))
weights_fc6_buffer_1_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights_fc6_buffer_1_3_address0),
    .ce0(weights_fc6_buffer_1_3_ce0),
    .q0(weights_fc6_buffer_1_3_q0)
);

fc6_weights_fc6_bWhU #(
    .DataWidth( 32 ),
    .AddressRange( 100 ),
    .AddressWidth( 7 ))
weights_fc6_buffer_1_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights_fc6_buffer_1_2_address0),
    .ce0(weights_fc6_buffer_1_2_ce0),
    .q0(weights_fc6_buffer_1_2_q0)
);

fc6_weights_fc6_bXh4 #(
    .DataWidth( 32 ),
    .AddressRange( 100 ),
    .AddressWidth( 7 ))
weights_fc6_buffer_1_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights_fc6_buffer_1_1_address0),
    .ce0(weights_fc6_buffer_1_1_ce0),
    .q0(weights_fc6_buffer_1_1_q0)
);

fc6_weights_fc6_bYie #(
    .DataWidth( 32 ),
    .AddressRange( 100 ),
    .AddressWidth( 7 ))
weights_fc6_buffer_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights_fc6_buffer_1_address0),
    .ce0(weights_fc6_buffer_1_ce0),
    .q0(weights_fc6_buffer_1_q0)
);

LeNet_fadd_32ns_3hbi #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
LeNet_fadd_32ns_3hbi_U173(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_408_p0),
    .din1(grp_fu_408_p1),
    .ce(1'b1),
    .dout(grp_fu_408_p2)
);

LeNet_fadd_32ns_3hbi #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
LeNet_fadd_32ns_3hbi_U174(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_412_p0),
    .din1(grp_fu_412_p1),
    .ce(1'b1),
    .dout(grp_fu_412_p2)
);

LeNet_fmul_32ns_3ibs #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
LeNet_fmul_32ns_3ibs_U175(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_416_p0),
    .din1(grp_fu_416_p1),
    .ce(1'b1),
    .dout(grp_fu_416_p2)
);

LeNet_fmul_32ns_3ibs #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
LeNet_fmul_32ns_3ibs_U176(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_421_p0),
    .din1(grp_fu_421_p1),
    .ce(1'b1),
    .dout(grp_fu_421_p2)
);

LeNet_fmul_32ns_3ibs #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
LeNet_fmul_32ns_3ibs_U177(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(weights_fc6_buffer_1_16_reg_960),
    .din1(input_4_0_0_q0),
    .ce(1'b1),
    .dout(grp_fu_434_p2)
);

LeNet_fmul_32ns_3ibs #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
LeNet_fmul_32ns_3ibs_U178(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(weights_fc6_buffer_1_17_reg_965),
    .din1(input_5_0_0_q0),
    .ce(1'b1),
    .dout(grp_fu_439_p2)
);

LeNet_fcmp_32ns_3jbC #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
LeNet_fcmp_32ns_3jbC_U179(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(biased_0_5_reg_1012),
    .din1(32'd0),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_444_p2)
);

LeNet_fcmp_32ns_3jbC #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
LeNet_fcmp_32ns_3jbC_U180(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(biased_112_5_reg_1019),
    .din1(32'd0),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_449_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((icmp_ln202_fu_475_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        c_0_reg_385 <= 7'd0;
    end else if (((icmp_ln203_fu_513_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        c_0_reg_385 <= c_fu_576_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvars_iv137_reg_374 <= 5'd0;
    end else if (((icmp_ln203_fu_513_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        indvars_iv137_reg_374 <= add_ln202_reg_716;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln202_fu_475_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        n_0_reg_397 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        n_0_reg_397 <= n_reg_800;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln202_reg_716 <= add_ln202_fu_481_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln213_reg_762 == 1'd1) & (1'b1 == ap_CS_fsm_state38))) begin
        bias_fc6_buffer_0_lo_reg_1002 <= bias_fc6_buffer_0_q0;
        bias_fc6_buffer_1_lo_reg_1007 <= bias_fc6_buffer_1_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln213_reg_762 == 1'd1) & (1'b1 == ap_CS_fsm_state43))) begin
        biased_0_5_reg_1012 <= grp_fu_408_p2;
        biased_112_5_reg_1019 <= grp_fu_412_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln202_fu_475_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        icmp_ln208_reg_721 <= icmp_ln208_fu_487_p2;
        icmp_ln213_reg_762 <= icmp_ln213_fu_507_p2;
        input_0_0_0_addr_reg_732 <= zext_ln210_fu_493_p1;
        input_1_0_0_addr_reg_737 <= zext_ln210_fu_493_p1;
        input_2_0_0_addr_reg_742 <= zext_ln210_fu_493_p1;
        input_3_0_0_addr_reg_747 <= zext_ln210_fu_493_p1;
        input_4_0_0_addr_reg_752 <= zext_ln210_fu_493_p1;
        input_5_0_0_addr_reg_757 <= zext_ln210_fu_493_p1;
        zext_ln210_1_reg_727[4 : 0] <= zext_ln210_1_fu_503_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln203_fu_513_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        lshr_ln_reg_771 <= {{n_0_reg_397[3:1]}};
        n_reg_800 <= n_fu_570_p2;
        zext_ln210_4_reg_776[7 : 0] <= zext_ln210_4_fu_564_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        output_0_addr_reg_832 <= zext_ln211_fu_582_p1;
        output_1_addr_reg_837 <= zext_ln211_fu_582_p1;
        zext_ln211_reg_826[2 : 0] <= zext_ln211_fu_582_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state8))) begin
        reg_454 <= grp_fu_416_p2;
        reg_459 <= grp_fu_421_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state13))) begin
        reg_465 <= grp_fu_408_p2;
        reg_470 <= grp_fu_412_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        select_ln208_1_reg_857 <= select_ln208_1_fu_594_p3;
        select_ln208_reg_852 <= select_ln208_fu_587_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        tmp_1_4_reg_982 <= grp_fu_434_p2;
        tmp_1_5_reg_987 <= grp_fu_439_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        weights_fc6_buffer_0_12_reg_810 <= weights_fc6_buffer_0_5_q0;
        weights_fc6_buffer_1_12_reg_815 <= weights_fc6_buffer_1_5_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        weights_fc6_buffer_0_13_reg_862 <= weights_fc6_buffer_0_4_q0;
        weights_fc6_buffer_1_13_reg_867 <= weights_fc6_buffer_1_4_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        weights_fc6_buffer_0_14_reg_888 <= weights_fc6_buffer_0_3_q0;
        weights_fc6_buffer_1_14_reg_893 <= weights_fc6_buffer_1_3_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        weights_fc6_buffer_0_15_reg_914 <= weights_fc6_buffer_0_2_q0;
        weights_fc6_buffer_1_15_reg_919 <= weights_fc6_buffer_1_2_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        weights_fc6_buffer_0_16_reg_950 <= weights_fc6_buffer_0_1_q0;
        weights_fc6_buffer_0_17_reg_955 <= weights_fc6_buffer_0_q0;
        weights_fc6_buffer_1_16_reg_960 <= weights_fc6_buffer_1_1_q0;
        weights_fc6_buffer_1_17_reg_965 <= weights_fc6_buffer_1_q0;
    end
end

always @ (*) begin
    if (((icmp_ln202_fu_475_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln202_fu_475_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        bias_fc6_buffer_0_ce0 = 1'b1;
    end else begin
        bias_fc6_buffer_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        bias_fc6_buffer_1_ce0 = 1'b1;
    end else begin
        bias_fc6_buffer_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state14))) begin
        grp_fu_408_p0 = reg_465;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_408_p0 = select_ln208_reg_852;
    end else begin
        grp_fu_408_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        grp_fu_408_p1 = bias_fc6_buffer_0_lo_reg_1002;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        grp_fu_408_p1 = reg_459;
    end else if (((1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state9))) begin
        grp_fu_408_p1 = reg_454;
    end else begin
        grp_fu_408_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state14))) begin
        grp_fu_412_p0 = reg_470;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_412_p0 = select_ln208_1_reg_857;
    end else begin
        grp_fu_412_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        grp_fu_412_p1 = bias_fc6_buffer_1_lo_reg_1007;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        grp_fu_412_p1 = tmp_1_5_reg_987;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        grp_fu_412_p1 = tmp_1_4_reg_982;
    end else if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state9))) begin
        grp_fu_412_p1 = reg_459;
    end else begin
        grp_fu_412_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        grp_fu_416_p0 = weights_fc6_buffer_0_16_reg_950;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_416_p0 = weights_fc6_buffer_0_15_reg_914;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_fu_416_p0 = weights_fc6_buffer_0_14_reg_888;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_416_p0 = weights_fc6_buffer_0_13_reg_862;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_416_p0 = weights_fc6_buffer_0_12_reg_810;
    end else begin
        grp_fu_416_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        grp_fu_416_p1 = input_4_0_0_q0;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_416_p1 = input_3_0_0_q0;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_fu_416_p1 = input_2_0_0_q0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_416_p1 = input_1_0_0_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_416_p1 = input_0_0_0_q0;
    end else begin
        grp_fu_416_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        grp_fu_421_p0 = weights_fc6_buffer_0_17_reg_955;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_421_p0 = weights_fc6_buffer_1_15_reg_919;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_fu_421_p0 = weights_fc6_buffer_1_14_reg_893;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_421_p0 = weights_fc6_buffer_1_13_reg_867;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_421_p0 = weights_fc6_buffer_1_12_reg_815;
    end else begin
        grp_fu_421_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        grp_fu_421_p1 = input_5_0_0_q0;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_421_p1 = input_3_0_0_q0;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_fu_421_p1 = input_2_0_0_q0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_421_p1 = input_1_0_0_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_421_p1 = input_0_0_0_q0;
    end else begin
        grp_fu_421_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        input_0_0_0_ce0 = 1'b1;
    end else begin
        input_0_0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        input_1_0_0_ce0 = 1'b1;
    end else begin
        input_1_0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        input_2_0_0_ce0 = 1'b1;
    end else begin
        input_2_0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        input_3_0_0_ce0 = 1'b1;
    end else begin
        input_3_0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        input_4_0_0_ce0 = 1'b1;
    end else begin
        input_4_0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        input_5_0_0_ce0 = 1'b1;
    end else begin
        input_5_0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        output_0_address0 = output_0_addr_reg_832;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        output_0_address0 = zext_ln211_fu_582_p1;
    end else begin
        output_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state7))) begin
        output_0_ce0 = 1'b1;
    end else begin
        output_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        output_0_we0 = 1'b1;
    end else begin
        output_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        output_1_address0 = output_1_addr_reg_837;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        output_1_address0 = zext_ln211_fu_582_p1;
    end else begin
        output_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state7))) begin
        output_1_ce0 = 1'b1;
    end else begin
        output_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        output_1_we0 = 1'b1;
    end else begin
        output_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        weights_fc6_buffer_0_1_ce0 = 1'b1;
    end else begin
        weights_fc6_buffer_0_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        weights_fc6_buffer_0_2_ce0 = 1'b1;
    end else begin
        weights_fc6_buffer_0_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        weights_fc6_buffer_0_3_ce0 = 1'b1;
    end else begin
        weights_fc6_buffer_0_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        weights_fc6_buffer_0_4_ce0 = 1'b1;
    end else begin
        weights_fc6_buffer_0_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        weights_fc6_buffer_0_5_ce0 = 1'b1;
    end else begin
        weights_fc6_buffer_0_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        weights_fc6_buffer_0_ce0 = 1'b1;
    end else begin
        weights_fc6_buffer_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        weights_fc6_buffer_1_1_ce0 = 1'b1;
    end else begin
        weights_fc6_buffer_1_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        weights_fc6_buffer_1_2_ce0 = 1'b1;
    end else begin
        weights_fc6_buffer_1_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        weights_fc6_buffer_1_3_ce0 = 1'b1;
    end else begin
        weights_fc6_buffer_1_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        weights_fc6_buffer_1_4_ce0 = 1'b1;
    end else begin
        weights_fc6_buffer_1_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        weights_fc6_buffer_1_5_ce0 = 1'b1;
    end else begin
        weights_fc6_buffer_1_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        weights_fc6_buffer_1_ce0 = 1'b1;
    end else begin
        weights_fc6_buffer_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln202_fu_475_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln203_fu_513_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln202_fu_481_p2 = (indvars_iv137_reg_374 + 5'd1);

assign add_ln210_1_fu_559_p2 = (zext_ln210_1_reg_727 + add_ln210_fu_553_p2);

assign add_ln210_fu_553_p2 = (zext_ln210_2_fu_537_p1 + zext_ln210_3_fu_549_p1);

assign and_ln212_1_fu_692_p2 = (or_ln212_1_fu_686_p2 & grp_fu_449_p2);

assign and_ln212_fu_636_p2 = (or_ln212_fu_630_p2 & grp_fu_444_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

assign bias_fc6_buffer_0_address0 = zext_ln211_reg_826;

assign bias_fc6_buffer_1_address0 = zext_ln211_reg_826;

assign bitcast_ln212_1_fu_657_p1 = biased_112_5_reg_1019;

assign bitcast_ln212_fu_601_p1 = biased_0_5_reg_1012;

assign c_fu_576_p2 = (c_0_reg_385 + 7'd6);

assign icmp_ln202_fu_475_p2 = ((indvars_iv137_reg_374 == 5'd20) ? 1'b1 : 1'b0);

assign icmp_ln203_fu_513_p2 = ((n_0_reg_397 < 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln208_fu_487_p2 = ((c_0_reg_385 == 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln212_1_fu_624_p2 = ((trunc_ln212_fu_614_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln212_2_fu_674_p2 = ((tmp_31_fu_660_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln212_3_fu_680_p2 = ((trunc_ln212_1_fu_670_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln212_fu_618_p2 = ((tmp_s_fu_604_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln213_fu_507_p2 = ((c_0_reg_385 == 7'd114) ? 1'b1 : 1'b0);

assign input_0_0_0_address0 = input_0_0_0_addr_reg_732;

assign input_1_0_0_address0 = input_1_0_0_addr_reg_737;

assign input_2_0_0_address0 = input_2_0_0_addr_reg_742;

assign input_3_0_0_address0 = input_3_0_0_addr_reg_747;

assign input_4_0_0_address0 = input_4_0_0_addr_reg_752;

assign input_5_0_0_address0 = input_5_0_0_addr_reg_757;

assign lshr_ln_fu_519_p4 = {{n_0_reg_397[3:1]}};

assign n_fu_570_p2 = (4'd2 + n_0_reg_397);

assign or_ln212_1_fu_686_p2 = (icmp_ln212_3_fu_680_p2 | icmp_ln212_2_fu_674_p2);

assign or_ln212_fu_630_p2 = (icmp_ln212_fu_618_p2 | icmp_ln212_1_fu_624_p2);

assign output_0_d0 = ((icmp_ln213_reg_762[0:0] === 1'b1) ? select_ln212_fu_642_p3 : reg_465);

assign output_1_d0 = ((icmp_ln213_reg_762[0:0] === 1'b1) ? select_ln212_1_fu_698_p3 : reg_470);

assign select_ln208_1_fu_594_p3 = ((icmp_ln208_reg_721[0:0] === 1'b1) ? 32'd0 : output_1_q0);

assign select_ln208_fu_587_p3 = ((icmp_ln208_reg_721[0:0] === 1'b1) ? 32'd0 : output_0_q0);

assign select_ln212_1_fu_698_p3 = ((and_ln212_1_fu_692_p2[0:0] === 1'b1) ? biased_112_5_reg_1019 : 32'd0);

assign select_ln212_fu_642_p3 = ((and_ln212_fu_636_p2[0:0] === 1'b1) ? biased_0_5_reg_1012 : 32'd0);

assign tmp_31_fu_660_p4 = {{bitcast_ln212_1_fu_657_p1[30:23]}};

assign tmp_34_fu_529_p3 = {{lshr_ln_fu_519_p4}, {4'd0}};

assign tmp_35_fu_541_p3 = {{lshr_ln_fu_519_p4}, {2'd0}};

assign tmp_s_fu_604_p4 = {{bitcast_ln212_fu_601_p1[30:23]}};

assign trunc_ln212_1_fu_670_p1 = bitcast_ln212_1_fu_657_p1[22:0];

assign trunc_ln212_fu_614_p1 = bitcast_ln212_fu_601_p1[22:0];

assign weights_fc6_buffer_0_1_address0 = zext_ln210_4_reg_776;

assign weights_fc6_buffer_0_2_address0 = zext_ln210_4_reg_776;

assign weights_fc6_buffer_0_3_address0 = zext_ln210_4_reg_776;

assign weights_fc6_buffer_0_4_address0 = zext_ln210_4_reg_776;

assign weights_fc6_buffer_0_5_address0 = zext_ln210_4_fu_564_p1;

assign weights_fc6_buffer_0_address0 = zext_ln210_4_reg_776;

assign weights_fc6_buffer_1_1_address0 = zext_ln210_4_reg_776;

assign weights_fc6_buffer_1_2_address0 = zext_ln210_4_reg_776;

assign weights_fc6_buffer_1_3_address0 = zext_ln210_4_reg_776;

assign weights_fc6_buffer_1_4_address0 = zext_ln210_4_reg_776;

assign weights_fc6_buffer_1_5_address0 = zext_ln210_4_fu_564_p1;

assign weights_fc6_buffer_1_address0 = zext_ln210_4_reg_776;

assign zext_ln210_1_fu_503_p1 = indvars_iv137_reg_374;

assign zext_ln210_2_fu_537_p1 = tmp_34_fu_529_p3;

assign zext_ln210_3_fu_549_p1 = tmp_35_fu_541_p3;

assign zext_ln210_4_fu_564_p1 = add_ln210_1_fu_559_p2;

assign zext_ln210_fu_493_p1 = indvars_iv137_reg_374;

assign zext_ln211_fu_582_p1 = lshr_ln_reg_771;

always @ (posedge ap_clk) begin
    zext_ln210_1_reg_727[7:5] <= 3'b000;
    zext_ln210_4_reg_776[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln211_reg_826[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
end

endmodule //fc6
