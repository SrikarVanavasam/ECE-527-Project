// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module max_pooling2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        input_0_address0,
        input_0_ce0,
        input_0_q0,
        input_1_address0,
        input_1_ce0,
        input_1_q0,
        input_2_address0,
        input_2_ce0,
        input_2_q0,
        input_3_address0,
        input_3_ce0,
        input_3_q0,
        input_4_address0,
        input_4_ce0,
        input_4_q0,
        input_5_address0,
        input_5_ce0,
        input_5_q0,
        output_0_address0,
        output_0_ce0,
        output_0_we0,
        output_0_d0,
        output_0_q0,
        output_1_address0,
        output_1_ce0,
        output_1_we0,
        output_1_d0,
        output_1_q0,
        output_2_address0,
        output_2_ce0,
        output_2_we0,
        output_2_d0,
        output_2_q0,
        output_3_address0,
        output_3_ce0,
        output_3_we0,
        output_3_d0,
        output_3_q0,
        output_4_address0,
        output_4_ce0,
        output_4_we0,
        output_4_d0,
        output_4_q0,
        output_5_address0,
        output_5_ce0,
        output_5_we0,
        output_5_d0,
        output_5_q0
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_pp0_stage0 = 9'd2;
parameter    ap_ST_fsm_pp0_stage1 = 9'd4;
parameter    ap_ST_fsm_pp0_stage2 = 9'd8;
parameter    ap_ST_fsm_pp0_stage3 = 9'd16;
parameter    ap_ST_fsm_pp0_stage4 = 9'd32;
parameter    ap_ST_fsm_pp0_stage5 = 9'd64;
parameter    ap_ST_fsm_pp0_stage6 = 9'd128;
parameter    ap_ST_fsm_state10 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [9:0] input_0_address0;
output   input_0_ce0;
input  [31:0] input_0_q0;
output  [9:0] input_1_address0;
output   input_1_ce0;
input  [31:0] input_1_q0;
output  [9:0] input_2_address0;
output   input_2_ce0;
input  [31:0] input_2_q0;
output  [9:0] input_3_address0;
output   input_3_ce0;
input  [31:0] input_3_q0;
output  [9:0] input_4_address0;
output   input_4_ce0;
input  [31:0] input_4_q0;
output  [9:0] input_5_address0;
output   input_5_ce0;
input  [31:0] input_5_q0;
output  [7:0] output_0_address0;
output   output_0_ce0;
output   output_0_we0;
output  [31:0] output_0_d0;
input  [31:0] output_0_q0;
output  [7:0] output_1_address0;
output   output_1_ce0;
output   output_1_we0;
output  [31:0] output_1_d0;
input  [31:0] output_1_q0;
output  [7:0] output_2_address0;
output   output_2_ce0;
output   output_2_we0;
output  [31:0] output_2_d0;
input  [31:0] output_2_q0;
output  [7:0] output_3_address0;
output   output_3_ce0;
output   output_3_we0;
output  [31:0] output_3_d0;
input  [31:0] output_3_q0;
output  [7:0] output_4_address0;
output   output_4_ce0;
output   output_4_we0;
output  [31:0] output_4_d0;
input  [31:0] output_4_q0;
output  [7:0] output_5_address0;
output   output_5_ce0;
output   output_5_we0;
output  [31:0] output_5_d0;
input  [31:0] output_5_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_0_ce0;
reg input_1_ce0;
reg input_2_ce0;
reg input_3_ce0;
reg input_4_ce0;
reg input_5_ce0;
reg[7:0] output_0_address0;
reg output_0_ce0;
reg output_0_we0;
reg[7:0] output_1_address0;
reg output_1_ce0;
reg output_1_we0;
reg[7:0] output_2_address0;
reg output_2_ce0;
reg output_2_we0;
reg[7:0] output_3_address0;
reg output_3_ce0;
reg output_3_we0;
reg[7:0] output_4_address0;
reg output_4_ce0;
reg output_4_we0;
reg[7:0] output_5_address0;
reg output_5_ce0;
reg output_5_we0;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [9:0] indvar_flatten65_reg_254;
reg   [3:0] h_0_reg_265;
reg   [6:0] indvar_flatten31_reg_277;
reg   [3:0] w_0_reg_288;
reg   [3:0] indvar_flatten_reg_300;
reg   [1:0] i_0_reg_311;
reg   [1:0] j_0_reg_323;
wire   [4:0] shl_ln_fu_365_p3;
reg   [4:0] shl_ln_reg_1627;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state9_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [4:0] add_ln59_fu_377_p2;
reg   [4:0] add_ln59_reg_1632;
wire   [0:0] icmp_ln49_fu_383_p2;
reg   [0:0] icmp_ln49_reg_1637;
wire   [9:0] add_ln49_fu_389_p2;
reg   [9:0] add_ln49_reg_1641;
reg    ap_enable_reg_pp0_iter0;
wire   [3:0] h_fu_395_p2;
reg   [3:0] h_reg_1646;
wire   [0:0] icmp_ln50_fu_401_p2;
reg   [0:0] icmp_ln50_reg_1652;
wire   [3:0] select_ln49_fu_407_p3;
reg   [3:0] select_ln49_reg_1664;
wire   [0:0] xor_ln49_fu_415_p2;
reg   [0:0] xor_ln49_reg_1669;
wire   [0:0] icmp_ln51_fu_421_p2;
reg   [0:0] icmp_ln51_reg_1675;
wire   [0:0] and_ln49_2_fu_427_p2;
reg   [0:0] and_ln49_2_reg_1680;
wire   [3:0] w_fu_433_p2;
reg   [3:0] w_reg_1689;
wire   [3:0] add_ln51_1_fu_439_p2;
reg   [3:0] add_ln51_1_reg_1695;
wire   [6:0] add_ln50_1_fu_445_p2;
reg   [6:0] add_ln50_1_reg_1700;
wire   [3:0] select_ln49_2_fu_464_p3;
reg   [3:0] select_ln49_2_reg_1705;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_pp0_stage1_11001;
wire   [3:0] select_ln50_2_fu_567_p3;
reg   [3:0] select_ln50_2_reg_1710;
reg   [7:0] output_0_addr_reg_1715;
reg   [7:0] output_1_addr_reg_1720;
reg   [7:0] output_2_addr_reg_1725;
reg   [7:0] output_3_addr_reg_1730;
reg   [7:0] output_4_addr_reg_1735;
reg   [7:0] output_5_addr_reg_1740;
wire   [4:0] select_ln51_2_fu_667_p3;
reg   [4:0] select_ln51_2_reg_1745;
wire   [1:0] select_ln51_3_fu_675_p3;
reg   [1:0] select_ln51_3_reg_1751;
wire   [4:0] add_ln59_1_fu_691_p2;
reg   [4:0] add_ln59_1_reg_1756;
wire   [0:0] or_ln61_fu_697_p2;
reg   [0:0] or_ln61_reg_1761;
wire   [1:0] j_fu_703_p2;
reg   [1:0] j_reg_1771;
wire   [3:0] select_ln51_4_fu_709_p3;
reg   [3:0] select_ln51_4_reg_1776;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state4_pp0_stage2_iter0;
wire    ap_block_pp0_stage2_11001;
wire   [31:0] select_ln61_fu_763_p3;
reg   [31:0] select_ln61_reg_1811;
wire   [31:0] select_ln61_1_fu_770_p3;
reg   [31:0] select_ln61_1_reg_1818;
wire   [31:0] select_ln61_2_fu_777_p3;
reg   [31:0] select_ln61_2_reg_1825;
wire   [31:0] select_ln61_3_fu_784_p3;
reg   [31:0] select_ln61_3_reg_1832;
wire   [31:0] select_ln61_4_fu_791_p3;
reg   [31:0] select_ln61_4_reg_1839;
wire   [31:0] select_ln61_5_fu_798_p3;
reg   [31:0] select_ln61_5_reg_1846;
reg   [31:0] input_0_load_reg_1853;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state5_pp0_stage3_iter0;
wire    ap_block_pp0_stage3_11001;
reg   [31:0] input_1_load_reg_1860;
reg   [31:0] input_2_load_reg_1867;
reg   [31:0] input_3_load_reg_1874;
reg   [31:0] input_4_load_reg_1881;
reg   [31:0] input_5_load_reg_1888;
wire   [31:0] select_ln62_fu_846_p3;
reg   [31:0] select_ln62_reg_1895;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state6_pp0_stage4_iter0;
wire    ap_block_pp0_stage4_11001;
wire   [31:0] select_ln62_1_fu_894_p3;
reg   [31:0] select_ln62_1_reg_1902;
wire   [31:0] select_ln62_2_fu_942_p3;
reg   [31:0] select_ln62_2_reg_1909;
wire   [31:0] select_ln62_3_fu_990_p3;
reg   [31:0] select_ln62_3_reg_1916;
wire   [31:0] select_ln62_4_fu_1038_p3;
reg   [31:0] select_ln62_4_reg_1923;
wire   [31:0] select_ln62_5_fu_1086_p3;
reg   [31:0] select_ln62_5_reg_1930;
wire   [31:0] select_ln63_fu_1175_p3;
reg   [31:0] select_ln63_reg_1937;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_block_state8_pp0_stage6_iter0;
wire    ap_block_pp0_stage6_11001;
wire   [31:0] select_ln63_1_fu_1263_p3;
reg   [31:0] select_ln63_1_reg_1942;
wire   [31:0] select_ln63_2_fu_1351_p3;
reg   [31:0] select_ln63_2_reg_1947;
wire   [31:0] select_ln63_3_fu_1439_p3;
reg   [31:0] select_ln63_3_reg_1952;
wire   [31:0] select_ln63_4_fu_1527_p3;
reg   [31:0] select_ln63_4_reg_1957;
wire   [31:0] select_ln63_5_fu_1615_p3;
reg   [31:0] select_ln63_5_reg_1962;
wire   [6:0] select_ln50_4_fu_1621_p3;
reg   [6:0] select_ln50_4_reg_1967;
reg    ap_block_state1;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage6_subdone;
reg   [9:0] ap_phi_mux_indvar_flatten65_phi_fu_258_p4;
wire    ap_block_pp0_stage0;
reg   [3:0] ap_phi_mux_h_0_phi_fu_269_p4;
reg   [6:0] ap_phi_mux_indvar_flatten31_phi_fu_281_p4;
reg   [3:0] ap_phi_mux_w_0_phi_fu_292_p4;
reg   [3:0] ap_phi_mux_indvar_flatten_phi_fu_304_p4;
reg   [1:0] ap_phi_mux_i_0_phi_fu_315_p4;
wire  signed [63:0] sext_ln61_fu_582_p1;
wire    ap_block_pp0_stage1;
wire  signed [63:0] sext_ln59_fu_753_p1;
wire    ap_block_pp0_stage2;
reg   [31:0] grp_fu_335_p0;
reg   [31:0] grp_fu_335_p1;
wire    ap_block_pp0_stage3;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_pp0_stage5;
reg   [31:0] grp_fu_340_p0;
reg   [31:0] grp_fu_340_p1;
reg   [31:0] grp_fu_345_p0;
reg   [31:0] grp_fu_345_p1;
reg   [31:0] grp_fu_350_p0;
reg   [31:0] grp_fu_350_p1;
reg   [31:0] grp_fu_355_p0;
reg   [31:0] grp_fu_355_p1;
reg   [31:0] grp_fu_360_p0;
reg   [31:0] grp_fu_360_p1;
wire   [4:0] zext_ln51_fu_373_p1;
wire   [4:0] shl_ln59_mid1_fu_451_p3;
wire   [7:0] tmp_30_fu_470_p3;
wire   [4:0] tmp_31_fu_482_p3;
wire   [8:0] zext_ln61_fu_478_p1;
wire   [8:0] zext_ln61_1_fu_490_p1;
wire   [4:0] shl_ln59_s_fu_500_p3;
wire   [0:0] trunc_ln51_fu_515_p1;
wire   [0:0] icmp_ln52_fu_530_p2;
wire   [0:0] or_ln50_fu_541_p2;
wire   [4:0] shl_ln59_1_mid1_fu_553_p3;
wire   [4:0] select_ln49_3_fu_508_p3;
wire   [8:0] zext_ln50_fu_572_p1;
wire   [8:0] sub_ln61_fu_494_p2;
wire   [8:0] add_ln61_fu_576_p2;
wire   [0:0] xor_ln50_fu_592_p2;
wire   [0:0] and_ln49_fu_519_p2;
wire   [0:0] or_ln50_1_fu_597_p2;
wire   [4:0] select_ln49_1_fu_458_p3;
wire   [4:0] select_ln49_4_fu_524_p3;
wire   [0:0] and_ln49_1_fu_536_p2;
wire   [1:0] select_ln50_fu_545_p3;
wire   [0:0] and_ln50_1_fu_615_p2;
wire   [0:0] or_ln51_fu_627_p2;
wire   [0:0] or_ln51_1_fu_632_p2;
wire   [1:0] i_fu_621_p2;
wire   [0:0] trunc_ln51_1_fu_649_p1;
wire   [0:0] and_ln50_fu_602_p2;
wire   [4:0] zext_ln51_1_fu_645_p1;
wire   [4:0] add_ln59_2_fu_661_p2;
wire   [4:0] select_ln50_3_fu_608_p3;
wire   [1:0] select_ln51_fu_637_p3;
wire   [4:0] select_ln50_1_fu_560_p3;
wire   [4:0] zext_ln52_fu_683_p1;
wire   [0:0] trunc_ln52_fu_687_p1;
wire   [0:0] select_ln51_1_fu_653_p3;
wire   [9:0] tmp_32_fu_716_p3;
wire   [6:0] tmp_33_fu_727_p3;
wire   [10:0] zext_ln59_fu_723_p1;
wire   [10:0] zext_ln59_1_fu_734_p1;
wire   [10:0] zext_ln59_2_fu_744_p1;
wire   [10:0] sub_ln59_fu_738_p2;
wire   [10:0] add_ln59_3_fu_747_p2;
wire    ap_block_pp0_stage4;
wire   [31:0] bitcast_ln62_fu_805_p1;
wire   [7:0] tmp_s_fu_808_p4;
wire   [22:0] trunc_ln62_fu_818_p1;
wire   [0:0] icmp_ln62_1_fu_828_p2;
wire   [0:0] icmp_ln62_fu_822_p2;
wire   [0:0] or_ln62_fu_834_p2;
wire   [0:0] grp_fu_335_p2;
wire   [0:0] and_ln62_fu_840_p2;
wire   [31:0] bitcast_ln62_1_fu_853_p1;
wire   [7:0] tmp_5_fu_856_p4;
wire   [22:0] trunc_ln62_1_fu_866_p1;
wire   [0:0] icmp_ln62_3_fu_876_p2;
wire   [0:0] icmp_ln62_2_fu_870_p2;
wire   [0:0] or_ln62_1_fu_882_p2;
wire   [0:0] grp_fu_340_p2;
wire   [0:0] and_ln62_1_fu_888_p2;
wire   [31:0] bitcast_ln62_2_fu_901_p1;
wire   [7:0] tmp_10_fu_904_p4;
wire   [22:0] trunc_ln62_2_fu_914_p1;
wire   [0:0] icmp_ln62_5_fu_924_p2;
wire   [0:0] icmp_ln62_4_fu_918_p2;
wire   [0:0] or_ln62_2_fu_930_p2;
wire   [0:0] grp_fu_345_p2;
wire   [0:0] and_ln62_2_fu_936_p2;
wire   [31:0] bitcast_ln62_3_fu_949_p1;
wire   [7:0] tmp_15_fu_952_p4;
wire   [22:0] trunc_ln62_3_fu_962_p1;
wire   [0:0] icmp_ln62_7_fu_972_p2;
wire   [0:0] icmp_ln62_6_fu_966_p2;
wire   [0:0] or_ln62_3_fu_978_p2;
wire   [0:0] grp_fu_350_p2;
wire   [0:0] and_ln62_3_fu_984_p2;
wire   [31:0] bitcast_ln62_4_fu_997_p1;
wire   [7:0] tmp_20_fu_1000_p4;
wire   [22:0] trunc_ln62_4_fu_1010_p1;
wire   [0:0] icmp_ln62_9_fu_1020_p2;
wire   [0:0] icmp_ln62_8_fu_1014_p2;
wire   [0:0] or_ln62_4_fu_1026_p2;
wire   [0:0] grp_fu_355_p2;
wire   [0:0] and_ln62_4_fu_1032_p2;
wire   [31:0] bitcast_ln62_5_fu_1045_p1;
wire   [7:0] tmp_25_fu_1048_p4;
wire   [22:0] trunc_ln62_5_fu_1058_p1;
wire   [0:0] icmp_ln62_11_fu_1068_p2;
wire   [0:0] icmp_ln62_10_fu_1062_p2;
wire   [0:0] or_ln62_5_fu_1074_p2;
wire   [0:0] grp_fu_360_p2;
wire   [0:0] and_ln62_5_fu_1080_p2;
wire    ap_block_pp0_stage6;
wire   [31:0] bitcast_ln63_fu_1093_p1;
wire   [31:0] bitcast_ln63_1_fu_1110_p1;
wire   [7:0] tmp_2_fu_1096_p4;
wire   [22:0] trunc_ln63_fu_1106_p1;
wire   [0:0] icmp_ln63_1_fu_1133_p2;
wire   [0:0] icmp_ln63_fu_1127_p2;
wire   [7:0] tmp_3_fu_1113_p4;
wire   [22:0] trunc_ln63_1_fu_1123_p1;
wire   [0:0] icmp_ln63_3_fu_1151_p2;
wire   [0:0] icmp_ln63_2_fu_1145_p2;
wire   [0:0] or_ln63_fu_1139_p2;
wire   [0:0] or_ln63_1_fu_1157_p2;
wire   [0:0] and_ln63_fu_1163_p2;
wire   [0:0] and_ln63_1_fu_1169_p2;
wire   [31:0] bitcast_ln63_2_fu_1181_p1;
wire   [31:0] bitcast_ln63_3_fu_1198_p1;
wire   [7:0] tmp_7_fu_1184_p4;
wire   [22:0] trunc_ln63_2_fu_1194_p1;
wire   [0:0] icmp_ln63_5_fu_1221_p2;
wire   [0:0] icmp_ln63_4_fu_1215_p2;
wire   [7:0] tmp_8_fu_1201_p4;
wire   [22:0] trunc_ln63_3_fu_1211_p1;
wire   [0:0] icmp_ln63_7_fu_1239_p2;
wire   [0:0] icmp_ln63_6_fu_1233_p2;
wire   [0:0] or_ln63_2_fu_1227_p2;
wire   [0:0] or_ln63_3_fu_1245_p2;
wire   [0:0] and_ln63_2_fu_1251_p2;
wire   [0:0] and_ln63_3_fu_1257_p2;
wire   [31:0] bitcast_ln63_4_fu_1269_p1;
wire   [31:0] bitcast_ln63_5_fu_1286_p1;
wire   [7:0] tmp_12_fu_1272_p4;
wire   [22:0] trunc_ln63_4_fu_1282_p1;
wire   [0:0] icmp_ln63_9_fu_1309_p2;
wire   [0:0] icmp_ln63_8_fu_1303_p2;
wire   [7:0] tmp_13_fu_1289_p4;
wire   [22:0] trunc_ln63_5_fu_1299_p1;
wire   [0:0] icmp_ln63_11_fu_1327_p2;
wire   [0:0] icmp_ln63_10_fu_1321_p2;
wire   [0:0] or_ln63_4_fu_1315_p2;
wire   [0:0] or_ln63_5_fu_1333_p2;
wire   [0:0] and_ln63_4_fu_1339_p2;
wire   [0:0] and_ln63_5_fu_1345_p2;
wire   [31:0] bitcast_ln63_6_fu_1357_p1;
wire   [31:0] bitcast_ln63_7_fu_1374_p1;
wire   [7:0] tmp_17_fu_1360_p4;
wire   [22:0] trunc_ln63_6_fu_1370_p1;
wire   [0:0] icmp_ln63_13_fu_1397_p2;
wire   [0:0] icmp_ln63_12_fu_1391_p2;
wire   [7:0] tmp_18_fu_1377_p4;
wire   [22:0] trunc_ln63_7_fu_1387_p1;
wire   [0:0] icmp_ln63_15_fu_1415_p2;
wire   [0:0] icmp_ln63_14_fu_1409_p2;
wire   [0:0] or_ln63_6_fu_1403_p2;
wire   [0:0] or_ln63_7_fu_1421_p2;
wire   [0:0] and_ln63_6_fu_1427_p2;
wire   [0:0] and_ln63_7_fu_1433_p2;
wire   [31:0] bitcast_ln63_8_fu_1445_p1;
wire   [31:0] bitcast_ln63_9_fu_1462_p1;
wire   [7:0] tmp_22_fu_1448_p4;
wire   [22:0] trunc_ln63_8_fu_1458_p1;
wire   [0:0] icmp_ln63_17_fu_1485_p2;
wire   [0:0] icmp_ln63_16_fu_1479_p2;
wire   [7:0] tmp_23_fu_1465_p4;
wire   [22:0] trunc_ln63_9_fu_1475_p1;
wire   [0:0] icmp_ln63_19_fu_1503_p2;
wire   [0:0] icmp_ln63_18_fu_1497_p2;
wire   [0:0] or_ln63_8_fu_1491_p2;
wire   [0:0] or_ln63_9_fu_1509_p2;
wire   [0:0] and_ln63_8_fu_1515_p2;
wire   [0:0] and_ln63_9_fu_1521_p2;
wire   [31:0] bitcast_ln63_10_fu_1533_p1;
wire   [31:0] bitcast_ln63_11_fu_1550_p1;
wire   [7:0] tmp_27_fu_1536_p4;
wire   [22:0] trunc_ln63_10_fu_1546_p1;
wire   [0:0] icmp_ln63_21_fu_1573_p2;
wire   [0:0] icmp_ln63_20_fu_1567_p2;
wire   [7:0] tmp_28_fu_1553_p4;
wire   [22:0] trunc_ln63_11_fu_1563_p1;
wire   [0:0] icmp_ln63_23_fu_1591_p2;
wire   [0:0] icmp_ln63_22_fu_1585_p2;
wire   [0:0] or_ln63_10_fu_1579_p2;
wire   [0:0] or_ln63_11_fu_1597_p2;
wire   [0:0] and_ln63_10_fu_1603_p2;
wire   [0:0] and_ln63_11_fu_1609_p2;
wire    ap_block_pp0_stage3_00001;
wire    ap_block_state7_pp0_stage5_iter0;
wire    ap_block_pp0_stage5_00001;
wire    ap_CS_fsm_state10;
reg   [8:0] ap_NS_fsm;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_pp0_stage3_subdone;
wire    ap_block_pp0_stage4_subdone;
wire    ap_block_pp0_stage5_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 9'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

LeNet_fcmp_32ns_3jbC #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
LeNet_fcmp_32ns_3jbC_U46(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_335_p0),
    .din1(grp_fu_335_p1),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_335_p2)
);

LeNet_fcmp_32ns_3jbC #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
LeNet_fcmp_32ns_3jbC_U47(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_340_p0),
    .din1(grp_fu_340_p1),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_340_p2)
);

LeNet_fcmp_32ns_3jbC #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
LeNet_fcmp_32ns_3jbC_U48(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_345_p0),
    .din1(grp_fu_345_p1),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_345_p2)
);

LeNet_fcmp_32ns_3jbC #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
LeNet_fcmp_32ns_3jbC_U49(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_350_p0),
    .din1(grp_fu_350_p1),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_350_p2)
);

LeNet_fcmp_32ns_3jbC #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
LeNet_fcmp_32ns_3jbC_U50(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_355_p0),
    .din1(grp_fu_355_p1),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_355_p2)
);

LeNet_fcmp_32ns_3jbC #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
LeNet_fcmp_32ns_3jbC_U51(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_360_p0),
    .din1(grp_fu_360_p1),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_360_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state10)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage6_subdone) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln49_reg_1637 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        h_0_reg_265 <= select_ln49_2_reg_1705;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        h_0_reg_265 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln49_reg_1637 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_0_reg_311 <= select_ln51_3_reg_1751;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_311 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln49_reg_1637 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten31_reg_277 <= select_ln50_4_reg_1967;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten31_reg_277 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln49_reg_1637 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten65_reg_254 <= add_ln49_reg_1641;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten65_reg_254 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln49_reg_1637 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_reg_300 <= select_ln51_4_reg_1776;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_300 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln49_reg_1637 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        j_0_reg_323 <= j_reg_1771;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        j_0_reg_323 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln49_reg_1637 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        w_0_reg_288 <= select_ln50_2_reg_1710;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        w_0_reg_288 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln49_reg_1641 <= add_ln49_fu_389_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln49_fu_383_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln50_1_reg_1700 <= add_ln50_1_fu_445_p2;
        add_ln51_1_reg_1695 <= add_ln51_1_fu_439_p2;
        and_ln49_2_reg_1680 <= and_ln49_2_fu_427_p2;
        h_reg_1646 <= h_fu_395_p2;
        icmp_ln50_reg_1652 <= icmp_ln50_fu_401_p2;
        icmp_ln51_reg_1675 <= icmp_ln51_fu_421_p2;
        select_ln49_reg_1664 <= select_ln49_fu_407_p3;
        w_reg_1689 <= w_fu_433_p2;
        xor_ln49_reg_1669 <= xor_ln49_fu_415_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln49_reg_1637 == 1'd0))) begin
        add_ln59_1_reg_1756 <= add_ln59_1_fu_691_p2;
        or_ln61_reg_1761 <= or_ln61_fu_697_p2;
        output_0_addr_reg_1715 <= sext_ln61_fu_582_p1;
        output_1_addr_reg_1720 <= sext_ln61_fu_582_p1;
        output_2_addr_reg_1725 <= sext_ln61_fu_582_p1;
        output_3_addr_reg_1730 <= sext_ln61_fu_582_p1;
        output_4_addr_reg_1735 <= sext_ln61_fu_582_p1;
        output_5_addr_reg_1740 <= sext_ln61_fu_582_p1;
        select_ln51_2_reg_1745 <= select_ln51_2_fu_667_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln59_reg_1632 <= add_ln59_fu_377_p2;
        icmp_ln49_reg_1637 <= icmp_ln49_fu_383_p2;
        shl_ln_reg_1627[4 : 1] <= shl_ln_fu_365_p3[4 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (icmp_ln49_reg_1637 == 1'd0))) begin
        input_0_load_reg_1853 <= input_0_q0;
        input_1_load_reg_1860 <= input_1_q0;
        input_2_load_reg_1867 <= input_2_q0;
        input_3_load_reg_1874 <= input_3_q0;
        input_4_load_reg_1881 <= input_4_q0;
        input_5_load_reg_1888 <= input_5_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln49_reg_1637 == 1'd0))) begin
        j_reg_1771 <= j_fu_703_p2;
        select_ln49_2_reg_1705 <= select_ln49_2_fu_464_p3;
        select_ln50_2_reg_1710 <= select_ln50_2_fu_567_p3;
        select_ln51_3_reg_1751 <= select_ln51_3_fu_675_p3;
        select_ln51_4_reg_1776 <= select_ln51_4_fu_709_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln49_reg_1637 == 1'd0))) begin
        select_ln50_4_reg_1967 <= select_ln50_4_fu_1621_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln49_reg_1637 == 1'd0))) begin
        select_ln61_1_reg_1818 <= select_ln61_1_fu_770_p3;
        select_ln61_2_reg_1825 <= select_ln61_2_fu_777_p3;
        select_ln61_3_reg_1832 <= select_ln61_3_fu_784_p3;
        select_ln61_4_reg_1839 <= select_ln61_4_fu_791_p3;
        select_ln61_5_reg_1846 <= select_ln61_5_fu_798_p3;
        select_ln61_reg_1811 <= select_ln61_fu_763_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (icmp_ln49_reg_1637 == 1'd0))) begin
        select_ln62_1_reg_1902 <= select_ln62_1_fu_894_p3;
        select_ln62_2_reg_1909 <= select_ln62_2_fu_942_p3;
        select_ln62_3_reg_1916 <= select_ln62_3_fu_990_p3;
        select_ln62_4_reg_1923 <= select_ln62_4_fu_1038_p3;
        select_ln62_5_reg_1930 <= select_ln62_5_fu_1086_p3;
        select_ln62_reg_1895 <= select_ln62_fu_846_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6) & (icmp_ln49_reg_1637 == 1'd0))) begin
        select_ln63_1_reg_1942 <= select_ln63_1_fu_1263_p3;
        select_ln63_2_reg_1947 <= select_ln63_2_fu_1351_p3;
        select_ln63_3_reg_1952 <= select_ln63_3_fu_1439_p3;
        select_ln63_4_reg_1957 <= select_ln63_4_fu_1527_p3;
        select_ln63_5_reg_1962 <= select_ln63_5_fu_1615_p3;
        select_ln63_reg_1937 <= select_ln63_fu_1175_p3;
    end
end

always @ (*) begin
    if ((icmp_ln49_fu_383_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln49_reg_1637 == 1'd0))) begin
        ap_phi_mux_h_0_phi_fu_269_p4 = select_ln49_2_reg_1705;
    end else begin
        ap_phi_mux_h_0_phi_fu_269_p4 = h_0_reg_265;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln49_reg_1637 == 1'd0))) begin
        ap_phi_mux_i_0_phi_fu_315_p4 = select_ln51_3_reg_1751;
    end else begin
        ap_phi_mux_i_0_phi_fu_315_p4 = i_0_reg_311;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln49_reg_1637 == 1'd0))) begin
        ap_phi_mux_indvar_flatten31_phi_fu_281_p4 = select_ln50_4_reg_1967;
    end else begin
        ap_phi_mux_indvar_flatten31_phi_fu_281_p4 = indvar_flatten31_reg_277;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln49_reg_1637 == 1'd0))) begin
        ap_phi_mux_indvar_flatten65_phi_fu_258_p4 = add_ln49_reg_1641;
    end else begin
        ap_phi_mux_indvar_flatten65_phi_fu_258_p4 = indvar_flatten65_reg_254;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln49_reg_1637 == 1'd0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_304_p4 = select_ln51_4_reg_1776;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_304_p4 = indvar_flatten_reg_300;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln49_reg_1637 == 1'd0))) begin
        ap_phi_mux_w_0_phi_fu_292_p4 = select_ln50_2_reg_1710;
    end else begin
        ap_phi_mux_w_0_phi_fu_292_p4 = w_0_reg_288;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            grp_fu_335_p0 = select_ln62_reg_1895;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            grp_fu_335_p0 = select_ln61_reg_1811;
        end else begin
            grp_fu_335_p0 = 'bx;
        end
    end else begin
        grp_fu_335_p0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            grp_fu_335_p1 = input_0_load_reg_1853;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            grp_fu_335_p1 = 32'd0;
        end else begin
            grp_fu_335_p1 = 'bx;
        end
    end else begin
        grp_fu_335_p1 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            grp_fu_340_p0 = select_ln62_1_reg_1902;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            grp_fu_340_p0 = select_ln61_1_reg_1818;
        end else begin
            grp_fu_340_p0 = 'bx;
        end
    end else begin
        grp_fu_340_p0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            grp_fu_340_p1 = input_1_load_reg_1860;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            grp_fu_340_p1 = 32'd0;
        end else begin
            grp_fu_340_p1 = 'bx;
        end
    end else begin
        grp_fu_340_p1 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            grp_fu_345_p0 = select_ln62_2_reg_1909;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            grp_fu_345_p0 = select_ln61_2_reg_1825;
        end else begin
            grp_fu_345_p0 = 'bx;
        end
    end else begin
        grp_fu_345_p0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            grp_fu_345_p1 = input_2_load_reg_1867;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            grp_fu_345_p1 = 32'd0;
        end else begin
            grp_fu_345_p1 = 'bx;
        end
    end else begin
        grp_fu_345_p1 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            grp_fu_350_p0 = select_ln62_3_reg_1916;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            grp_fu_350_p0 = select_ln61_3_reg_1832;
        end else begin
            grp_fu_350_p0 = 'bx;
        end
    end else begin
        grp_fu_350_p0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            grp_fu_350_p1 = input_3_load_reg_1874;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            grp_fu_350_p1 = 32'd0;
        end else begin
            grp_fu_350_p1 = 'bx;
        end
    end else begin
        grp_fu_350_p1 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            grp_fu_355_p0 = select_ln62_4_reg_1923;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            grp_fu_355_p0 = select_ln61_4_reg_1839;
        end else begin
            grp_fu_355_p0 = 'bx;
        end
    end else begin
        grp_fu_355_p0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            grp_fu_355_p1 = input_4_load_reg_1881;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            grp_fu_355_p1 = 32'd0;
        end else begin
            grp_fu_355_p1 = 'bx;
        end
    end else begin
        grp_fu_355_p1 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            grp_fu_360_p0 = select_ln62_5_reg_1930;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            grp_fu_360_p0 = select_ln61_5_reg_1846;
        end else begin
            grp_fu_360_p0 = 'bx;
        end
    end else begin
        grp_fu_360_p0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            grp_fu_360_p1 = input_5_load_reg_1888;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            grp_fu_360_p1 = 32'd0;
        end else begin
            grp_fu_360_p1 = 'bx;
        end
    end else begin
        grp_fu_360_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        input_0_ce0 = 1'b1;
    end else begin
        input_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        input_1_ce0 = 1'b1;
    end else begin
        input_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        input_2_ce0 = 1'b1;
    end else begin
        input_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        input_3_ce0 = 1'b1;
    end else begin
        input_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        input_4_ce0 = 1'b1;
    end else begin
        input_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        input_5_ce0 = 1'b1;
    end else begin
        input_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_0_address0 = output_0_addr_reg_1715;
    end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        output_0_address0 = sext_ln61_fu_582_p1;
    end else begin
        output_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        output_0_ce0 = 1'b1;
    end else begin
        output_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln49_reg_1637 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_0_we0 = 1'b1;
    end else begin
        output_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_1_address0 = output_1_addr_reg_1720;
    end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        output_1_address0 = sext_ln61_fu_582_p1;
    end else begin
        output_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        output_1_ce0 = 1'b1;
    end else begin
        output_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln49_reg_1637 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_1_we0 = 1'b1;
    end else begin
        output_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_2_address0 = output_2_addr_reg_1725;
    end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        output_2_address0 = sext_ln61_fu_582_p1;
    end else begin
        output_2_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        output_2_ce0 = 1'b1;
    end else begin
        output_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln49_reg_1637 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_2_we0 = 1'b1;
    end else begin
        output_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_3_address0 = output_3_addr_reg_1730;
    end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        output_3_address0 = sext_ln61_fu_582_p1;
    end else begin
        output_3_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        output_3_ce0 = 1'b1;
    end else begin
        output_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln49_reg_1637 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_3_we0 = 1'b1;
    end else begin
        output_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_4_address0 = output_4_addr_reg_1735;
    end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        output_4_address0 = sext_ln61_fu_582_p1;
    end else begin
        output_4_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        output_4_ce0 = 1'b1;
    end else begin
        output_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln49_reg_1637 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_4_we0 = 1'b1;
    end else begin
        output_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_5_address0 = output_5_addr_reg_1740;
    end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        output_5_address0 = sext_ln61_fu_582_p1;
    end else begin
        output_5_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        output_5_ce0 = 1'b1;
    end else begin
        output_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln49_reg_1637 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_5_we0 = 1'b1;
    end else begin
        output_5_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln49_fu_383_p2 == 1'd1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln49_fu_383_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln49_fu_389_p2 = (ap_phi_mux_indvar_flatten65_phi_fu_258_p4 + 10'd1);

assign add_ln50_1_fu_445_p2 = (7'd1 + ap_phi_mux_indvar_flatten31_phi_fu_281_p4);

assign add_ln51_1_fu_439_p2 = (4'd1 + ap_phi_mux_indvar_flatten_phi_fu_304_p4);

assign add_ln59_1_fu_691_p2 = (select_ln50_1_fu_560_p3 + zext_ln52_fu_683_p1);

assign add_ln59_2_fu_661_p2 = (select_ln49_1_fu_458_p3 + zext_ln51_1_fu_645_p1);

assign add_ln59_3_fu_747_p2 = (zext_ln59_2_fu_744_p1 + sub_ln59_fu_738_p2);

assign add_ln59_fu_377_p2 = (zext_ln51_fu_373_p1 + shl_ln_fu_365_p3);

assign add_ln61_fu_576_p2 = (zext_ln50_fu_572_p1 + sub_ln61_fu_494_p2);

assign and_ln49_1_fu_536_p2 = (xor_ln49_reg_1669 & icmp_ln52_fu_530_p2);

assign and_ln49_2_fu_427_p2 = (xor_ln49_fu_415_p2 & icmp_ln51_fu_421_p2);

assign and_ln49_fu_519_p2 = (xor_ln49_reg_1669 & trunc_ln51_fu_515_p1);

assign and_ln50_1_fu_615_p2 = (or_ln50_1_fu_597_p2 & and_ln49_1_fu_536_p2);

assign and_ln50_fu_602_p2 = (or_ln50_1_fu_597_p2 & and_ln49_fu_519_p2);

assign and_ln62_1_fu_888_p2 = (or_ln62_1_fu_882_p2 & grp_fu_340_p2);

assign and_ln62_2_fu_936_p2 = (or_ln62_2_fu_930_p2 & grp_fu_345_p2);

assign and_ln62_3_fu_984_p2 = (or_ln62_3_fu_978_p2 & grp_fu_350_p2);

assign and_ln62_4_fu_1032_p2 = (or_ln62_4_fu_1026_p2 & grp_fu_355_p2);

assign and_ln62_5_fu_1080_p2 = (or_ln62_5_fu_1074_p2 & grp_fu_360_p2);

assign and_ln62_fu_840_p2 = (or_ln62_fu_834_p2 & grp_fu_335_p2);

assign and_ln63_10_fu_1603_p2 = (or_ln63_11_fu_1597_p2 & or_ln63_10_fu_1579_p2);

assign and_ln63_11_fu_1609_p2 = (grp_fu_360_p2 & and_ln63_10_fu_1603_p2);

assign and_ln63_1_fu_1169_p2 = (grp_fu_335_p2 & and_ln63_fu_1163_p2);

assign and_ln63_2_fu_1251_p2 = (or_ln63_3_fu_1245_p2 & or_ln63_2_fu_1227_p2);

assign and_ln63_3_fu_1257_p2 = (grp_fu_340_p2 & and_ln63_2_fu_1251_p2);

assign and_ln63_4_fu_1339_p2 = (or_ln63_5_fu_1333_p2 & or_ln63_4_fu_1315_p2);

assign and_ln63_5_fu_1345_p2 = (grp_fu_345_p2 & and_ln63_4_fu_1339_p2);

assign and_ln63_6_fu_1427_p2 = (or_ln63_7_fu_1421_p2 & or_ln63_6_fu_1403_p2);

assign and_ln63_7_fu_1433_p2 = (grp_fu_350_p2 & and_ln63_6_fu_1427_p2);

assign and_ln63_8_fu_1515_p2 = (or_ln63_9_fu_1509_p2 & or_ln63_8_fu_1491_p2);

assign and_ln63_9_fu_1521_p2 = (grp_fu_355_p2 & and_ln63_8_fu_1515_p2);

assign and_ln63_fu_1163_p2 = (or_ln63_fu_1139_p2 & or_ln63_1_fu_1157_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd8];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign bitcast_ln62_1_fu_853_p1 = select_ln61_1_reg_1818;

assign bitcast_ln62_2_fu_901_p1 = select_ln61_2_reg_1825;

assign bitcast_ln62_3_fu_949_p1 = select_ln61_3_reg_1832;

assign bitcast_ln62_4_fu_997_p1 = select_ln61_4_reg_1839;

assign bitcast_ln62_5_fu_1045_p1 = select_ln61_5_reg_1846;

assign bitcast_ln62_fu_805_p1 = select_ln61_reg_1811;

assign bitcast_ln63_10_fu_1533_p1 = select_ln62_5_reg_1930;

assign bitcast_ln63_11_fu_1550_p1 = input_5_load_reg_1888;

assign bitcast_ln63_1_fu_1110_p1 = input_0_load_reg_1853;

assign bitcast_ln63_2_fu_1181_p1 = select_ln62_1_reg_1902;

assign bitcast_ln63_3_fu_1198_p1 = input_1_load_reg_1860;

assign bitcast_ln63_4_fu_1269_p1 = select_ln62_2_reg_1909;

assign bitcast_ln63_5_fu_1286_p1 = input_2_load_reg_1867;

assign bitcast_ln63_6_fu_1357_p1 = select_ln62_3_reg_1916;

assign bitcast_ln63_7_fu_1374_p1 = input_3_load_reg_1874;

assign bitcast_ln63_8_fu_1445_p1 = select_ln62_4_reg_1923;

assign bitcast_ln63_9_fu_1462_p1 = input_4_load_reg_1881;

assign bitcast_ln63_fu_1093_p1 = select_ln62_reg_1895;

assign h_fu_395_p2 = (4'd1 + ap_phi_mux_h_0_phi_fu_269_p4);

assign i_fu_621_p2 = (2'd1 + select_ln50_fu_545_p3);

assign icmp_ln49_fu_383_p2 = ((ap_phi_mux_indvar_flatten65_phi_fu_258_p4 == 10'd784) ? 1'b1 : 1'b0);

assign icmp_ln50_fu_401_p2 = ((ap_phi_mux_indvar_flatten31_phi_fu_281_p4 == 7'd56) ? 1'b1 : 1'b0);

assign icmp_ln51_fu_421_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_304_p4 == 4'd4) ? 1'b1 : 1'b0);

assign icmp_ln52_fu_530_p2 = ((j_0_reg_323 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln62_10_fu_1062_p2 = ((tmp_25_fu_1048_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln62_11_fu_1068_p2 = ((trunc_ln62_5_fu_1058_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln62_1_fu_828_p2 = ((trunc_ln62_fu_818_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln62_2_fu_870_p2 = ((tmp_5_fu_856_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln62_3_fu_876_p2 = ((trunc_ln62_1_fu_866_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln62_4_fu_918_p2 = ((tmp_10_fu_904_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln62_5_fu_924_p2 = ((trunc_ln62_2_fu_914_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln62_6_fu_966_p2 = ((tmp_15_fu_952_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln62_7_fu_972_p2 = ((trunc_ln62_3_fu_962_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln62_8_fu_1014_p2 = ((tmp_20_fu_1000_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln62_9_fu_1020_p2 = ((trunc_ln62_4_fu_1010_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln62_fu_822_p2 = ((tmp_s_fu_808_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln63_10_fu_1321_p2 = ((tmp_13_fu_1289_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln63_11_fu_1327_p2 = ((trunc_ln63_5_fu_1299_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln63_12_fu_1391_p2 = ((tmp_17_fu_1360_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln63_13_fu_1397_p2 = ((trunc_ln63_6_fu_1370_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln63_14_fu_1409_p2 = ((tmp_18_fu_1377_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln63_15_fu_1415_p2 = ((trunc_ln63_7_fu_1387_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln63_16_fu_1479_p2 = ((tmp_22_fu_1448_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln63_17_fu_1485_p2 = ((trunc_ln63_8_fu_1458_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln63_18_fu_1497_p2 = ((tmp_23_fu_1465_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln63_19_fu_1503_p2 = ((trunc_ln63_9_fu_1475_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln63_1_fu_1133_p2 = ((trunc_ln63_fu_1106_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln63_20_fu_1567_p2 = ((tmp_27_fu_1536_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln63_21_fu_1573_p2 = ((trunc_ln63_10_fu_1546_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln63_22_fu_1585_p2 = ((tmp_28_fu_1553_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln63_23_fu_1591_p2 = ((trunc_ln63_11_fu_1563_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln63_2_fu_1145_p2 = ((tmp_3_fu_1113_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln63_3_fu_1151_p2 = ((trunc_ln63_1_fu_1123_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln63_4_fu_1215_p2 = ((tmp_7_fu_1184_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln63_5_fu_1221_p2 = ((trunc_ln63_2_fu_1194_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln63_6_fu_1233_p2 = ((tmp_8_fu_1201_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln63_7_fu_1239_p2 = ((trunc_ln63_3_fu_1211_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln63_8_fu_1303_p2 = ((tmp_12_fu_1272_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln63_9_fu_1309_p2 = ((trunc_ln63_4_fu_1282_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln63_fu_1127_p2 = ((tmp_2_fu_1096_p4 != 8'd255) ? 1'b1 : 1'b0);

assign input_0_address0 = sext_ln59_fu_753_p1;

assign input_1_address0 = sext_ln59_fu_753_p1;

assign input_2_address0 = sext_ln59_fu_753_p1;

assign input_3_address0 = sext_ln59_fu_753_p1;

assign input_4_address0 = sext_ln59_fu_753_p1;

assign input_5_address0 = sext_ln59_fu_753_p1;

assign j_fu_703_p2 = (2'd1 + select_ln51_fu_637_p3);

assign or_ln50_1_fu_597_p2 = (xor_ln50_fu_592_p2 | icmp_ln50_reg_1652);

assign or_ln50_fu_541_p2 = (icmp_ln50_reg_1652 | and_ln49_2_reg_1680);

assign or_ln51_1_fu_632_p2 = (or_ln51_fu_627_p2 | icmp_ln50_reg_1652);

assign or_ln51_fu_627_p2 = (and_ln50_1_fu_615_p2 | and_ln49_2_reg_1680);

assign or_ln61_fu_697_p2 = (trunc_ln52_fu_687_p1 | select_ln51_1_fu_653_p3);

assign or_ln62_1_fu_882_p2 = (icmp_ln62_3_fu_876_p2 | icmp_ln62_2_fu_870_p2);

assign or_ln62_2_fu_930_p2 = (icmp_ln62_5_fu_924_p2 | icmp_ln62_4_fu_918_p2);

assign or_ln62_3_fu_978_p2 = (icmp_ln62_7_fu_972_p2 | icmp_ln62_6_fu_966_p2);

assign or_ln62_4_fu_1026_p2 = (icmp_ln62_9_fu_1020_p2 | icmp_ln62_8_fu_1014_p2);

assign or_ln62_5_fu_1074_p2 = (icmp_ln62_11_fu_1068_p2 | icmp_ln62_10_fu_1062_p2);

assign or_ln62_fu_834_p2 = (icmp_ln62_fu_822_p2 | icmp_ln62_1_fu_828_p2);

assign or_ln63_10_fu_1579_p2 = (icmp_ln63_21_fu_1573_p2 | icmp_ln63_20_fu_1567_p2);

assign or_ln63_11_fu_1597_p2 = (icmp_ln63_23_fu_1591_p2 | icmp_ln63_22_fu_1585_p2);

assign or_ln63_1_fu_1157_p2 = (icmp_ln63_3_fu_1151_p2 | icmp_ln63_2_fu_1145_p2);

assign or_ln63_2_fu_1227_p2 = (icmp_ln63_5_fu_1221_p2 | icmp_ln63_4_fu_1215_p2);

assign or_ln63_3_fu_1245_p2 = (icmp_ln63_7_fu_1239_p2 | icmp_ln63_6_fu_1233_p2);

assign or_ln63_4_fu_1315_p2 = (icmp_ln63_9_fu_1309_p2 | icmp_ln63_8_fu_1303_p2);

assign or_ln63_5_fu_1333_p2 = (icmp_ln63_11_fu_1327_p2 | icmp_ln63_10_fu_1321_p2);

assign or_ln63_6_fu_1403_p2 = (icmp_ln63_13_fu_1397_p2 | icmp_ln63_12_fu_1391_p2);

assign or_ln63_7_fu_1421_p2 = (icmp_ln63_15_fu_1415_p2 | icmp_ln63_14_fu_1409_p2);

assign or_ln63_8_fu_1491_p2 = (icmp_ln63_17_fu_1485_p2 | icmp_ln63_16_fu_1479_p2);

assign or_ln63_9_fu_1509_p2 = (icmp_ln63_19_fu_1503_p2 | icmp_ln63_18_fu_1497_p2);

assign or_ln63_fu_1139_p2 = (icmp_ln63_fu_1127_p2 | icmp_ln63_1_fu_1133_p2);

assign output_0_d0 = select_ln63_reg_1937;

assign output_1_d0 = select_ln63_1_reg_1942;

assign output_2_d0 = select_ln63_2_reg_1947;

assign output_3_d0 = select_ln63_3_reg_1952;

assign output_4_d0 = select_ln63_4_reg_1957;

assign output_5_d0 = select_ln63_5_reg_1962;

assign select_ln49_1_fu_458_p3 = ((icmp_ln50_reg_1652[0:0] === 1'b1) ? shl_ln59_mid1_fu_451_p3 : shl_ln_reg_1627);

assign select_ln49_2_fu_464_p3 = ((icmp_ln50_reg_1652[0:0] === 1'b1) ? h_reg_1646 : h_0_reg_265);

assign select_ln49_3_fu_508_p3 = ((icmp_ln50_reg_1652[0:0] === 1'b1) ? 5'd0 : shl_ln59_s_fu_500_p3);

assign select_ln49_4_fu_524_p3 = ((icmp_ln50_reg_1652[0:0] === 1'b1) ? shl_ln59_mid1_fu_451_p3 : add_ln59_reg_1632);

assign select_ln49_fu_407_p3 = ((icmp_ln50_fu_401_p2[0:0] === 1'b1) ? 4'd0 : ap_phi_mux_w_0_phi_fu_292_p4);

assign select_ln50_1_fu_560_p3 = ((and_ln49_2_reg_1680[0:0] === 1'b1) ? shl_ln59_1_mid1_fu_553_p3 : select_ln49_3_fu_508_p3);

assign select_ln50_2_fu_567_p3 = ((and_ln49_2_reg_1680[0:0] === 1'b1) ? w_reg_1689 : select_ln49_reg_1664);

assign select_ln50_3_fu_608_p3 = ((and_ln49_2_reg_1680[0:0] === 1'b1) ? select_ln49_1_fu_458_p3 : select_ln49_4_fu_524_p3);

assign select_ln50_4_fu_1621_p3 = ((icmp_ln50_reg_1652[0:0] === 1'b1) ? 7'd1 : add_ln50_1_reg_1700);

assign select_ln50_fu_545_p3 = ((or_ln50_fu_541_p2[0:0] === 1'b1) ? 2'd0 : i_0_reg_311);

assign select_ln51_1_fu_653_p3 = ((and_ln50_1_fu_615_p2[0:0] === 1'b1) ? trunc_ln51_1_fu_649_p1 : and_ln50_fu_602_p2);

assign select_ln51_2_fu_667_p3 = ((and_ln50_1_fu_615_p2[0:0] === 1'b1) ? add_ln59_2_fu_661_p2 : select_ln50_3_fu_608_p3);

assign select_ln51_3_fu_675_p3 = ((and_ln50_1_fu_615_p2[0:0] === 1'b1) ? i_fu_621_p2 : select_ln50_fu_545_p3);

assign select_ln51_4_fu_709_p3 = ((or_ln50_fu_541_p2[0:0] === 1'b1) ? 4'd1 : add_ln51_1_reg_1695);

assign select_ln51_fu_637_p3 = ((or_ln51_1_fu_632_p2[0:0] === 1'b1) ? 2'd0 : j_0_reg_323);

assign select_ln61_1_fu_770_p3 = ((or_ln61_reg_1761[0:0] === 1'b1) ? output_1_q0 : 32'd3546862757);

assign select_ln61_2_fu_777_p3 = ((or_ln61_reg_1761[0:0] === 1'b1) ? output_2_q0 : 32'd3546862757);

assign select_ln61_3_fu_784_p3 = ((or_ln61_reg_1761[0:0] === 1'b1) ? output_3_q0 : 32'd3546862757);

assign select_ln61_4_fu_791_p3 = ((or_ln61_reg_1761[0:0] === 1'b1) ? output_4_q0 : 32'd3546862757);

assign select_ln61_5_fu_798_p3 = ((or_ln61_reg_1761[0:0] === 1'b1) ? output_5_q0 : 32'd3546862757);

assign select_ln61_fu_763_p3 = ((or_ln61_reg_1761[0:0] === 1'b1) ? output_0_q0 : 32'd3546862757);

assign select_ln62_1_fu_894_p3 = ((and_ln62_1_fu_888_p2[0:0] === 1'b1) ? select_ln61_1_reg_1818 : 32'd0);

assign select_ln62_2_fu_942_p3 = ((and_ln62_2_fu_936_p2[0:0] === 1'b1) ? select_ln61_2_reg_1825 : 32'd0);

assign select_ln62_3_fu_990_p3 = ((and_ln62_3_fu_984_p2[0:0] === 1'b1) ? select_ln61_3_reg_1832 : 32'd0);

assign select_ln62_4_fu_1038_p3 = ((and_ln62_4_fu_1032_p2[0:0] === 1'b1) ? select_ln61_4_reg_1839 : 32'd0);

assign select_ln62_5_fu_1086_p3 = ((and_ln62_5_fu_1080_p2[0:0] === 1'b1) ? select_ln61_5_reg_1846 : 32'd0);

assign select_ln62_fu_846_p3 = ((and_ln62_fu_840_p2[0:0] === 1'b1) ? select_ln61_reg_1811 : 32'd0);

assign select_ln63_1_fu_1263_p3 = ((and_ln63_3_fu_1257_p2[0:0] === 1'b1) ? select_ln62_1_reg_1902 : input_1_load_reg_1860);

assign select_ln63_2_fu_1351_p3 = ((and_ln63_5_fu_1345_p2[0:0] === 1'b1) ? select_ln62_2_reg_1909 : input_2_load_reg_1867);

assign select_ln63_3_fu_1439_p3 = ((and_ln63_7_fu_1433_p2[0:0] === 1'b1) ? select_ln62_3_reg_1916 : input_3_load_reg_1874);

assign select_ln63_4_fu_1527_p3 = ((and_ln63_9_fu_1521_p2[0:0] === 1'b1) ? select_ln62_4_reg_1923 : input_4_load_reg_1881);

assign select_ln63_5_fu_1615_p3 = ((and_ln63_11_fu_1609_p2[0:0] === 1'b1) ? select_ln62_5_reg_1930 : input_5_load_reg_1888);

assign select_ln63_fu_1175_p3 = ((and_ln63_1_fu_1169_p2[0:0] === 1'b1) ? select_ln62_reg_1895 : input_0_load_reg_1853);

assign sext_ln59_fu_753_p1 = $signed(add_ln59_3_fu_747_p2);

assign sext_ln61_fu_582_p1 = $signed(add_ln61_fu_576_p2);

assign shl_ln59_1_mid1_fu_553_p3 = {{w_reg_1689}, {1'd0}};

assign shl_ln59_mid1_fu_451_p3 = {{h_reg_1646}, {1'd0}};

assign shl_ln59_s_fu_500_p3 = {{w_0_reg_288}, {1'd0}};

assign shl_ln_fu_365_p3 = {{ap_phi_mux_h_0_phi_fu_269_p4}, {1'd0}};

assign sub_ln59_fu_738_p2 = (zext_ln59_fu_723_p1 - zext_ln59_1_fu_734_p1);

assign sub_ln61_fu_494_p2 = (zext_ln61_fu_478_p1 - zext_ln61_1_fu_490_p1);

assign tmp_10_fu_904_p4 = {{bitcast_ln62_2_fu_901_p1[30:23]}};

assign tmp_12_fu_1272_p4 = {{bitcast_ln63_4_fu_1269_p1[30:23]}};

assign tmp_13_fu_1289_p4 = {{bitcast_ln63_5_fu_1286_p1[30:23]}};

assign tmp_15_fu_952_p4 = {{bitcast_ln62_3_fu_949_p1[30:23]}};

assign tmp_17_fu_1360_p4 = {{bitcast_ln63_6_fu_1357_p1[30:23]}};

assign tmp_18_fu_1377_p4 = {{bitcast_ln63_7_fu_1374_p1[30:23]}};

assign tmp_20_fu_1000_p4 = {{bitcast_ln62_4_fu_997_p1[30:23]}};

assign tmp_22_fu_1448_p4 = {{bitcast_ln63_8_fu_1445_p1[30:23]}};

assign tmp_23_fu_1465_p4 = {{bitcast_ln63_9_fu_1462_p1[30:23]}};

assign tmp_25_fu_1048_p4 = {{bitcast_ln62_5_fu_1045_p1[30:23]}};

assign tmp_27_fu_1536_p4 = {{bitcast_ln63_10_fu_1533_p1[30:23]}};

assign tmp_28_fu_1553_p4 = {{bitcast_ln63_11_fu_1550_p1[30:23]}};

assign tmp_2_fu_1096_p4 = {{bitcast_ln63_fu_1093_p1[30:23]}};

assign tmp_30_fu_470_p3 = {{select_ln49_2_fu_464_p3}, {4'd0}};

assign tmp_31_fu_482_p3 = {{select_ln49_2_fu_464_p3}, {1'd0}};

assign tmp_32_fu_716_p3 = {{select_ln51_2_reg_1745}, {5'd0}};

assign tmp_33_fu_727_p3 = {{select_ln51_2_reg_1745}, {2'd0}};

assign tmp_3_fu_1113_p4 = {{bitcast_ln63_1_fu_1110_p1[30:23]}};

assign tmp_5_fu_856_p4 = {{bitcast_ln62_1_fu_853_p1[30:23]}};

assign tmp_7_fu_1184_p4 = {{bitcast_ln63_2_fu_1181_p1[30:23]}};

assign tmp_8_fu_1201_p4 = {{bitcast_ln63_3_fu_1198_p1[30:23]}};

assign tmp_s_fu_808_p4 = {{bitcast_ln62_fu_805_p1[30:23]}};

assign trunc_ln51_1_fu_649_p1 = i_fu_621_p2[0:0];

assign trunc_ln51_fu_515_p1 = i_0_reg_311[0:0];

assign trunc_ln52_fu_687_p1 = select_ln51_fu_637_p3[0:0];

assign trunc_ln62_1_fu_866_p1 = bitcast_ln62_1_fu_853_p1[22:0];

assign trunc_ln62_2_fu_914_p1 = bitcast_ln62_2_fu_901_p1[22:0];

assign trunc_ln62_3_fu_962_p1 = bitcast_ln62_3_fu_949_p1[22:0];

assign trunc_ln62_4_fu_1010_p1 = bitcast_ln62_4_fu_997_p1[22:0];

assign trunc_ln62_5_fu_1058_p1 = bitcast_ln62_5_fu_1045_p1[22:0];

assign trunc_ln62_fu_818_p1 = bitcast_ln62_fu_805_p1[22:0];

assign trunc_ln63_10_fu_1546_p1 = bitcast_ln63_10_fu_1533_p1[22:0];

assign trunc_ln63_11_fu_1563_p1 = bitcast_ln63_11_fu_1550_p1[22:0];

assign trunc_ln63_1_fu_1123_p1 = bitcast_ln63_1_fu_1110_p1[22:0];

assign trunc_ln63_2_fu_1194_p1 = bitcast_ln63_2_fu_1181_p1[22:0];

assign trunc_ln63_3_fu_1211_p1 = bitcast_ln63_3_fu_1198_p1[22:0];

assign trunc_ln63_4_fu_1282_p1 = bitcast_ln63_4_fu_1269_p1[22:0];

assign trunc_ln63_5_fu_1299_p1 = bitcast_ln63_5_fu_1286_p1[22:0];

assign trunc_ln63_6_fu_1370_p1 = bitcast_ln63_6_fu_1357_p1[22:0];

assign trunc_ln63_7_fu_1387_p1 = bitcast_ln63_7_fu_1374_p1[22:0];

assign trunc_ln63_8_fu_1458_p1 = bitcast_ln63_8_fu_1445_p1[22:0];

assign trunc_ln63_9_fu_1475_p1 = bitcast_ln63_9_fu_1462_p1[22:0];

assign trunc_ln63_fu_1106_p1 = bitcast_ln63_fu_1093_p1[22:0];

assign w_fu_433_p2 = (4'd1 + select_ln49_fu_407_p3);

assign xor_ln49_fu_415_p2 = (icmp_ln50_fu_401_p2 ^ 1'd1);

assign xor_ln50_fu_592_p2 = (icmp_ln51_reg_1675 ^ 1'd1);

assign zext_ln50_fu_572_p1 = select_ln50_2_fu_567_p3;

assign zext_ln51_1_fu_645_p1 = i_fu_621_p2;

assign zext_ln51_fu_373_p1 = ap_phi_mux_i_0_phi_fu_315_p4;

assign zext_ln52_fu_683_p1 = select_ln51_fu_637_p3;

assign zext_ln59_1_fu_734_p1 = tmp_33_fu_727_p3;

assign zext_ln59_2_fu_744_p1 = add_ln59_1_reg_1756;

assign zext_ln59_fu_723_p1 = tmp_32_fu_716_p3;

assign zext_ln61_1_fu_490_p1 = tmp_31_fu_482_p3;

assign zext_ln61_fu_478_p1 = tmp_30_fu_470_p3;

always @ (posedge ap_clk) begin
    shl_ln_reg_1627[0] <= 1'b0;
end

endmodule //max_pooling2
