-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity fc6_weights_fc6_bThq_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 100
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of fc6_weights_fc6_bThq_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111100100101101000001001101110", 
    1 => "00111110000101010010100000110111", 
    2 => "10111110000011001111110010111101", 
    3 => "00111100111011111011101101101010", 
    4 => "00111101110010100010011011000110", 
    5 => "00111110000011010001101010010110", 
    6 => "00111100111011101011110010100111", 
    7 => "10111110001011011001110101011101", 
    8 => "10111110001100001000101001011011", 
    9 => "00111101001001010111010011001100", 
    10 => "10111110000101110101010111100001", 
    11 => "10111101011101111110100111110111", 
    12 => "10111110000110001000010101100100", 
    13 => "10111101110101010001110101011111", 
    14 => "10111110001110001000110100101011", 
    15 => "00111100100110110101010001100101", 
    16 => "10111101111001111100110101001000", 
    17 => "10111110000100000111001101000000", 
    18 => "00111101000011100000110110001010", 
    19 => "00111100111111010100101111110110", 
    20 => "10111110000100110011100100000001", 
    21 => "00111101001001110111100000000100", 
    22 => "10111101101100001001101111010010", 
    23 => "00111101001110111100001110110011", 
    24 => "10111101010000100100001111101010", 
    25 => "00111101111000101011011010001101", 
    26 => "10111110000100001000010110110110", 
    27 => "00111110000110101001111000001110", 
    28 => "00111110011101011000111101000110", 
    29 => "00111100100110011100000101000010", 
    30 => "00111101100010110000011001001111", 
    31 => "10111101000010011110110010101110", 
    32 => "00111101001011011111101001011001", 
    33 => "00111110000011000101010111110010", 
    34 => "10111101110000010000000100011010", 
    35 => "00111110010100011110100011011000", 
    36 => "10111110000000001101110001011011", 
    37 => "10111110000111110101101110110110", 
    38 => "00111101111111001000001100111110", 
    39 => "10111110000100110010110100000110", 
    40 => "00111101100011110110111000001100", 
    41 => "00111101110001001111001011001100", 
    42 => "10111101011100001101001110101101", 
    43 => "00111101001111011110110111010010", 
    44 => "10111110010100100001001110110011", 
    45 => "10111110000001010111010001101011", 
    46 => "00111100110101000111010101101000", 
    47 => "00111011100001100111011011111101", 
    48 => "10111101100101111101000100101000", 
    49 => "00111110000001011010001110111100", 
    50 => "10111101011101010111010010101001", 
    51 => "00111101101111101010110010110110", 
    52 => "10111110001000100010100100110000", 
    53 => "10111100111010000101100011001111", 
    54 => "10111101001010101111011010000001", 
    55 => "00111101110101001111000110101000", 
    56 => "00111110011010010111011101011100", 
    57 => "00111011000100110110101111011000", 
    58 => "00111101101000100110001001000001", 
    59 => "00111101100100101111111111000110", 
    60 => "00111110010111111011101001000000", 
    61 => "10111101101000001010000000001110", 
    62 => "00111101000010110001111100010000", 
    63 => "00111110000011100101110011101001", 
    64 => "10111101111101011010111110010101", 
    65 => "10111011101101111000100100011001", 
    66 => "00111101101111011100110100111101", 
    67 => "00111101100000100100110100110010", 
    68 => "10111110000001110001000110000000", 
    69 => "10111100011111101110111011010011", 
    70 => "10111101100010011111101001101010", 
    71 => "10111101010011000011001010010110", 
    72 => "00111100001111110010111000110011", 
    73 => "10111110001010101101111011000100", 
    74 => "10111101110110111011000000100010", 
    75 => "00111101011110011111001110011001", 
    76 => "00111101000111011001000001100100", 
    77 => "10111110001001011001010110000111", 
    78 => "00111100001010101111111010000110", 
    79 => "10111101110101100000110011001110", 
    80 => "00111101100101111011010000111000", 
    81 => "00111100101001111111100011010011", 
    82 => "00111101010110111110110011011110", 
    83 => "10111101101101101101000010101110", 
    84 => "10111101101111010000010111011010", 
    85 => "10111101001101010000101001010001", 
    86 => "10111110001010011101110101011000", 
    87 => "00111101101101011001101110101110", 
    88 => "00111110000011000101110000111101", 
    89 => "00111110001011000100110111001101", 
    90 => "00111101001100100110010100011101", 
    91 => "00111110001000110111000110110100", 
    92 => "10111000010101101111010101000101", 
    93 => "10111110000000011001011001011011", 
    94 => "00111101011111100111010010101010", 
    95 => "10111101101110100000000100100000", 
    96 => "10111110000111111101001100010000", 
    97 => "10111100011101000000101110001011", 
    98 => "00111101110011101011000011010101", 
    99 => "00111101100100110101110010011001" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity fc6_weights_fc6_bThq is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 100;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of fc6_weights_fc6_bThq is
    component fc6_weights_fc6_bThq_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    fc6_weights_fc6_bThq_rom_U :  component fc6_weights_fc6_bThq_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


