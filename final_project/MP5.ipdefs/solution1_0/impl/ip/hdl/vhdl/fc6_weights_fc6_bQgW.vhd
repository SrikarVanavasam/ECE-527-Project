-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity fc6_weights_fc6_bQgW_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 100
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of fc6_weights_fc6_bQgW_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101011111011010111001010111", 
    1 => "00111110011101111111000010010101", 
    2 => "00111101110100110101101010101100", 
    3 => "00111110001000001110000100111010", 
    4 => "10111100111111011000110001011101", 
    5 => "10111101111110101010100010100101", 
    6 => "10111110010110110100100101110000", 
    7 => "00111110010010111111100010100000", 
    8 => "10111110000010100101011000101001", 
    9 => "10111101010010100010110000010110", 
    10 => "00111110010100010100100011111100", 
    11 => "10111101001010000011100101000101", 
    12 => "10111110011100100110000110110100", 
    13 => "00111101010001010111000101011001", 
    14 => "00111101100010111010110101011100", 
    15 => "10111110000111100011101001011100", 
    16 => "00111101101001101001100111011000", 
    17 => "10111101011111110100110100000010", 
    18 => "10111110010000001000110001101100", 
    19 => "10111100100001011000001000110101", 
    20 => "10111100100111010000100110110110", 
    21 => "10111100100101100001101000010011", 
    22 => "10111101011100011011111110101000", 
    23 => "10111110000101000010010001011000", 
    24 => "10111100010011001111110010010011", 
    25 => "10111101110010010011111100001110", 
    26 => "10111110010000101110101101001110", 
    27 => "00111101110101100011001110110110", 
    28 => "00111101010000111101100001000010", 
    29 => "00111110010001001001010010111100", 
    30 => "10111101011000110011110110010010", 
    31 => "10111110001010110010101101101010", 
    32 => "10111101011101111111110011010001", 
    33 => "10111100111100110100000011111010", 
    34 => "10111100001101001010111001001000", 
    35 => "00111101100011001001011111010011", 
    36 => "00111110011100100111101001010011", 
    37 => "00111101111101101011100101110000", 
    38 => "00111101100001000100010001011011", 
    39 => "10111100110011001100110010110010", 
    40 => "00111110000000001111101110010100", 
    41 => "00111101110011010000010101100111", 
    42 => "00111110100000010011011011100111", 
    43 => "00111011100110111001011000110100", 
    44 => "10111111000010110010001011111100", 
    45 => "10111100111100000011101000001111", 
    46 => "00111100111101001000111101001001", 
    47 => "10111110010111110001010000100110", 
    48 => "00111110000000110101111000001011", 
    49 => "00111101111101100001000000001011", 
    50 => "00111110000011001110110001010010", 
    51 => "10111110100000000101110010100101", 
    52 => "00111100011011100100111110110100", 
    53 => "10111101001101101101101101100110", 
    54 => "10111101001101111111111001110100", 
    55 => "00111101101010101010100101011011", 
    56 => "10111101101111000011011011110001", 
    57 => "00111101110011001110001100000000", 
    58 => "10111110000101110101100101111010", 
    59 => "10111101001011000000001100000000", 
    60 => "10111101011001010100011111111001", 
    61 => "10111110001010110111100111100000", 
    62 => "00111101101001110000100001110001", 
    63 => "00111101000001101010100101011101", 
    64 => "00111100011100000000001011110010", 
    65 => "10111101001001101110111010101111", 
    66 => "10111100110011100100110001111001", 
    67 => "10111110000100110111011111000001", 
    68 => "10111110010000101100111010110111", 
    69 => "00111101111011100000011001100000", 
    70 => "00111110000011101110100000000100", 
    71 => "10111101001001011111001000010010", 
    72 => "10111101010101001011101110000110", 
    73 => "10111101011011011000011001011110", 
    74 => "10111101111010110001000110011111", 
    75 => "00111101000001011010000110111000", 
    76 => "00111100101111111000000101010000", 
    77 => "10111110000100101010000010100010", 
    78 => "10111101100111010111001111001000", 
    79 => "10111101000111010100010100110101", 
    80 => "10111110011000011111110001011010", 
    81 => "10111101110101001111101011001000", 
    82 => "00111110010110010101001101110111", 
    83 => "10111110000111000101001100000111", 
    84 => "10111101001101111101101011001011", 
    85 => "00111101010101111010001010001001", 
    86 => "00111101110010101011100010111011", 
    87 => "10111110001100000101101010111100", 
    88 => "10111110001010000101001001110111", 
    89 => "10111100101000100000011001010000", 
    90 => "10111110001100010100000011000110", 
    91 => "00111100011100100110010001001100", 
    92 => "00111101111000010101110100110001", 
    93 => "00111110011110100010100101101001", 
    94 => "00111101111110001001011011101000", 
    95 => "10111101110011001110101100001001", 
    96 => "10111101101011010100011000000100", 
    97 => "00111100110011111110011011111110", 
    98 => "10111101011100101011000001111111", 
    99 => "10111101100100101010111000010101" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity fc6_weights_fc6_bQgW is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 100;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of fc6_weights_fc6_bQgW is
    component fc6_weights_fc6_bQgW_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    fc6_weights_fc6_bQgW_rom_U :  component fc6_weights_fc6_bQgW_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


