-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity convolution1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_0_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    input_0_ce0 : OUT STD_LOGIC;
    input_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_0_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    output_0_ce0 : OUT STD_LOGIC;
    output_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_0_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    output_0_ce1 : OUT STD_LOGIC;
    output_0_we1 : OUT STD_LOGIC;
    output_0_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    output_1_ce0 : OUT STD_LOGIC;
    output_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_1_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    output_1_ce1 : OUT STD_LOGIC;
    output_1_we1 : OUT STD_LOGIC;
    output_1_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_2_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    output_2_ce0 : OUT STD_LOGIC;
    output_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_2_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    output_2_ce1 : OUT STD_LOGIC;
    output_2_we1 : OUT STD_LOGIC;
    output_2_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_3_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    output_3_ce0 : OUT STD_LOGIC;
    output_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_3_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    output_3_ce1 : OUT STD_LOGIC;
    output_3_we1 : OUT STD_LOGIC;
    output_3_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_4_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    output_4_ce0 : OUT STD_LOGIC;
    output_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_4_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    output_4_ce1 : OUT STD_LOGIC;
    output_4_we1 : OUT STD_LOGIC;
    output_4_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_5_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    output_5_ce0 : OUT STD_LOGIC;
    output_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_5_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    output_5_ce1 : OUT STD_LOGIC;
    output_5_we1 : OUT STD_LOGIC;
    output_5_d1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of convolution1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_BDBFDC85 : STD_LOGIC_VECTOR (31 downto 0) := "10111101101111111101110010000101";
    constant ap_const_lv32_BDABF322 : STD_LOGIC_VECTOR (31 downto 0) := "10111101101010111111001100100010";
    constant ap_const_lv32_BD56B561 : STD_LOGIC_VECTOR (31 downto 0) := "10111101010101101011010101100001";
    constant ap_const_lv32_BD90B3FD : STD_LOGIC_VECTOR (31 downto 0) := "10111101100100001011001111111101";
    constant ap_const_lv32_BAAEDBF6 : STD_LOGIC_VECTOR (31 downto 0) := "10111010101011101101101111110110";
    constant ap_const_lv32_BD964A28 : STD_LOGIC_VECTOR (31 downto 0) := "10111101100101100100101000101000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv15_4C90 : STD_LOGIC_VECTOR (14 downto 0) := "100110010010000";
    constant ap_const_lv15_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv13_F50 : STD_LOGIC_VECTOR (12 downto 0) := "0111101010000";
    constant ap_const_lv10_310 : STD_LOGIC_VECTOR (9 downto 0) := "1100010000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv5_1C : STD_LOGIC_VECTOR (4 downto 0) := "11100";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal weights_conv1_buffer_5_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal weights_conv1_buffer_5_ce0 : STD_LOGIC;
    signal weights_conv1_buffer_5_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_conv1_buffer_4_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal weights_conv1_buffer_4_ce0 : STD_LOGIC;
    signal weights_conv1_buffer_4_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_conv1_buffer_3_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal weights_conv1_buffer_3_ce0 : STD_LOGIC;
    signal weights_conv1_buffer_3_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_conv1_buffer_2_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal weights_conv1_buffer_2_ce0 : STD_LOGIC;
    signal weights_conv1_buffer_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_conv1_buffer_1_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal weights_conv1_buffer_1_ce0 : STD_LOGIC;
    signal weights_conv1_buffer_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_conv1_buffer_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal weights_conv1_buffer_ce0 : STD_LOGIC;
    signal weights_conv1_buffer_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_flatten85_reg_305 : STD_LOGIC_VECTOR (14 downto 0);
    signal m_0_reg_316 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten23_reg_327 : STD_LOGIC_VECTOR (12 downto 0);
    signal n_0_reg_338 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten_reg_349 : STD_LOGIC_VECTOR (9 downto 0);
    signal h_0_reg_360 : STD_LOGIC_VECTOR (4 downto 0);
    signal w_0_reg_372 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter19 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter20 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal grp_fu_470_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_520 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal icmp_ln17_reg_1513 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln17_reg_1513_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln18_2_reg_1638 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln18_2_reg_1638_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_478_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_526 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_412_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_532 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal icmp_ln17_reg_1513_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln18_2_reg_1638_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_532_pp0_iter13_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_532_pp0_iter14_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_532_pp0_iter15_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_532_pp0_iter16_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_532_pp0_iter17_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_532_pp0_iter18_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_422_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_537 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_537_pp0_iter13_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_537_pp0_iter14_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_537_pp0_iter15_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_537_pp0_iter16_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_537_pp0_iter17_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_537_pp0_iter18_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_441_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_542 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal icmp_ln17_reg_1513_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln18_2_reg_1638_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln18_3_reg_1583 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln18_3_reg_1583_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_542_pp0_iter18_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_451_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_547 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_547_pp0_iter18_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln17_fu_552_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln17_reg_1498 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal icmp_ln24_fu_590_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_reg_1503 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_reg_1503_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln25_2_fu_600_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln25_2_reg_1508 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln25_2_reg_1508_pp0_iter1_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln17_fu_618_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln17_reg_1513_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln17_reg_1513_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln17_reg_1513_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln17_reg_1513_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln17_reg_1513_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln17_reg_1513_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln17_reg_1513_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln17_reg_1513_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln17_reg_1513_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln17_reg_1513_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln17_reg_1513_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln17_reg_1513_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln17_reg_1513_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln17_reg_1513_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln17_reg_1513_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln17_reg_1513_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln17_fu_624_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal m_fu_630_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal m_reg_1522 : STD_LOGIC_VECTOR (2 downto 0);
    signal m_reg_1522_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln18_fu_636_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln18_reg_1530 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln18_reg_1530_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln17_1_fu_650_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln17_1_reg_1539 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln17_1_reg_1539_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal xor_ln17_fu_672_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln17_reg_1548 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_fu_684_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_reg_1553 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln17_2_fu_690_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln17_2_reg_1558 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln17_2_reg_1558_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal n_fu_696_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal n_reg_1566 : STD_LOGIC_VECTOR (2 downto 0);
    signal n_reg_1566_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln18_fu_702_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln18_reg_1572 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln18_1_fu_708_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln18_1_reg_1577 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln18_1_reg_1577_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln18_3_fu_728_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln18_3_reg_1583_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln18_3_reg_1583_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln18_3_reg_1583_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln18_3_reg_1583_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln18_3_reg_1583_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln18_3_reg_1583_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln18_3_reg_1583_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln18_3_reg_1583_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln18_3_reg_1583_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln18_3_reg_1583_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln18_3_reg_1583_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln18_3_reg_1583_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln18_3_reg_1583_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln18_3_reg_1583_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln18_3_reg_1583_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln18_3_reg_1583_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln18_3_reg_1583_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln19_fu_742_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln18_6_fu_756_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal and_ln18_fu_792_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln18_reg_1605 : STD_LOGIC_VECTOR (0 downto 0);
    signal h_fu_798_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal h_reg_1610 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln25_fu_814_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln25_reg_1615 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln25_reg_1615_pp0_iter2_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln25_reg_1615_pp0_iter3_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln25_reg_1615_pp0_iter4_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln25_reg_1615_pp0_iter5_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln25_7_fu_822_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln25_7_reg_1621 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln25_2_fu_827_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln25_2_reg_1626 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal select_ln25_2_reg_1626_pp0_iter2_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln25_2_reg_1626_pp0_iter3_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln25_2_reg_1626_pp0_iter4_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln25_2_reg_1626_pp0_iter5_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal w_fu_835_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal w_reg_1633 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln18_2_fu_918_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln18_2_reg_1638_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln18_2_reg_1638_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln18_2_reg_1638_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln18_2_reg_1638_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln18_2_reg_1638_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln18_2_reg_1638_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln18_2_reg_1638_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln18_2_reg_1638_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln18_2_reg_1638_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln18_2_reg_1638_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln18_2_reg_1638_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln18_2_reg_1638_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln18_2_reg_1638_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln18_2_reg_1638_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal weights_conv1_buffer_7_reg_1679 : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_conv1_buffer_9_reg_1684 : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_conv1_buffer_11_reg_1689 : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_conv1_buffer_13_reg_1694 : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_conv1_buffer_15_reg_1699 : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_conv1_buffer_17_reg_1704 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_0_load_reg_1709 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_0_addr_reg_1719 : STD_LOGIC_VECTOR (9 downto 0);
    signal output_0_addr_reg_1719_pp0_iter7_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal output_0_addr_reg_1719_pp0_iter8_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal output_0_addr_reg_1719_pp0_iter9_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal output_0_addr_reg_1719_pp0_iter10_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal output_0_addr_reg_1719_pp0_iter11_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal output_0_addr_reg_1719_pp0_iter12_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal output_0_addr_reg_1719_pp0_iter13_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal output_0_addr_reg_1719_pp0_iter14_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal output_0_addr_reg_1719_pp0_iter15_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal output_0_addr_reg_1719_pp0_iter16_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal output_0_addr_reg_1719_pp0_iter17_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal output_0_addr_reg_1719_pp0_iter18_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal output_0_addr_reg_1719_pp0_iter19_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal output_1_addr_reg_1725 : STD_LOGIC_VECTOR (9 downto 0);
    signal output_1_addr_reg_1725_pp0_iter7_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal output_1_addr_reg_1725_pp0_iter8_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal output_1_addr_reg_1725_pp0_iter9_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal output_1_addr_reg_1725_pp0_iter10_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal output_1_addr_reg_1725_pp0_iter11_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal output_1_addr_reg_1725_pp0_iter12_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal output_1_addr_reg_1725_pp0_iter13_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal output_1_addr_reg_1725_pp0_iter14_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal output_1_addr_reg_1725_pp0_iter15_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal output_1_addr_reg_1725_pp0_iter16_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal output_1_addr_reg_1725_pp0_iter17_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal output_1_addr_reg_1725_pp0_iter18_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal output_1_addr_reg_1725_pp0_iter19_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal output_2_addr_reg_1731 : STD_LOGIC_VECTOR (9 downto 0);
    signal output_2_addr_reg_1731_pp0_iter7_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal output_2_addr_reg_1731_pp0_iter8_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal output_2_addr_reg_1731_pp0_iter9_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal output_2_addr_reg_1731_pp0_iter10_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal output_2_addr_reg_1731_pp0_iter11_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal output_2_addr_reg_1731_pp0_iter12_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal output_2_addr_reg_1731_pp0_iter13_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal output_2_addr_reg_1731_pp0_iter14_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal output_2_addr_reg_1731_pp0_iter15_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal output_2_addr_reg_1731_pp0_iter16_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal output_2_addr_reg_1731_pp0_iter17_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal output_2_addr_reg_1731_pp0_iter18_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal output_2_addr_reg_1731_pp0_iter19_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal output_3_addr_reg_1737 : STD_LOGIC_VECTOR (9 downto 0);
    signal output_3_addr_reg_1737_pp0_iter7_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal output_3_addr_reg_1737_pp0_iter8_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal output_3_addr_reg_1737_pp0_iter9_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal output_3_addr_reg_1737_pp0_iter10_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal output_3_addr_reg_1737_pp0_iter11_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal output_3_addr_reg_1737_pp0_iter12_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal output_3_addr_reg_1737_pp0_iter13_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal output_3_addr_reg_1737_pp0_iter14_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal output_3_addr_reg_1737_pp0_iter15_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal output_3_addr_reg_1737_pp0_iter16_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal output_3_addr_reg_1737_pp0_iter17_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal output_3_addr_reg_1737_pp0_iter18_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal output_3_addr_reg_1737_pp0_iter19_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal output_4_addr_reg_1743 : STD_LOGIC_VECTOR (9 downto 0);
    signal output_4_addr_reg_1743_pp0_iter7_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal output_4_addr_reg_1743_pp0_iter8_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal output_4_addr_reg_1743_pp0_iter9_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal output_4_addr_reg_1743_pp0_iter10_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal output_4_addr_reg_1743_pp0_iter11_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal output_4_addr_reg_1743_pp0_iter12_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal output_4_addr_reg_1743_pp0_iter13_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal output_4_addr_reg_1743_pp0_iter14_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal output_4_addr_reg_1743_pp0_iter15_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal output_4_addr_reg_1743_pp0_iter16_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal output_4_addr_reg_1743_pp0_iter17_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal output_4_addr_reg_1743_pp0_iter18_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal output_4_addr_reg_1743_pp0_iter19_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal output_5_addr_reg_1749 : STD_LOGIC_VECTOR (9 downto 0);
    signal output_5_addr_reg_1749_pp0_iter7_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal output_5_addr_reg_1749_pp0_iter8_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal output_5_addr_reg_1749_pp0_iter9_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal output_5_addr_reg_1749_pp0_iter10_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal output_5_addr_reg_1749_pp0_iter11_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal output_5_addr_reg_1749_pp0_iter12_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal output_5_addr_reg_1749_pp0_iter13_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal output_5_addr_reg_1749_pp0_iter14_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal output_5_addr_reg_1749_pp0_iter15_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal output_5_addr_reg_1749_pp0_iter16_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal output_5_addr_reg_1749_pp0_iter17_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal output_5_addr_reg_1749_pp0_iter18_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal output_5_addr_reg_1749_pp0_iter19_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln24_fu_1040_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln24_reg_1755 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_466_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp3_reg_1760 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_1_load_reg_1765 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_474_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_reg_1775 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_3_load_reg_1780 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_482_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_reg_1790 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln24_1_fu_1047_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln24_1_reg_1795 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_486_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_reg_1800 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_408_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_reg_1805 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_reg_1805_pp0_iter13_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_reg_1805_pp0_iter14_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_reg_1805_pp0_iter15_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_reg_1805_pp0_iter16_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_reg_1805_pp0_iter17_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_reg_1805_pp0_iter18_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_417_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_2_reg_1811 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_2_reg_1811_pp0_iter13_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_2_reg_1811_pp0_iter14_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_2_reg_1811_pp0_iter15_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_2_reg_1811_pp0_iter16_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_2_reg_1811_pp0_iter17_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_2_reg_1811_pp0_iter18_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_427_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_4_reg_1817 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_4_reg_1817_pp0_iter13_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_4_reg_1817_pp0_iter14_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_4_reg_1817_pp0_iter15_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_4_reg_1817_pp0_iter16_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_4_reg_1817_pp0_iter17_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_4_reg_1817_pp0_iter18_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_432_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_5_reg_1823 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_5_reg_1823_pp0_iter13_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_5_reg_1823_pp0_iter14_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_5_reg_1823_pp0_iter15_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_5_reg_1823_pp0_iter16_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_5_reg_1823_pp0_iter17_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_5_reg_1823_pp0_iter18_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_436_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal biased_reg_1829 : STD_LOGIC_VECTOR (31 downto 0);
    signal biased_reg_1829_pp0_iter18_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_446_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal biased_2_reg_1836 : STD_LOGIC_VECTOR (31 downto 0);
    signal biased_2_reg_1836_pp0_iter18_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_456_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal biased_4_reg_1843 : STD_LOGIC_VECTOR (31 downto 0);
    signal biased_4_reg_1843_pp0_iter18_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_461_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal biased_5_reg_1850 : STD_LOGIC_VECTOR (31 downto 0);
    signal biased_5_reg_1850_pp0_iter18_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln28_fu_1102_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln28_reg_1857 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln28_1_fu_1158_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln28_1_reg_1862 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln28_6_fu_1215_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln28_6_reg_1867 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln28_2_fu_1270_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln28_2_reg_1872 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln28_3_fu_1326_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln28_3_reg_1877 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln28_7_fu_1383_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln28_7_reg_1882 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln28_4_fu_1438_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln28_4_reg_1887 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln28_5_fu_1492_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln28_5_reg_1892 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_phi_mux_m_0_phi_fu_320_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_n_0_phi_fu_342_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_phi_mux_h_0_phi_fu_364_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_phi_mux_w_0_phi_fu_376_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_phi_reg_pp0_iter0_phi_ln24_reg_384 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter1_phi_ln24_reg_384 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter2_phi_ln24_reg_384 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter3_phi_ln24_reg_384 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter4_phi_ln24_reg_384 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter5_phi_ln24_reg_384 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter6_phi_ln24_reg_384 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter7_phi_ln24_reg_384 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter8_phi_ln24_reg_384 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter0_phi_ln24_1_reg_396 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter1_phi_ln24_1_reg_396 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter2_phi_ln24_1_reg_396 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter3_phi_ln24_1_reg_396 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter4_phi_ln24_1_reg_396 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter5_phi_ln24_1_reg_396 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter6_phi_ln24_1_reg_396 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter7_phi_ln24_1_reg_396 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter8_phi_ln24_1_reg_396 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln18_4_fu_934_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln25_8_fu_988_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln24_3_fu_1030_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_412_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_412_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_422_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_422_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_63_fu_560_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln25_fu_556_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln25_1_fu_568_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln24_fu_584_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln25_fu_572_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln25_2_fu_596_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln28_fu_578_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_1_fu_606_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_2_fu_658_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_fu_612_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln17_fu_642_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln17_2_fu_664_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_3_fu_716_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_1_fu_722_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln17_fu_678_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln19_1_fu_736_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln18_1_fu_750_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln20_fu_764_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln18_fu_782_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln17_1_fu_770_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln18_1_fu_787_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln18_fu_775_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln25_fu_804_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln25_1_fu_809_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_64_fu_847_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln25_3_fu_844_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln25_4_fu_854_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_65_fu_867_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln17_2_fu_864_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln25_6_fu_874_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln24_1_fu_884_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln25_3_fu_858_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln17_4_fu_895_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln24_1_fu_908_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln24_2_fu_912_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln17_3_fu_889_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln25_4_fu_878_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln25_5_fu_925_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln25_5_fu_928_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln17_3_fu_901_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln17_1_fu_841_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln25_7_fu_952_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln17_5_fu_955_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln25_6_fu_947_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln18_5_fu_961_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln18_fu_905_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln25_1_fu_968_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln25_1_fu_975_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_68_fu_980_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_66_fu_993_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_67_fu_1004_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln24_fu_1000_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln24_1_fu_1011_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln24_fu_1015_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln24_2_fu_1021_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln24_fu_1024_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal bitcast_ln27_fu_1054_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_1057_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln27_fu_1067_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln27_1_fu_1077_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_fu_1071_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln27_fu_1083_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_490_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln27_fu_1089_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln27_fu_1095_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln27_2_fu_1108_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_51_fu_1112_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln27_2_fu_1122_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln27_5_fu_1132_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_4_fu_1126_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln27_2_fu_1138_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_495_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln27_2_fu_1144_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln27_1_fu_1150_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln27_1_fu_1165_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_49_fu_1169_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln27_1_fu_1179_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln27_3_fu_1189_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_2_fu_1183_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln27_1_fu_1195_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln27_1_fu_1201_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln27_6_fu_1207_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln27_3_fu_1222_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_53_fu_1225_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln27_3_fu_1235_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln27_7_fu_1245_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_6_fu_1239_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln27_3_fu_1251_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_500_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln27_3_fu_1257_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln27_2_fu_1263_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln27_5_fu_1276_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_57_fu_1280_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln27_5_fu_1290_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln27_11_fu_1300_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_10_fu_1294_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln27_5_fu_1306_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_505_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln27_5_fu_1312_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln27_3_fu_1318_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln27_4_fu_1333_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_55_fu_1337_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln27_4_fu_1347_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln27_9_fu_1357_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_8_fu_1351_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln27_4_fu_1363_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln27_4_fu_1369_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln27_7_fu_1375_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln27_6_fu_1390_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_59_fu_1393_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln27_6_fu_1403_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln27_13_fu_1413_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_12_fu_1407_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln27_6_fu_1419_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_510_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln27_6_fu_1425_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln27_4_fu_1431_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln27_7_fu_1444_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_61_fu_1447_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln27_7_fu_1457_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln27_15_fu_1467_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_14_fu_1461_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln27_7_fu_1473_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_515_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln27_7_fu_1479_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln27_5_fu_1485_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_1685 : BOOLEAN;
    signal ap_condition_1688 : BOOLEAN;

    component LeNet_fadd_32ns_3hbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component LeNet_fmul_32ns_3ibs IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component LeNet_fcmp_32ns_3jbC IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component convolution1_weigbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component convolution1_weigcud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component convolution1_weigdEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component convolution1_weigeOg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component convolution1_weigfYi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component convolution1_weigg8j IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    weights_conv1_buffer_5_U : component convolution1_weigbkb
    generic map (
        DataWidth => 32,
        AddressRange => 25,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => weights_conv1_buffer_5_address0,
        ce0 => weights_conv1_buffer_5_ce0,
        q0 => weights_conv1_buffer_5_q0);

    weights_conv1_buffer_4_U : component convolution1_weigcud
    generic map (
        DataWidth => 32,
        AddressRange => 25,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => weights_conv1_buffer_4_address0,
        ce0 => weights_conv1_buffer_4_ce0,
        q0 => weights_conv1_buffer_4_q0);

    weights_conv1_buffer_3_U : component convolution1_weigdEe
    generic map (
        DataWidth => 32,
        AddressRange => 25,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => weights_conv1_buffer_3_address0,
        ce0 => weights_conv1_buffer_3_ce0,
        q0 => weights_conv1_buffer_3_q0);

    weights_conv1_buffer_2_U : component convolution1_weigeOg
    generic map (
        DataWidth => 32,
        AddressRange => 25,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => weights_conv1_buffer_2_address0,
        ce0 => weights_conv1_buffer_2_ce0,
        q0 => weights_conv1_buffer_2_q0);

    weights_conv1_buffer_1_U : component convolution1_weigfYi
    generic map (
        DataWidth => 32,
        AddressRange => 25,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => weights_conv1_buffer_1_address0,
        ce0 => weights_conv1_buffer_1_ce0,
        q0 => weights_conv1_buffer_1_q0);

    weights_conv1_buffer_U : component convolution1_weigg8j
    generic map (
        DataWidth => 32,
        AddressRange => 25,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => weights_conv1_buffer_address0,
        ce0 => weights_conv1_buffer_ce0,
        q0 => weights_conv1_buffer_q0);

    LeNet_fadd_32ns_3hbi_U6 : component LeNet_fadd_32ns_3hbi
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => select_ln24_reg_1755,
        din1 => tmp3_reg_1760,
        ce => ap_const_logic_1,
        dout => grp_fu_408_p2);

    LeNet_fadd_32ns_3hbi_U7 : component LeNet_fadd_32ns_3hbi
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_412_p0,
        din1 => grp_fu_412_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_412_p2);

    LeNet_fadd_32ns_3hbi_U8 : component LeNet_fadd_32ns_3hbi
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_phi_reg_pp0_iter8_phi_ln24_reg_384,
        din1 => tmp_2_reg_1775,
        ce => ap_const_logic_1,
        dout => grp_fu_417_p2);

    LeNet_fadd_32ns_3hbi_U9 : component LeNet_fadd_32ns_3hbi
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_422_p0,
        din1 => grp_fu_422_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_422_p2);

    LeNet_fadd_32ns_3hbi_U10 : component LeNet_fadd_32ns_3hbi
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_phi_reg_pp0_iter8_phi_ln24_1_reg_396,
        din1 => tmp_4_reg_1790,
        ce => ap_const_logic_1,
        dout => grp_fu_427_p2);

    LeNet_fadd_32ns_3hbi_U11 : component LeNet_fadd_32ns_3hbi
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => select_ln24_1_reg_1795,
        din1 => tmp_5_reg_1800,
        ce => ap_const_logic_1,
        dout => grp_fu_432_p2);

    LeNet_fadd_32ns_3hbi_U12 : component LeNet_fadd_32ns_3hbi
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => acc_reg_1805,
        din1 => ap_const_lv32_BDBFDC85,
        ce => ap_const_logic_1,
        dout => grp_fu_436_p2);

    LeNet_fadd_32ns_3hbi_U13 : component LeNet_fadd_32ns_3hbi
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_532,
        din1 => ap_const_lv32_BDABF322,
        ce => ap_const_logic_1,
        dout => grp_fu_441_p2);

    LeNet_fadd_32ns_3hbi_U14 : component LeNet_fadd_32ns_3hbi
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => acc_2_reg_1811,
        din1 => ap_const_lv32_BD56B561,
        ce => ap_const_logic_1,
        dout => grp_fu_446_p2);

    LeNet_fadd_32ns_3hbi_U15 : component LeNet_fadd_32ns_3hbi
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_537,
        din1 => ap_const_lv32_BD90B3FD,
        ce => ap_const_logic_1,
        dout => grp_fu_451_p2);

    LeNet_fadd_32ns_3hbi_U16 : component LeNet_fadd_32ns_3hbi
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => acc_4_reg_1817,
        din1 => ap_const_lv32_BAAEDBF6,
        ce => ap_const_logic_1,
        dout => grp_fu_456_p2);

    LeNet_fadd_32ns_3hbi_U17 : component LeNet_fadd_32ns_3hbi
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => acc_5_reg_1823,
        din1 => ap_const_lv32_BD964A28,
        ce => ap_const_logic_1,
        dout => grp_fu_461_p2);

    LeNet_fmul_32ns_3ibs_U18 : component LeNet_fmul_32ns_3ibs
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => weights_conv1_buffer_7_reg_1679,
        din1 => input_0_load_reg_1709,
        ce => ap_const_logic_1,
        dout => grp_fu_466_p2);

    LeNet_fmul_32ns_3ibs_U19 : component LeNet_fmul_32ns_3ibs
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => weights_conv1_buffer_9_reg_1684,
        din1 => input_0_load_reg_1709,
        ce => ap_const_logic_1,
        dout => grp_fu_470_p2);

    LeNet_fmul_32ns_3ibs_U20 : component LeNet_fmul_32ns_3ibs
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => weights_conv1_buffer_11_reg_1689,
        din1 => input_0_load_reg_1709,
        ce => ap_const_logic_1,
        dout => grp_fu_474_p2);

    LeNet_fmul_32ns_3ibs_U21 : component LeNet_fmul_32ns_3ibs
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => weights_conv1_buffer_13_reg_1694,
        din1 => input_0_load_reg_1709,
        ce => ap_const_logic_1,
        dout => grp_fu_478_p2);

    LeNet_fmul_32ns_3ibs_U22 : component LeNet_fmul_32ns_3ibs
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => weights_conv1_buffer_15_reg_1699,
        din1 => input_0_load_reg_1709,
        ce => ap_const_logic_1,
        dout => grp_fu_482_p2);

    LeNet_fmul_32ns_3ibs_U23 : component LeNet_fmul_32ns_3ibs
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => weights_conv1_buffer_17_reg_1704,
        din1 => input_0_load_reg_1709,
        ce => ap_const_logic_1,
        dout => grp_fu_486_p2);

    LeNet_fcmp_32ns_3jbC_U24 : component LeNet_fcmp_32ns_3jbC
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => biased_reg_1829,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_490_p2);

    LeNet_fcmp_32ns_3jbC_U25 : component LeNet_fcmp_32ns_3jbC
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_542,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_495_p2);

    LeNet_fcmp_32ns_3jbC_U26 : component LeNet_fcmp_32ns_3jbC
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => biased_2_reg_1836,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_500_p2);

    LeNet_fcmp_32ns_3jbC_U27 : component LeNet_fcmp_32ns_3jbC
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_547,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_505_p2);

    LeNet_fcmp_32ns_3jbC_U28 : component LeNet_fcmp_32ns_3jbC
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => biased_4_reg_1843,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_510_p2);

    LeNet_fcmp_32ns_3jbC_U29 : component LeNet_fcmp_32ns_3jbC
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => biased_5_reg_1850,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_515_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter8_phi_ln24_1_reg_396_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((select_ln18_2_reg_1638_pp0_iter6_reg = ap_const_lv1_1) and (icmp_ln17_reg_1513_pp0_iter6_reg = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter8_phi_ln24_1_reg_396 <= ap_const_lv32_0;
                elsif (((select_ln18_2_reg_1638_pp0_iter6_reg = ap_const_lv1_0) and (icmp_ln17_reg_1513_pp0_iter6_reg = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter8_phi_ln24_1_reg_396 <= output_4_q0;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter8_phi_ln24_1_reg_396 <= ap_phi_reg_pp0_iter7_phi_ln24_1_reg_396;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter8_phi_ln24_reg_384_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((select_ln18_2_reg_1638_pp0_iter6_reg = ap_const_lv1_1) and (icmp_ln17_reg_1513_pp0_iter6_reg = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter8_phi_ln24_reg_384 <= ap_const_lv32_0;
                elsif (((select_ln18_2_reg_1638_pp0_iter6_reg = ap_const_lv1_0) and (icmp_ln17_reg_1513_pp0_iter6_reg = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter8_phi_ln24_reg_384 <= output_2_q0;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter8_phi_ln24_reg_384 <= ap_phi_reg_pp0_iter7_phi_ln24_reg_384;
                end if;
            end if; 
        end if;
    end process;

    h_0_reg_360_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln17_reg_1513_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                h_0_reg_360 <= select_ln25_2_reg_1626;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                h_0_reg_360 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    indvar_flatten23_reg_327_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln17_fu_618_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten23_reg_327 <= select_ln18_6_fu_756_p3;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten23_reg_327 <= ap_const_lv13_0;
            end if; 
        end if;
    end process;

    indvar_flatten85_reg_305_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln17_fu_618_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten85_reg_305 <= add_ln17_fu_624_p2;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten85_reg_305 <= ap_const_lv15_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_349_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln17_fu_618_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_reg_349 <= select_ln19_fu_742_p3;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_349 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    m_0_reg_316_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln17_reg_1513 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                m_0_reg_316 <= select_ln17_1_reg_1539;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                m_0_reg_316 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    n_0_reg_338_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln17_reg_1513 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                n_0_reg_338 <= select_ln18_1_reg_1577;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                n_0_reg_338 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    w_0_reg_372_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln17_reg_1513_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                w_0_reg_372 <= w_reg_1633;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                w_0_reg_372 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                acc_2_reg_1811 <= grp_fu_417_p2;
                acc_2_reg_1811_pp0_iter13_reg <= acc_2_reg_1811;
                acc_2_reg_1811_pp0_iter14_reg <= acc_2_reg_1811_pp0_iter13_reg;
                acc_2_reg_1811_pp0_iter15_reg <= acc_2_reg_1811_pp0_iter14_reg;
                acc_2_reg_1811_pp0_iter16_reg <= acc_2_reg_1811_pp0_iter15_reg;
                acc_2_reg_1811_pp0_iter17_reg <= acc_2_reg_1811_pp0_iter16_reg;
                acc_2_reg_1811_pp0_iter18_reg <= acc_2_reg_1811_pp0_iter17_reg;
                acc_4_reg_1817_pp0_iter13_reg <= acc_4_reg_1817;
                acc_4_reg_1817_pp0_iter14_reg <= acc_4_reg_1817_pp0_iter13_reg;
                acc_4_reg_1817_pp0_iter15_reg <= acc_4_reg_1817_pp0_iter14_reg;
                acc_4_reg_1817_pp0_iter16_reg <= acc_4_reg_1817_pp0_iter15_reg;
                acc_4_reg_1817_pp0_iter17_reg <= acc_4_reg_1817_pp0_iter16_reg;
                acc_4_reg_1817_pp0_iter18_reg <= acc_4_reg_1817_pp0_iter17_reg;
                acc_5_reg_1823_pp0_iter13_reg <= acc_5_reg_1823;
                acc_5_reg_1823_pp0_iter14_reg <= acc_5_reg_1823_pp0_iter13_reg;
                acc_5_reg_1823_pp0_iter15_reg <= acc_5_reg_1823_pp0_iter14_reg;
                acc_5_reg_1823_pp0_iter16_reg <= acc_5_reg_1823_pp0_iter15_reg;
                acc_5_reg_1823_pp0_iter17_reg <= acc_5_reg_1823_pp0_iter16_reg;
                acc_5_reg_1823_pp0_iter18_reg <= acc_5_reg_1823_pp0_iter17_reg;
                acc_reg_1805_pp0_iter13_reg <= acc_reg_1805;
                acc_reg_1805_pp0_iter14_reg <= acc_reg_1805_pp0_iter13_reg;
                acc_reg_1805_pp0_iter15_reg <= acc_reg_1805_pp0_iter14_reg;
                acc_reg_1805_pp0_iter16_reg <= acc_reg_1805_pp0_iter15_reg;
                acc_reg_1805_pp0_iter17_reg <= acc_reg_1805_pp0_iter16_reg;
                acc_reg_1805_pp0_iter18_reg <= acc_reg_1805_pp0_iter17_reg;
                biased_2_reg_1836_pp0_iter18_reg <= biased_2_reg_1836;
                biased_4_reg_1843_pp0_iter18_reg <= biased_4_reg_1843;
                biased_5_reg_1850_pp0_iter18_reg <= biased_5_reg_1850;
                biased_reg_1829_pp0_iter18_reg <= biased_reg_1829;
                icmp_ln17_reg_1513_pp0_iter10_reg <= icmp_ln17_reg_1513_pp0_iter9_reg;
                icmp_ln17_reg_1513_pp0_iter11_reg <= icmp_ln17_reg_1513_pp0_iter10_reg;
                icmp_ln17_reg_1513_pp0_iter12_reg <= icmp_ln17_reg_1513_pp0_iter11_reg;
                icmp_ln17_reg_1513_pp0_iter13_reg <= icmp_ln17_reg_1513_pp0_iter12_reg;
                icmp_ln17_reg_1513_pp0_iter14_reg <= icmp_ln17_reg_1513_pp0_iter13_reg;
                icmp_ln17_reg_1513_pp0_iter15_reg <= icmp_ln17_reg_1513_pp0_iter14_reg;
                icmp_ln17_reg_1513_pp0_iter16_reg <= icmp_ln17_reg_1513_pp0_iter15_reg;
                icmp_ln17_reg_1513_pp0_iter17_reg <= icmp_ln17_reg_1513_pp0_iter16_reg;
                icmp_ln17_reg_1513_pp0_iter18_reg <= icmp_ln17_reg_1513_pp0_iter17_reg;
                icmp_ln17_reg_1513_pp0_iter19_reg <= icmp_ln17_reg_1513_pp0_iter18_reg;
                icmp_ln17_reg_1513_pp0_iter2_reg <= icmp_ln17_reg_1513_pp0_iter1_reg;
                icmp_ln17_reg_1513_pp0_iter3_reg <= icmp_ln17_reg_1513_pp0_iter2_reg;
                icmp_ln17_reg_1513_pp0_iter4_reg <= icmp_ln17_reg_1513_pp0_iter3_reg;
                icmp_ln17_reg_1513_pp0_iter5_reg <= icmp_ln17_reg_1513_pp0_iter4_reg;
                icmp_ln17_reg_1513_pp0_iter6_reg <= icmp_ln17_reg_1513_pp0_iter5_reg;
                icmp_ln17_reg_1513_pp0_iter7_reg <= icmp_ln17_reg_1513_pp0_iter6_reg;
                icmp_ln17_reg_1513_pp0_iter8_reg <= icmp_ln17_reg_1513_pp0_iter7_reg;
                icmp_ln17_reg_1513_pp0_iter9_reg <= icmp_ln17_reg_1513_pp0_iter8_reg;
                output_0_addr_reg_1719_pp0_iter10_reg <= output_0_addr_reg_1719_pp0_iter9_reg;
                output_0_addr_reg_1719_pp0_iter11_reg <= output_0_addr_reg_1719_pp0_iter10_reg;
                output_0_addr_reg_1719_pp0_iter12_reg <= output_0_addr_reg_1719_pp0_iter11_reg;
                output_0_addr_reg_1719_pp0_iter13_reg <= output_0_addr_reg_1719_pp0_iter12_reg;
                output_0_addr_reg_1719_pp0_iter14_reg <= output_0_addr_reg_1719_pp0_iter13_reg;
                output_0_addr_reg_1719_pp0_iter15_reg <= output_0_addr_reg_1719_pp0_iter14_reg;
                output_0_addr_reg_1719_pp0_iter16_reg <= output_0_addr_reg_1719_pp0_iter15_reg;
                output_0_addr_reg_1719_pp0_iter17_reg <= output_0_addr_reg_1719_pp0_iter16_reg;
                output_0_addr_reg_1719_pp0_iter18_reg <= output_0_addr_reg_1719_pp0_iter17_reg;
                output_0_addr_reg_1719_pp0_iter19_reg <= output_0_addr_reg_1719_pp0_iter18_reg;
                output_0_addr_reg_1719_pp0_iter7_reg <= output_0_addr_reg_1719;
                output_0_addr_reg_1719_pp0_iter8_reg <= output_0_addr_reg_1719_pp0_iter7_reg;
                output_0_addr_reg_1719_pp0_iter9_reg <= output_0_addr_reg_1719_pp0_iter8_reg;
                output_1_addr_reg_1725_pp0_iter10_reg <= output_1_addr_reg_1725_pp0_iter9_reg;
                output_1_addr_reg_1725_pp0_iter11_reg <= output_1_addr_reg_1725_pp0_iter10_reg;
                output_1_addr_reg_1725_pp0_iter12_reg <= output_1_addr_reg_1725_pp0_iter11_reg;
                output_1_addr_reg_1725_pp0_iter13_reg <= output_1_addr_reg_1725_pp0_iter12_reg;
                output_1_addr_reg_1725_pp0_iter14_reg <= output_1_addr_reg_1725_pp0_iter13_reg;
                output_1_addr_reg_1725_pp0_iter15_reg <= output_1_addr_reg_1725_pp0_iter14_reg;
                output_1_addr_reg_1725_pp0_iter16_reg <= output_1_addr_reg_1725_pp0_iter15_reg;
                output_1_addr_reg_1725_pp0_iter17_reg <= output_1_addr_reg_1725_pp0_iter16_reg;
                output_1_addr_reg_1725_pp0_iter18_reg <= output_1_addr_reg_1725_pp0_iter17_reg;
                output_1_addr_reg_1725_pp0_iter19_reg <= output_1_addr_reg_1725_pp0_iter18_reg;
                output_1_addr_reg_1725_pp0_iter7_reg <= output_1_addr_reg_1725;
                output_1_addr_reg_1725_pp0_iter8_reg <= output_1_addr_reg_1725_pp0_iter7_reg;
                output_1_addr_reg_1725_pp0_iter9_reg <= output_1_addr_reg_1725_pp0_iter8_reg;
                output_2_addr_reg_1731_pp0_iter10_reg <= output_2_addr_reg_1731_pp0_iter9_reg;
                output_2_addr_reg_1731_pp0_iter11_reg <= output_2_addr_reg_1731_pp0_iter10_reg;
                output_2_addr_reg_1731_pp0_iter12_reg <= output_2_addr_reg_1731_pp0_iter11_reg;
                output_2_addr_reg_1731_pp0_iter13_reg <= output_2_addr_reg_1731_pp0_iter12_reg;
                output_2_addr_reg_1731_pp0_iter14_reg <= output_2_addr_reg_1731_pp0_iter13_reg;
                output_2_addr_reg_1731_pp0_iter15_reg <= output_2_addr_reg_1731_pp0_iter14_reg;
                output_2_addr_reg_1731_pp0_iter16_reg <= output_2_addr_reg_1731_pp0_iter15_reg;
                output_2_addr_reg_1731_pp0_iter17_reg <= output_2_addr_reg_1731_pp0_iter16_reg;
                output_2_addr_reg_1731_pp0_iter18_reg <= output_2_addr_reg_1731_pp0_iter17_reg;
                output_2_addr_reg_1731_pp0_iter19_reg <= output_2_addr_reg_1731_pp0_iter18_reg;
                output_2_addr_reg_1731_pp0_iter7_reg <= output_2_addr_reg_1731;
                output_2_addr_reg_1731_pp0_iter8_reg <= output_2_addr_reg_1731_pp0_iter7_reg;
                output_2_addr_reg_1731_pp0_iter9_reg <= output_2_addr_reg_1731_pp0_iter8_reg;
                output_3_addr_reg_1737_pp0_iter10_reg <= output_3_addr_reg_1737_pp0_iter9_reg;
                output_3_addr_reg_1737_pp0_iter11_reg <= output_3_addr_reg_1737_pp0_iter10_reg;
                output_3_addr_reg_1737_pp0_iter12_reg <= output_3_addr_reg_1737_pp0_iter11_reg;
                output_3_addr_reg_1737_pp0_iter13_reg <= output_3_addr_reg_1737_pp0_iter12_reg;
                output_3_addr_reg_1737_pp0_iter14_reg <= output_3_addr_reg_1737_pp0_iter13_reg;
                output_3_addr_reg_1737_pp0_iter15_reg <= output_3_addr_reg_1737_pp0_iter14_reg;
                output_3_addr_reg_1737_pp0_iter16_reg <= output_3_addr_reg_1737_pp0_iter15_reg;
                output_3_addr_reg_1737_pp0_iter17_reg <= output_3_addr_reg_1737_pp0_iter16_reg;
                output_3_addr_reg_1737_pp0_iter18_reg <= output_3_addr_reg_1737_pp0_iter17_reg;
                output_3_addr_reg_1737_pp0_iter19_reg <= output_3_addr_reg_1737_pp0_iter18_reg;
                output_3_addr_reg_1737_pp0_iter7_reg <= output_3_addr_reg_1737;
                output_3_addr_reg_1737_pp0_iter8_reg <= output_3_addr_reg_1737_pp0_iter7_reg;
                output_3_addr_reg_1737_pp0_iter9_reg <= output_3_addr_reg_1737_pp0_iter8_reg;
                output_4_addr_reg_1743_pp0_iter10_reg <= output_4_addr_reg_1743_pp0_iter9_reg;
                output_4_addr_reg_1743_pp0_iter11_reg <= output_4_addr_reg_1743_pp0_iter10_reg;
                output_4_addr_reg_1743_pp0_iter12_reg <= output_4_addr_reg_1743_pp0_iter11_reg;
                output_4_addr_reg_1743_pp0_iter13_reg <= output_4_addr_reg_1743_pp0_iter12_reg;
                output_4_addr_reg_1743_pp0_iter14_reg <= output_4_addr_reg_1743_pp0_iter13_reg;
                output_4_addr_reg_1743_pp0_iter15_reg <= output_4_addr_reg_1743_pp0_iter14_reg;
                output_4_addr_reg_1743_pp0_iter16_reg <= output_4_addr_reg_1743_pp0_iter15_reg;
                output_4_addr_reg_1743_pp0_iter17_reg <= output_4_addr_reg_1743_pp0_iter16_reg;
                output_4_addr_reg_1743_pp0_iter18_reg <= output_4_addr_reg_1743_pp0_iter17_reg;
                output_4_addr_reg_1743_pp0_iter19_reg <= output_4_addr_reg_1743_pp0_iter18_reg;
                output_4_addr_reg_1743_pp0_iter7_reg <= output_4_addr_reg_1743;
                output_4_addr_reg_1743_pp0_iter8_reg <= output_4_addr_reg_1743_pp0_iter7_reg;
                output_4_addr_reg_1743_pp0_iter9_reg <= output_4_addr_reg_1743_pp0_iter8_reg;
                output_5_addr_reg_1749_pp0_iter10_reg <= output_5_addr_reg_1749_pp0_iter9_reg;
                output_5_addr_reg_1749_pp0_iter11_reg <= output_5_addr_reg_1749_pp0_iter10_reg;
                output_5_addr_reg_1749_pp0_iter12_reg <= output_5_addr_reg_1749_pp0_iter11_reg;
                output_5_addr_reg_1749_pp0_iter13_reg <= output_5_addr_reg_1749_pp0_iter12_reg;
                output_5_addr_reg_1749_pp0_iter14_reg <= output_5_addr_reg_1749_pp0_iter13_reg;
                output_5_addr_reg_1749_pp0_iter15_reg <= output_5_addr_reg_1749_pp0_iter14_reg;
                output_5_addr_reg_1749_pp0_iter16_reg <= output_5_addr_reg_1749_pp0_iter15_reg;
                output_5_addr_reg_1749_pp0_iter17_reg <= output_5_addr_reg_1749_pp0_iter16_reg;
                output_5_addr_reg_1749_pp0_iter18_reg <= output_5_addr_reg_1749_pp0_iter17_reg;
                output_5_addr_reg_1749_pp0_iter19_reg <= output_5_addr_reg_1749_pp0_iter18_reg;
                output_5_addr_reg_1749_pp0_iter7_reg <= output_5_addr_reg_1749;
                output_5_addr_reg_1749_pp0_iter8_reg <= output_5_addr_reg_1749_pp0_iter7_reg;
                output_5_addr_reg_1749_pp0_iter9_reg <= output_5_addr_reg_1749_pp0_iter8_reg;
                reg_532_pp0_iter13_reg <= reg_532;
                reg_532_pp0_iter14_reg <= reg_532_pp0_iter13_reg;
                reg_532_pp0_iter15_reg <= reg_532_pp0_iter14_reg;
                reg_532_pp0_iter16_reg <= reg_532_pp0_iter15_reg;
                reg_532_pp0_iter17_reg <= reg_532_pp0_iter16_reg;
                reg_532_pp0_iter18_reg <= reg_532_pp0_iter17_reg;
                reg_537_pp0_iter13_reg <= reg_537;
                reg_537_pp0_iter14_reg <= reg_537_pp0_iter13_reg;
                reg_537_pp0_iter15_reg <= reg_537_pp0_iter14_reg;
                reg_537_pp0_iter16_reg <= reg_537_pp0_iter15_reg;
                reg_537_pp0_iter17_reg <= reg_537_pp0_iter16_reg;
                reg_537_pp0_iter18_reg <= reg_537_pp0_iter17_reg;
                reg_542_pp0_iter18_reg <= reg_542;
                reg_547_pp0_iter18_reg <= reg_547;
                select_ln18_2_reg_1638_pp0_iter10_reg <= select_ln18_2_reg_1638_pp0_iter9_reg;
                select_ln18_2_reg_1638_pp0_iter11_reg <= select_ln18_2_reg_1638_pp0_iter10_reg;
                select_ln18_2_reg_1638_pp0_iter12_reg <= select_ln18_2_reg_1638_pp0_iter11_reg;
                select_ln18_2_reg_1638_pp0_iter13_reg <= select_ln18_2_reg_1638_pp0_iter12_reg;
                select_ln18_2_reg_1638_pp0_iter14_reg <= select_ln18_2_reg_1638_pp0_iter13_reg;
                select_ln18_2_reg_1638_pp0_iter15_reg <= select_ln18_2_reg_1638_pp0_iter14_reg;
                select_ln18_2_reg_1638_pp0_iter16_reg <= select_ln18_2_reg_1638_pp0_iter15_reg;
                select_ln18_2_reg_1638_pp0_iter17_reg <= select_ln18_2_reg_1638_pp0_iter16_reg;
                select_ln18_2_reg_1638_pp0_iter18_reg <= select_ln18_2_reg_1638_pp0_iter17_reg;
                select_ln18_2_reg_1638_pp0_iter19_reg <= select_ln18_2_reg_1638_pp0_iter18_reg;
                select_ln18_2_reg_1638_pp0_iter3_reg <= select_ln18_2_reg_1638;
                select_ln18_2_reg_1638_pp0_iter4_reg <= select_ln18_2_reg_1638_pp0_iter3_reg;
                select_ln18_2_reg_1638_pp0_iter5_reg <= select_ln18_2_reg_1638_pp0_iter4_reg;
                select_ln18_2_reg_1638_pp0_iter6_reg <= select_ln18_2_reg_1638_pp0_iter5_reg;
                select_ln18_2_reg_1638_pp0_iter7_reg <= select_ln18_2_reg_1638_pp0_iter6_reg;
                select_ln18_2_reg_1638_pp0_iter8_reg <= select_ln18_2_reg_1638_pp0_iter7_reg;
                select_ln18_2_reg_1638_pp0_iter9_reg <= select_ln18_2_reg_1638_pp0_iter8_reg;
                select_ln18_3_reg_1583_pp0_iter10_reg <= select_ln18_3_reg_1583_pp0_iter9_reg;
                select_ln18_3_reg_1583_pp0_iter11_reg <= select_ln18_3_reg_1583_pp0_iter10_reg;
                select_ln18_3_reg_1583_pp0_iter12_reg <= select_ln18_3_reg_1583_pp0_iter11_reg;
                select_ln18_3_reg_1583_pp0_iter13_reg <= select_ln18_3_reg_1583_pp0_iter12_reg;
                select_ln18_3_reg_1583_pp0_iter14_reg <= select_ln18_3_reg_1583_pp0_iter13_reg;
                select_ln18_3_reg_1583_pp0_iter15_reg <= select_ln18_3_reg_1583_pp0_iter14_reg;
                select_ln18_3_reg_1583_pp0_iter16_reg <= select_ln18_3_reg_1583_pp0_iter15_reg;
                select_ln18_3_reg_1583_pp0_iter17_reg <= select_ln18_3_reg_1583_pp0_iter16_reg;
                select_ln18_3_reg_1583_pp0_iter18_reg <= select_ln18_3_reg_1583_pp0_iter17_reg;
                select_ln18_3_reg_1583_pp0_iter2_reg <= select_ln18_3_reg_1583_pp0_iter1_reg;
                select_ln18_3_reg_1583_pp0_iter3_reg <= select_ln18_3_reg_1583_pp0_iter2_reg;
                select_ln18_3_reg_1583_pp0_iter4_reg <= select_ln18_3_reg_1583_pp0_iter3_reg;
                select_ln18_3_reg_1583_pp0_iter5_reg <= select_ln18_3_reg_1583_pp0_iter4_reg;
                select_ln18_3_reg_1583_pp0_iter6_reg <= select_ln18_3_reg_1583_pp0_iter5_reg;
                select_ln18_3_reg_1583_pp0_iter7_reg <= select_ln18_3_reg_1583_pp0_iter6_reg;
                select_ln18_3_reg_1583_pp0_iter8_reg <= select_ln18_3_reg_1583_pp0_iter7_reg;
                select_ln18_3_reg_1583_pp0_iter9_reg <= select_ln18_3_reg_1583_pp0_iter8_reg;
                select_ln25_2_reg_1626_pp0_iter2_reg <= select_ln25_2_reg_1626;
                select_ln25_2_reg_1626_pp0_iter3_reg <= select_ln25_2_reg_1626_pp0_iter2_reg;
                select_ln25_2_reg_1626_pp0_iter4_reg <= select_ln25_2_reg_1626_pp0_iter3_reg;
                select_ln25_2_reg_1626_pp0_iter5_reg <= select_ln25_2_reg_1626_pp0_iter4_reg;
                select_ln25_reg_1615_pp0_iter2_reg <= select_ln25_reg_1615;
                select_ln25_reg_1615_pp0_iter3_reg <= select_ln25_reg_1615_pp0_iter2_reg;
                select_ln25_reg_1615_pp0_iter4_reg <= select_ln25_reg_1615_pp0_iter3_reg;
                select_ln25_reg_1615_pp0_iter5_reg <= select_ln25_reg_1615_pp0_iter4_reg;
                select_ln28_2_reg_1872 <= select_ln28_2_fu_1270_p3;
                tmp_2_reg_1775 <= grp_fu_474_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln17_reg_1513_pp0_iter11_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                acc_4_reg_1817 <= grp_fu_427_p2;
                acc_5_reg_1823 <= grp_fu_432_p2;
                acc_reg_1805 <= grp_fu_408_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln25_2_reg_1508 <= add_ln25_2_fu_600_p2;
                add_ln25_2_reg_1508_pp0_iter1_reg <= add_ln25_2_reg_1508;
                and_ln17_2_reg_1558_pp0_iter1_reg <= and_ln17_2_reg_1558;
                icmp_ln17_reg_1513 <= icmp_ln17_fu_618_p2;
                icmp_ln17_reg_1513_pp0_iter1_reg <= icmp_ln17_reg_1513;
                icmp_ln18_reg_1530_pp0_iter1_reg <= icmp_ln18_reg_1530;
                icmp_ln24_reg_1503 <= icmp_ln24_fu_590_p2;
                icmp_ln24_reg_1503_pp0_iter1_reg <= icmp_ln24_reg_1503;
                m_reg_1522_pp0_iter1_reg <= m_reg_1522;
                n_reg_1566_pp0_iter1_reg <= n_reg_1566;
                select_ln17_1_reg_1539_pp0_iter1_reg <= select_ln17_1_reg_1539;
                select_ln18_1_reg_1577_pp0_iter1_reg <= select_ln18_1_reg_1577;
                select_ln18_3_reg_1583_pp0_iter1_reg <= select_ln18_3_reg_1583;
                    zext_ln17_reg_1498(2 downto 0) <= zext_ln17_fu_552_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_lv1_0 = and_ln17_2_reg_1558) and (icmp_ln18_reg_1530 = ap_const_lv1_0) and (icmp_ln17_reg_1513 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln25_7_reg_1621 <= add_ln25_7_fu_822_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln17_fu_618_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                and_ln17_2_reg_1558 <= and_ln17_2_fu_690_p2;
                icmp_ln18_reg_1530 <= icmp_ln18_fu_636_p2;
                icmp_ln19_reg_1553 <= icmp_ln19_fu_684_p2;
                m_reg_1522 <= m_fu_630_p2;
                n_reg_1566 <= n_fu_696_p2;
                or_ln18_reg_1572 <= or_ln18_fu_702_p2;
                select_ln18_3_reg_1583 <= select_ln18_3_fu_728_p3;
                xor_ln17_reg_1548 <= xor_ln17_fu_672_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln17_reg_1513 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                and_ln18_reg_1605 <= and_ln18_fu_792_p2;
                h_reg_1610 <= h_fu_798_p2;
                select_ln25_reg_1615 <= select_ln25_fu_814_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter1_phi_ln24_1_reg_396 <= ap_phi_reg_pp0_iter0_phi_ln24_1_reg_396;
                ap_phi_reg_pp0_iter1_phi_ln24_reg_384 <= ap_phi_reg_pp0_iter0_phi_ln24_reg_384;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter2_phi_ln24_1_reg_396 <= ap_phi_reg_pp0_iter1_phi_ln24_1_reg_396;
                ap_phi_reg_pp0_iter2_phi_ln24_reg_384 <= ap_phi_reg_pp0_iter1_phi_ln24_reg_384;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter3_phi_ln24_1_reg_396 <= ap_phi_reg_pp0_iter2_phi_ln24_1_reg_396;
                ap_phi_reg_pp0_iter3_phi_ln24_reg_384 <= ap_phi_reg_pp0_iter2_phi_ln24_reg_384;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter4_phi_ln24_1_reg_396 <= ap_phi_reg_pp0_iter3_phi_ln24_1_reg_396;
                ap_phi_reg_pp0_iter4_phi_ln24_reg_384 <= ap_phi_reg_pp0_iter3_phi_ln24_reg_384;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter5_phi_ln24_1_reg_396 <= ap_phi_reg_pp0_iter4_phi_ln24_1_reg_396;
                ap_phi_reg_pp0_iter5_phi_ln24_reg_384 <= ap_phi_reg_pp0_iter4_phi_ln24_reg_384;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter6_phi_ln24_1_reg_396 <= ap_phi_reg_pp0_iter5_phi_ln24_1_reg_396;
                ap_phi_reg_pp0_iter6_phi_ln24_reg_384 <= ap_phi_reg_pp0_iter5_phi_ln24_reg_384;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter7_phi_ln24_1_reg_396 <= ap_phi_reg_pp0_iter6_phi_ln24_1_reg_396;
                ap_phi_reg_pp0_iter7_phi_ln24_reg_384 <= ap_phi_reg_pp0_iter6_phi_ln24_reg_384;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((select_ln18_3_reg_1583_pp0_iter16_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                biased_2_reg_1836 <= grp_fu_446_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((select_ln18_3_reg_1583_pp0_iter16_reg = ap_const_lv1_1) and (icmp_ln17_reg_1513_pp0_iter16_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                biased_4_reg_1843 <= grp_fu_456_p2;
                biased_5_reg_1850 <= grp_fu_461_p2;
                biased_reg_1829 <= grp_fu_436_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln17_reg_1513_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                input_0_load_reg_1709 <= input_0_q0;
                weights_conv1_buffer_11_reg_1689 <= weights_conv1_buffer_3_q0;
                weights_conv1_buffer_13_reg_1694 <= weights_conv1_buffer_2_q0;
                weights_conv1_buffer_15_reg_1699 <= weights_conv1_buffer_1_q0;
                weights_conv1_buffer_17_reg_1704 <= weights_conv1_buffer_q0;
                weights_conv1_buffer_7_reg_1679 <= weights_conv1_buffer_5_q0;
                weights_conv1_buffer_9_reg_1684 <= weights_conv1_buffer_4_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln17_reg_1513_pp0_iter5_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                output_0_addr_reg_1719 <= zext_ln24_3_fu_1030_p1(10 - 1 downto 0);
                output_1_addr_reg_1725 <= zext_ln24_3_fu_1030_p1(10 - 1 downto 0);
                output_2_addr_reg_1731 <= zext_ln24_3_fu_1030_p1(10 - 1 downto 0);
                output_3_addr_reg_1737 <= zext_ln24_3_fu_1030_p1(10 - 1 downto 0);
                output_4_addr_reg_1743 <= zext_ln24_3_fu_1030_p1(10 - 1 downto 0);
                output_5_addr_reg_1749 <= zext_ln24_3_fu_1030_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (select_ln18_2_reg_1638_pp0_iter6_reg = ap_const_lv1_0) and (icmp_ln17_reg_1513_pp0_iter6_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                output_1_load_reg_1765 <= output_1_q0;
                output_3_load_reg_1780 <= output_3_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (select_ln18_2_reg_1638_pp0_iter6_reg = ap_const_lv1_1) and (icmp_ln17_reg_1513_pp0_iter6_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (select_ln18_2_reg_1638_pp0_iter6_reg = ap_const_lv1_0) and (icmp_ln17_reg_1513_pp0_iter6_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then
                reg_520 <= grp_fu_470_p2;
                reg_526 <= grp_fu_478_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((select_ln18_2_reg_1638_pp0_iter11_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (icmp_ln17_reg_1513_pp0_iter11_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (select_ln18_2_reg_1638_pp0_iter11_reg = ap_const_lv1_0) and (icmp_ln17_reg_1513_pp0_iter11_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then
                reg_532 <= grp_fu_412_p2;
                reg_537 <= grp_fu_422_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((select_ln18_3_reg_1583_pp0_iter16_reg = ap_const_lv1_1) and (select_ln18_2_reg_1638_pp0_iter16_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter17 = ap_const_logic_1) and (icmp_ln17_reg_1513_pp0_iter16_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((select_ln18_3_reg_1583_pp0_iter16_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter17 = ap_const_logic_1) and (select_ln18_2_reg_1638_pp0_iter16_reg = ap_const_lv1_0) and (icmp_ln17_reg_1513_pp0_iter16_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then
                reg_542 <= grp_fu_441_p2;
                reg_547 <= grp_fu_451_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln17_fu_618_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                select_ln17_1_reg_1539 <= select_ln17_1_fu_650_p3;
                select_ln18_1_reg_1577 <= select_ln18_1_fu_708_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln17_reg_1513_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                select_ln18_2_reg_1638 <= select_ln18_2_fu_918_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln17_reg_1513_pp0_iter6_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                select_ln24_1_reg_1795 <= select_ln24_1_fu_1047_p3;
                select_ln24_reg_1755 <= select_ln24_fu_1040_p3;
                tmp3_reg_1760 <= grp_fu_466_p2;
                tmp_4_reg_1790 <= grp_fu_482_p2;
                tmp_5_reg_1800 <= grp_fu_486_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln17_reg_1513 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                select_ln25_2_reg_1626 <= select_ln25_2_fu_827_p3;
                w_reg_1633 <= w_fu_835_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((select_ln18_2_reg_1638_pp0_iter18_reg = ap_const_lv1_0) and (icmp_ln17_reg_1513_pp0_iter18_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                select_ln28_1_reg_1862 <= select_ln28_1_fu_1158_p3;
                select_ln28_3_reg_1877 <= select_ln28_3_fu_1326_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln17_reg_1513_pp0_iter18_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                select_ln28_4_reg_1887 <= select_ln28_4_fu_1438_p3;
                select_ln28_5_reg_1892 <= select_ln28_5_fu_1492_p3;
                select_ln28_reg_1857 <= select_ln28_fu_1102_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((select_ln18_2_reg_1638_pp0_iter18_reg = ap_const_lv1_1) and (icmp_ln17_reg_1513_pp0_iter18_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                select_ln28_6_reg_1867 <= select_ln28_6_fu_1215_p3;
                select_ln28_7_reg_1882 <= select_ln28_7_fu_1383_p3;
            end if;
        end if;
    end process;
    zext_ln17_reg_1498(4 downto 3) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln17_fu_618_p2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln17_fu_618_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter20 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter20 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln17_fu_618_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln17_fu_624_p2 <= std_logic_vector(unsigned(indvar_flatten85_reg_305) + unsigned(ap_const_lv15_1));
    add_ln18_1_fu_750_p2 <= std_logic_vector(unsigned(ap_const_lv13_1) + unsigned(indvar_flatten23_reg_327));
    add_ln19_1_fu_736_p2 <= std_logic_vector(unsigned(ap_const_lv10_1) + unsigned(indvar_flatten_reg_349));
    add_ln24_fu_1024_p2 <= std_logic_vector(unsigned(sub_ln24_fu_1015_p2) + unsigned(zext_ln24_2_fu_1021_p1));
    add_ln25_1_fu_975_p2 <= std_logic_vector(unsigned(zext_ln18_fu_905_p1) + unsigned(select_ln25_reg_1615));
    add_ln25_2_fu_600_p2 <= std_logic_vector(unsigned(add_ln25_fu_572_p2) + unsigned(zext_ln25_2_fu_596_p1));
    add_ln25_3_fu_858_p2 <= std_logic_vector(unsigned(zext_ln25_3_fu_844_p1) + unsigned(zext_ln25_4_fu_854_p1));
    add_ln25_4_fu_878_p2 <= std_logic_vector(unsigned(zext_ln17_2_fu_864_p1) + unsigned(zext_ln25_6_fu_874_p1));
    add_ln25_5_fu_928_p2 <= std_logic_vector(unsigned(add_ln25_4_fu_878_p2) + unsigned(zext_ln25_5_fu_925_p1));
    add_ln25_6_fu_947_p2 <= std_logic_vector(unsigned(zext_ln17_1_fu_841_p1) + unsigned(h_reg_1610));
    add_ln25_7_fu_822_p2 <= std_logic_vector(unsigned(zext_ln17_reg_1498) + unsigned(ap_phi_mux_h_0_phi_fu_364_p4));
    add_ln25_fu_572_p2 <= std_logic_vector(unsigned(zext_ln25_fu_556_p1) + unsigned(zext_ln25_1_fu_568_p1));
    and_ln17_1_fu_770_p2 <= (xor_ln17_reg_1548 and icmp_ln20_fu_764_p2);
    and_ln17_2_fu_690_p2 <= (xor_ln17_fu_672_p2 and icmp_ln19_fu_684_p2);
    and_ln17_fu_678_p2 <= (xor_ln17_fu_672_p2 and and_ln28_fu_612_p2);
    and_ln18_fu_792_p2 <= (or_ln18_1_fu_787_p2 and and_ln17_1_fu_770_p2);
    and_ln27_1_fu_1201_p2 <= (or_ln27_1_fu_1195_p2 and grp_fu_495_p2);
    and_ln27_2_fu_1144_p2 <= (or_ln27_2_fu_1138_p2 and grp_fu_495_p2);
    and_ln27_3_fu_1257_p2 <= (or_ln27_3_fu_1251_p2 and grp_fu_500_p2);
    and_ln27_4_fu_1369_p2 <= (or_ln27_4_fu_1363_p2 and grp_fu_505_p2);
    and_ln27_5_fu_1312_p2 <= (or_ln27_5_fu_1306_p2 and grp_fu_505_p2);
    and_ln27_6_fu_1425_p2 <= (or_ln27_6_fu_1419_p2 and grp_fu_510_p2);
    and_ln27_7_fu_1479_p2 <= (or_ln27_7_fu_1473_p2 and grp_fu_515_p2);
    and_ln27_fu_1089_p2 <= (or_ln27_fu_1083_p2 and grp_fu_490_p2);
    and_ln28_1_fu_722_p2 <= (select_ln17_2_fu_664_p3 and icmp_ln28_3_fu_716_p2);
    and_ln28_fu_612_p2 <= (icmp_ln28_fu_578_p2 and icmp_ln28_1_fu_606_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state23 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state10_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_1685_assign_proc : process(icmp_ln17_reg_1513_pp0_iter7_reg, ap_enable_reg_pp0_iter8, ap_block_pp0_stage0)
    begin
                ap_condition_1685 <= ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (icmp_ln17_reg_1513_pp0_iter7_reg = ap_const_lv1_0));
    end process;


    ap_condition_1688_assign_proc : process(icmp_ln17_reg_1513_pp0_iter19_reg, ap_enable_reg_pp0_iter20, ap_block_pp0_stage0)
    begin
                ap_condition_1688 <= ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_1) and (icmp_ln17_reg_1513_pp0_iter19_reg = ap_const_lv1_0));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln17_fu_618_p2)
    begin
        if ((icmp_ln17_fu_618_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20)
    begin
        if (((ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_h_0_phi_fu_364_p4_assign_proc : process(h_0_reg_360, icmp_ln17_reg_1513_pp0_iter1_reg, select_ln25_2_reg_1626, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln17_reg_1513_pp0_iter1_reg = ap_const_lv1_0))) then 
            ap_phi_mux_h_0_phi_fu_364_p4 <= select_ln25_2_reg_1626;
        else 
            ap_phi_mux_h_0_phi_fu_364_p4 <= h_0_reg_360;
        end if; 
    end process;


    ap_phi_mux_m_0_phi_fu_320_p4_assign_proc : process(m_0_reg_316, icmp_ln17_reg_1513, ap_CS_fsm_pp0_stage0, select_ln17_1_reg_1539, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln17_reg_1513 = ap_const_lv1_0))) then 
            ap_phi_mux_m_0_phi_fu_320_p4 <= select_ln17_1_reg_1539;
        else 
            ap_phi_mux_m_0_phi_fu_320_p4 <= m_0_reg_316;
        end if; 
    end process;


    ap_phi_mux_n_0_phi_fu_342_p4_assign_proc : process(n_0_reg_338, icmp_ln17_reg_1513, ap_CS_fsm_pp0_stage0, select_ln18_1_reg_1577, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln17_reg_1513 = ap_const_lv1_0))) then 
            ap_phi_mux_n_0_phi_fu_342_p4 <= select_ln18_1_reg_1577;
        else 
            ap_phi_mux_n_0_phi_fu_342_p4 <= n_0_reg_338;
        end if; 
    end process;


    ap_phi_mux_w_0_phi_fu_376_p4_assign_proc : process(w_0_reg_372, icmp_ln17_reg_1513_pp0_iter1_reg, w_reg_1633, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln17_reg_1513_pp0_iter1_reg = ap_const_lv1_0))) then 
            ap_phi_mux_w_0_phi_fu_376_p4 <= w_reg_1633;
        else 
            ap_phi_mux_w_0_phi_fu_376_p4 <= w_0_reg_372;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_phi_ln24_1_reg_396 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter0_phi_ln24_reg_384 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";

    ap_ready_assign_proc : process(ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln27_1_fu_1165_p1 <= reg_542_pp0_iter18_reg;
    bitcast_ln27_2_fu_1108_p1 <= reg_542_pp0_iter18_reg;
    bitcast_ln27_3_fu_1222_p1 <= biased_2_reg_1836_pp0_iter18_reg;
    bitcast_ln27_4_fu_1333_p1 <= reg_547_pp0_iter18_reg;
    bitcast_ln27_5_fu_1276_p1 <= reg_547_pp0_iter18_reg;
    bitcast_ln27_6_fu_1390_p1 <= biased_4_reg_1843_pp0_iter18_reg;
    bitcast_ln27_7_fu_1444_p1 <= biased_5_reg_1850_pp0_iter18_reg;
    bitcast_ln27_fu_1054_p1 <= biased_reg_1829_pp0_iter18_reg;

    grp_fu_412_p0_assign_proc : process(reg_520, select_ln18_2_reg_1638_pp0_iter7_reg, output_1_load_reg_1765, ap_condition_1685)
    begin
        if ((ap_const_boolean_1 = ap_condition_1685)) then
            if ((select_ln18_2_reg_1638_pp0_iter7_reg = ap_const_lv1_1)) then 
                grp_fu_412_p0 <= reg_520;
            elsif ((select_ln18_2_reg_1638_pp0_iter7_reg = ap_const_lv1_0)) then 
                grp_fu_412_p0 <= output_1_load_reg_1765;
            else 
                grp_fu_412_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_412_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_412_p1_assign_proc : process(reg_520, select_ln18_2_reg_1638_pp0_iter7_reg, ap_condition_1685)
    begin
        if ((ap_const_boolean_1 = ap_condition_1685)) then
            if ((select_ln18_2_reg_1638_pp0_iter7_reg = ap_const_lv1_1)) then 
                grp_fu_412_p1 <= ap_const_lv32_0;
            elsif ((select_ln18_2_reg_1638_pp0_iter7_reg = ap_const_lv1_0)) then 
                grp_fu_412_p1 <= reg_520;
            else 
                grp_fu_412_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_412_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_422_p0_assign_proc : process(reg_526, select_ln18_2_reg_1638_pp0_iter7_reg, output_3_load_reg_1780, ap_condition_1685)
    begin
        if ((ap_const_boolean_1 = ap_condition_1685)) then
            if ((select_ln18_2_reg_1638_pp0_iter7_reg = ap_const_lv1_1)) then 
                grp_fu_422_p0 <= reg_526;
            elsif ((select_ln18_2_reg_1638_pp0_iter7_reg = ap_const_lv1_0)) then 
                grp_fu_422_p0 <= output_3_load_reg_1780;
            else 
                grp_fu_422_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_422_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_422_p1_assign_proc : process(reg_526, select_ln18_2_reg_1638_pp0_iter7_reg, ap_condition_1685)
    begin
        if ((ap_const_boolean_1 = ap_condition_1685)) then
            if ((select_ln18_2_reg_1638_pp0_iter7_reg = ap_const_lv1_1)) then 
                grp_fu_422_p1 <= ap_const_lv32_0;
            elsif ((select_ln18_2_reg_1638_pp0_iter7_reg = ap_const_lv1_0)) then 
                grp_fu_422_p1 <= reg_526;
            else 
                grp_fu_422_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_422_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    h_fu_798_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(select_ln18_fu_775_p3));
    icmp_ln17_fu_618_p2 <= "1" when (indvar_flatten85_reg_305 = ap_const_lv15_4C90) else "0";
    icmp_ln18_fu_636_p2 <= "1" when (indvar_flatten23_reg_327 = ap_const_lv13_F50) else "0";
    icmp_ln19_fu_684_p2 <= "1" when (indvar_flatten_reg_349 = ap_const_lv10_310) else "0";
    icmp_ln20_fu_764_p2 <= "1" when (ap_phi_mux_w_0_phi_fu_376_p4 = ap_const_lv5_1C) else "0";
    icmp_ln24_1_fu_884_p2 <= "1" when (m_reg_1522_pp0_iter1_reg = ap_const_lv3_0) else "0";
    icmp_ln24_2_fu_912_p2 <= "1" when (or_ln24_1_fu_908_p2 = ap_const_lv3_0) else "0";
    icmp_ln24_fu_590_p2 <= "1" when (or_ln24_fu_584_p2 = ap_const_lv3_0) else "0";
    icmp_ln27_10_fu_1294_p2 <= "0" when (tmp_57_fu_1280_p4 = ap_const_lv8_FF) else "1";
    icmp_ln27_11_fu_1300_p2 <= "1" when (trunc_ln27_5_fu_1290_p1 = ap_const_lv23_0) else "0";
    icmp_ln27_12_fu_1407_p2 <= "0" when (tmp_59_fu_1393_p4 = ap_const_lv8_FF) else "1";
    icmp_ln27_13_fu_1413_p2 <= "1" when (trunc_ln27_6_fu_1403_p1 = ap_const_lv23_0) else "0";
    icmp_ln27_14_fu_1461_p2 <= "0" when (tmp_61_fu_1447_p4 = ap_const_lv8_FF) else "1";
    icmp_ln27_15_fu_1467_p2 <= "1" when (trunc_ln27_7_fu_1457_p1 = ap_const_lv23_0) else "0";
    icmp_ln27_1_fu_1077_p2 <= "1" when (trunc_ln27_fu_1067_p1 = ap_const_lv23_0) else "0";
    icmp_ln27_2_fu_1183_p2 <= "0" when (tmp_49_fu_1169_p4 = ap_const_lv8_FF) else "1";
    icmp_ln27_3_fu_1189_p2 <= "1" when (trunc_ln27_1_fu_1179_p1 = ap_const_lv23_0) else "0";
    icmp_ln27_4_fu_1126_p2 <= "0" when (tmp_51_fu_1112_p4 = ap_const_lv8_FF) else "1";
    icmp_ln27_5_fu_1132_p2 <= "1" when (trunc_ln27_2_fu_1122_p1 = ap_const_lv23_0) else "0";
    icmp_ln27_6_fu_1239_p2 <= "0" when (tmp_53_fu_1225_p4 = ap_const_lv8_FF) else "1";
    icmp_ln27_7_fu_1245_p2 <= "1" when (trunc_ln27_3_fu_1235_p1 = ap_const_lv23_0) else "0";
    icmp_ln27_8_fu_1351_p2 <= "0" when (tmp_55_fu_1337_p4 = ap_const_lv8_FF) else "1";
    icmp_ln27_9_fu_1357_p2 <= "1" when (trunc_ln27_4_fu_1347_p1 = ap_const_lv23_0) else "0";
    icmp_ln27_fu_1071_p2 <= "0" when (tmp_s_fu_1057_p4 = ap_const_lv8_FF) else "1";
    icmp_ln28_1_fu_606_p2 <= "1" when (ap_phi_mux_n_0_phi_fu_342_p4 = ap_const_lv3_4) else "0";
    icmp_ln28_2_fu_658_p2 <= "1" when (m_fu_630_p2 = ap_const_lv3_4) else "0";
    icmp_ln28_3_fu_716_p2 <= "1" when (n_fu_696_p2 = ap_const_lv3_4) else "0";
    icmp_ln28_fu_578_p2 <= "1" when (ap_phi_mux_m_0_phi_fu_320_p4 = ap_const_lv3_4) else "0";
    input_0_address0 <= zext_ln25_8_fu_988_p1(10 - 1 downto 0);

    input_0_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            input_0_ce0 <= ap_const_logic_1;
        else 
            input_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    m_fu_630_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(ap_phi_mux_m_0_phi_fu_320_p4));
    n_fu_696_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(select_ln17_fu_642_p3));
    or_ln18_1_fu_787_p2 <= (xor_ln18_fu_782_p2 or icmp_ln18_reg_1530);
    or_ln18_fu_702_p2 <= (icmp_ln18_fu_636_p2 or and_ln17_2_fu_690_p2);
    or_ln24_1_fu_908_p2 <= (select_ln17_1_reg_1539_pp0_iter1_reg or n_reg_1566_pp0_iter1_reg);
    or_ln24_fu_584_p2 <= (ap_phi_mux_n_0_phi_fu_342_p4 or ap_phi_mux_m_0_phi_fu_320_p4);
    or_ln25_1_fu_809_p2 <= (or_ln25_fu_804_p2 or icmp_ln18_reg_1530);
    or_ln25_fu_804_p2 <= (and_ln18_fu_792_p2 or and_ln17_2_reg_1558);
    or_ln27_1_fu_1195_p2 <= (icmp_ln27_3_fu_1189_p2 or icmp_ln27_2_fu_1183_p2);
    or_ln27_2_fu_1138_p2 <= (icmp_ln27_5_fu_1132_p2 or icmp_ln27_4_fu_1126_p2);
    or_ln27_3_fu_1251_p2 <= (icmp_ln27_7_fu_1245_p2 or icmp_ln27_6_fu_1239_p2);
    or_ln27_4_fu_1363_p2 <= (icmp_ln27_9_fu_1357_p2 or icmp_ln27_8_fu_1351_p2);
    or_ln27_5_fu_1306_p2 <= (icmp_ln27_11_fu_1300_p2 or icmp_ln27_10_fu_1294_p2);
    or_ln27_6_fu_1419_p2 <= (icmp_ln27_13_fu_1413_p2 or icmp_ln27_12_fu_1407_p2);
    or_ln27_7_fu_1473_p2 <= (icmp_ln27_15_fu_1467_p2 or icmp_ln27_14_fu_1461_p2);
    or_ln27_fu_1083_p2 <= (icmp_ln27_fu_1071_p2 or icmp_ln27_1_fu_1077_p2);
    output_0_address0 <= zext_ln24_3_fu_1030_p1(10 - 1 downto 0);
    output_0_address1 <= output_0_addr_reg_1719_pp0_iter19_reg;

    output_0_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_0_ce0 <= ap_const_logic_1;
        else 
            output_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_0_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter20)
    begin
        if (((ap_enable_reg_pp0_iter20 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_0_ce1 <= ap_const_logic_1;
        else 
            output_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    output_0_d1 <= select_ln28_reg_1857;

    output_0_we1_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln17_reg_1513_pp0_iter19_reg, ap_enable_reg_pp0_iter20)
    begin
        if (((ap_enable_reg_pp0_iter20 = ap_const_logic_1) and (icmp_ln17_reg_1513_pp0_iter19_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_0_we1 <= ap_const_logic_1;
        else 
            output_0_we1 <= ap_const_logic_0;
        end if; 
    end process;

    output_1_address0 <= zext_ln24_3_fu_1030_p1(10 - 1 downto 0);
    output_1_address1 <= output_1_addr_reg_1725_pp0_iter19_reg;

    output_1_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_1_ce0 <= ap_const_logic_1;
        else 
            output_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_1_ce1_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln17_reg_1513_pp0_iter19_reg, select_ln18_2_reg_1638_pp0_iter19_reg, ap_enable_reg_pp0_iter20)
    begin
        if ((((select_ln18_2_reg_1638_pp0_iter19_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter20 = ap_const_logic_1) and (icmp_ln17_reg_1513_pp0_iter19_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter20 = ap_const_logic_1) and (select_ln18_2_reg_1638_pp0_iter19_reg = ap_const_lv1_0) and (icmp_ln17_reg_1513_pp0_iter19_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            output_1_ce1 <= ap_const_logic_1;
        else 
            output_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    output_1_d1_assign_proc : process(select_ln18_2_reg_1638_pp0_iter19_reg, select_ln28_1_reg_1862, select_ln28_6_reg_1867, ap_condition_1688)
    begin
        if ((ap_const_boolean_1 = ap_condition_1688)) then
            if ((select_ln18_2_reg_1638_pp0_iter19_reg = ap_const_lv1_1)) then 
                output_1_d1 <= select_ln28_6_reg_1867;
            elsif ((select_ln18_2_reg_1638_pp0_iter19_reg = ap_const_lv1_0)) then 
                output_1_d1 <= select_ln28_1_reg_1862;
            else 
                output_1_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            output_1_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_1_we1_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln17_reg_1513_pp0_iter19_reg, select_ln18_2_reg_1638_pp0_iter19_reg, ap_enable_reg_pp0_iter20)
    begin
        if ((((select_ln18_2_reg_1638_pp0_iter19_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter20 = ap_const_logic_1) and (icmp_ln17_reg_1513_pp0_iter19_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter20 = ap_const_logic_1) and (select_ln18_2_reg_1638_pp0_iter19_reg = ap_const_lv1_0) and (icmp_ln17_reg_1513_pp0_iter19_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            output_1_we1 <= ap_const_logic_1;
        else 
            output_1_we1 <= ap_const_logic_0;
        end if; 
    end process;

    output_2_address0 <= zext_ln24_3_fu_1030_p1(10 - 1 downto 0);
    output_2_address1 <= output_2_addr_reg_1731_pp0_iter19_reg;

    output_2_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_2_ce0 <= ap_const_logic_1;
        else 
            output_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_2_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter20)
    begin
        if (((ap_enable_reg_pp0_iter20 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_2_ce1 <= ap_const_logic_1;
        else 
            output_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    output_2_d1 <= select_ln28_2_reg_1872;

    output_2_we1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter20)
    begin
        if (((ap_enable_reg_pp0_iter20 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_2_we1 <= ap_const_logic_1;
        else 
            output_2_we1 <= ap_const_logic_0;
        end if; 
    end process;

    output_3_address0 <= zext_ln24_3_fu_1030_p1(10 - 1 downto 0);
    output_3_address1 <= output_3_addr_reg_1737_pp0_iter19_reg;

    output_3_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_3_ce0 <= ap_const_logic_1;
        else 
            output_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_3_ce1_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln17_reg_1513_pp0_iter19_reg, select_ln18_2_reg_1638_pp0_iter19_reg, ap_enable_reg_pp0_iter20)
    begin
        if ((((select_ln18_2_reg_1638_pp0_iter19_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter20 = ap_const_logic_1) and (icmp_ln17_reg_1513_pp0_iter19_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter20 = ap_const_logic_1) and (select_ln18_2_reg_1638_pp0_iter19_reg = ap_const_lv1_0) and (icmp_ln17_reg_1513_pp0_iter19_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            output_3_ce1 <= ap_const_logic_1;
        else 
            output_3_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    output_3_d1_assign_proc : process(select_ln18_2_reg_1638_pp0_iter19_reg, select_ln28_3_reg_1877, select_ln28_7_reg_1882, ap_condition_1688)
    begin
        if ((ap_const_boolean_1 = ap_condition_1688)) then
            if ((select_ln18_2_reg_1638_pp0_iter19_reg = ap_const_lv1_1)) then 
                output_3_d1 <= select_ln28_7_reg_1882;
            elsif ((select_ln18_2_reg_1638_pp0_iter19_reg = ap_const_lv1_0)) then 
                output_3_d1 <= select_ln28_3_reg_1877;
            else 
                output_3_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            output_3_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_3_we1_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln17_reg_1513_pp0_iter19_reg, select_ln18_2_reg_1638_pp0_iter19_reg, ap_enable_reg_pp0_iter20)
    begin
        if ((((select_ln18_2_reg_1638_pp0_iter19_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter20 = ap_const_logic_1) and (icmp_ln17_reg_1513_pp0_iter19_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter20 = ap_const_logic_1) and (select_ln18_2_reg_1638_pp0_iter19_reg = ap_const_lv1_0) and (icmp_ln17_reg_1513_pp0_iter19_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            output_3_we1 <= ap_const_logic_1;
        else 
            output_3_we1 <= ap_const_logic_0;
        end if; 
    end process;

    output_4_address0 <= zext_ln24_3_fu_1030_p1(10 - 1 downto 0);
    output_4_address1 <= output_4_addr_reg_1743_pp0_iter19_reg;

    output_4_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_4_ce0 <= ap_const_logic_1;
        else 
            output_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_4_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter20)
    begin
        if (((ap_enable_reg_pp0_iter20 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_4_ce1 <= ap_const_logic_1;
        else 
            output_4_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    output_4_d1 <= select_ln28_4_reg_1887;

    output_4_we1_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln17_reg_1513_pp0_iter19_reg, ap_enable_reg_pp0_iter20)
    begin
        if (((ap_enable_reg_pp0_iter20 = ap_const_logic_1) and (icmp_ln17_reg_1513_pp0_iter19_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_4_we1 <= ap_const_logic_1;
        else 
            output_4_we1 <= ap_const_logic_0;
        end if; 
    end process;

    output_5_address0 <= zext_ln24_3_fu_1030_p1(10 - 1 downto 0);
    output_5_address1 <= output_5_addr_reg_1749_pp0_iter19_reg;

    output_5_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_5_ce0 <= ap_const_logic_1;
        else 
            output_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_5_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter20)
    begin
        if (((ap_enable_reg_pp0_iter20 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_5_ce1 <= ap_const_logic_1;
        else 
            output_5_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    output_5_d1 <= select_ln28_5_reg_1892;

    output_5_we1_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln17_reg_1513_pp0_iter19_reg, ap_enable_reg_pp0_iter20)
    begin
        if (((ap_enable_reg_pp0_iter20 = ap_const_logic_1) and (icmp_ln17_reg_1513_pp0_iter19_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_5_we1 <= ap_const_logic_1;
        else 
            output_5_we1 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln17_1_fu_650_p3 <= 
        m_fu_630_p2 when (icmp_ln18_fu_636_p2(0) = '1') else 
        ap_phi_mux_m_0_phi_fu_320_p4;
    select_ln17_2_fu_664_p3 <= 
        icmp_ln28_2_fu_658_p2 when (icmp_ln18_fu_636_p2(0) = '1') else 
        icmp_ln28_fu_578_p2;
    select_ln17_3_fu_889_p3 <= 
        icmp_ln24_1_fu_884_p2 when (icmp_ln18_reg_1530_pp0_iter1_reg(0) = '1') else 
        icmp_ln24_reg_1503_pp0_iter1_reg;
    select_ln17_4_fu_895_p3 <= 
        add_ln25_3_fu_858_p2 when (icmp_ln18_reg_1530_pp0_iter1_reg(0) = '1') else 
        add_ln25_2_reg_1508_pp0_iter1_reg;
    select_ln17_5_fu_955_p3 <= 
        zext_ln25_7_fu_952_p1 when (icmp_ln18_reg_1530_pp0_iter1_reg(0) = '1') else 
        add_ln25_7_reg_1621;
    select_ln17_fu_642_p3 <= 
        ap_const_lv3_0 when (icmp_ln18_fu_636_p2(0) = '1') else 
        ap_phi_mux_n_0_phi_fu_342_p4;
    select_ln18_1_fu_708_p3 <= 
        n_fu_696_p2 when (and_ln17_2_fu_690_p2(0) = '1') else 
        select_ln17_fu_642_p3;
    select_ln18_2_fu_918_p3 <= 
        icmp_ln24_2_fu_912_p2 when (and_ln17_2_reg_1558_pp0_iter1_reg(0) = '1') else 
        select_ln17_3_fu_889_p3;
    select_ln18_3_fu_728_p3 <= 
        and_ln28_1_fu_722_p2 when (and_ln17_2_fu_690_p2(0) = '1') else 
        and_ln17_fu_678_p2;
    select_ln18_4_fu_934_p3 <= 
        add_ln25_5_fu_928_p2 when (and_ln17_2_reg_1558_pp0_iter1_reg(0) = '1') else 
        zext_ln17_3_fu_901_p1;
    select_ln18_5_fu_961_p3 <= 
        zext_ln17_1_fu_841_p1 when (and_ln17_2_reg_1558_pp0_iter1_reg(0) = '1') else 
        select_ln17_5_fu_955_p3;
    select_ln18_6_fu_756_p3 <= 
        ap_const_lv13_1 when (icmp_ln18_fu_636_p2(0) = '1') else 
        add_ln18_1_fu_750_p2;
    select_ln18_fu_775_p3 <= 
        ap_const_lv5_0 when (or_ln18_reg_1572(0) = '1') else 
        ap_phi_mux_h_0_phi_fu_364_p4;
    select_ln19_fu_742_p3 <= 
        ap_const_lv10_1 when (or_ln18_fu_702_p2(0) = '1') else 
        add_ln19_1_fu_736_p2;
    select_ln24_1_fu_1047_p3 <= 
        ap_const_lv32_0 when (select_ln18_2_reg_1638_pp0_iter6_reg(0) = '1') else 
        output_5_q0;
    select_ln24_fu_1040_p3 <= 
        ap_const_lv32_0 when (select_ln18_2_reg_1638_pp0_iter6_reg(0) = '1') else 
        output_0_q0;
    select_ln25_1_fu_968_p3 <= 
        add_ln25_6_fu_947_p2 when (and_ln18_reg_1605(0) = '1') else 
        select_ln18_5_fu_961_p3;
    select_ln25_2_fu_827_p3 <= 
        h_fu_798_p2 when (and_ln18_fu_792_p2(0) = '1') else 
        select_ln18_fu_775_p3;
    select_ln25_fu_814_p3 <= 
        ap_const_lv5_0 when (or_ln25_1_fu_809_p2(0) = '1') else 
        ap_phi_mux_w_0_phi_fu_376_p4;
    select_ln27_1_fu_1150_p3 <= 
        reg_542_pp0_iter18_reg when (and_ln27_2_fu_1144_p2(0) = '1') else 
        ap_const_lv32_0;
    select_ln27_2_fu_1263_p3 <= 
        biased_2_reg_1836_pp0_iter18_reg when (and_ln27_3_fu_1257_p2(0) = '1') else 
        ap_const_lv32_0;
    select_ln27_3_fu_1318_p3 <= 
        reg_547_pp0_iter18_reg when (and_ln27_5_fu_1312_p2(0) = '1') else 
        ap_const_lv32_0;
    select_ln27_4_fu_1431_p3 <= 
        biased_4_reg_1843_pp0_iter18_reg when (and_ln27_6_fu_1425_p2(0) = '1') else 
        ap_const_lv32_0;
    select_ln27_5_fu_1485_p3 <= 
        biased_5_reg_1850_pp0_iter18_reg when (and_ln27_7_fu_1479_p2(0) = '1') else 
        ap_const_lv32_0;
    select_ln27_6_fu_1207_p3 <= 
        reg_542_pp0_iter18_reg when (and_ln27_1_fu_1201_p2(0) = '1') else 
        ap_const_lv32_0;
    select_ln27_7_fu_1375_p3 <= 
        reg_547_pp0_iter18_reg when (and_ln27_4_fu_1369_p2(0) = '1') else 
        ap_const_lv32_0;
    select_ln27_fu_1095_p3 <= 
        biased_reg_1829_pp0_iter18_reg when (and_ln27_fu_1089_p2(0) = '1') else 
        ap_const_lv32_0;
    select_ln28_1_fu_1158_p3 <= 
        select_ln27_1_fu_1150_p3 when (select_ln18_3_reg_1583_pp0_iter18_reg(0) = '1') else 
        reg_532_pp0_iter18_reg;
    select_ln28_2_fu_1270_p3 <= 
        select_ln27_2_fu_1263_p3 when (select_ln18_3_reg_1583_pp0_iter18_reg(0) = '1') else 
        acc_2_reg_1811_pp0_iter18_reg;
    select_ln28_3_fu_1326_p3 <= 
        select_ln27_3_fu_1318_p3 when (select_ln18_3_reg_1583_pp0_iter18_reg(0) = '1') else 
        reg_537_pp0_iter18_reg;
    select_ln28_4_fu_1438_p3 <= 
        select_ln27_4_fu_1431_p3 when (select_ln18_3_reg_1583_pp0_iter18_reg(0) = '1') else 
        acc_4_reg_1817_pp0_iter18_reg;
    select_ln28_5_fu_1492_p3 <= 
        select_ln27_5_fu_1485_p3 when (select_ln18_3_reg_1583_pp0_iter18_reg(0) = '1') else 
        acc_5_reg_1823_pp0_iter18_reg;
    select_ln28_6_fu_1215_p3 <= 
        select_ln27_6_fu_1207_p3 when (select_ln18_3_reg_1583_pp0_iter18_reg(0) = '1') else 
        reg_532_pp0_iter18_reg;
    select_ln28_7_fu_1383_p3 <= 
        select_ln27_7_fu_1375_p3 when (select_ln18_3_reg_1583_pp0_iter18_reg(0) = '1') else 
        reg_537_pp0_iter18_reg;
    select_ln28_fu_1102_p3 <= 
        select_ln27_fu_1095_p3 when (select_ln18_3_reg_1583_pp0_iter18_reg(0) = '1') else 
        acc_reg_1805_pp0_iter18_reg;
    sub_ln24_fu_1015_p2 <= std_logic_vector(unsigned(zext_ln24_fu_1000_p1) - unsigned(zext_ln24_1_fu_1011_p1));
    tmp_49_fu_1169_p4 <= bitcast_ln27_1_fu_1165_p1(30 downto 23);
    tmp_51_fu_1112_p4 <= bitcast_ln27_2_fu_1108_p1(30 downto 23);
    tmp_53_fu_1225_p4 <= bitcast_ln27_3_fu_1222_p1(30 downto 23);
    tmp_55_fu_1337_p4 <= bitcast_ln27_4_fu_1333_p1(30 downto 23);
    tmp_57_fu_1280_p4 <= bitcast_ln27_5_fu_1276_p1(30 downto 23);
    tmp_59_fu_1393_p4 <= bitcast_ln27_6_fu_1390_p1(30 downto 23);
    tmp_61_fu_1447_p4 <= bitcast_ln27_7_fu_1444_p1(30 downto 23);
    tmp_63_fu_560_p3 <= (ap_phi_mux_m_0_phi_fu_320_p4 & ap_const_lv2_0);
    tmp_64_fu_847_p3 <= (m_reg_1522_pp0_iter1_reg & ap_const_lv2_0);
    tmp_65_fu_867_p3 <= (select_ln17_1_reg_1539_pp0_iter1_reg & ap_const_lv2_0);
    tmp_66_fu_993_p3 <= (select_ln25_2_reg_1626_pp0_iter5_reg & ap_const_lv5_0);
    tmp_67_fu_1004_p3 <= (select_ln25_2_reg_1626_pp0_iter5_reg & ap_const_lv2_0);
    tmp_68_fu_980_p3 <= (select_ln25_1_fu_968_p3 & add_ln25_1_fu_975_p2);
    tmp_s_fu_1057_p4 <= bitcast_ln27_fu_1054_p1(30 downto 23);
    trunc_ln27_1_fu_1179_p1 <= bitcast_ln27_1_fu_1165_p1(23 - 1 downto 0);
    trunc_ln27_2_fu_1122_p1 <= bitcast_ln27_2_fu_1108_p1(23 - 1 downto 0);
    trunc_ln27_3_fu_1235_p1 <= bitcast_ln27_3_fu_1222_p1(23 - 1 downto 0);
    trunc_ln27_4_fu_1347_p1 <= bitcast_ln27_4_fu_1333_p1(23 - 1 downto 0);
    trunc_ln27_5_fu_1290_p1 <= bitcast_ln27_5_fu_1276_p1(23 - 1 downto 0);
    trunc_ln27_6_fu_1403_p1 <= bitcast_ln27_6_fu_1390_p1(23 - 1 downto 0);
    trunc_ln27_7_fu_1457_p1 <= bitcast_ln27_7_fu_1444_p1(23 - 1 downto 0);
    trunc_ln27_fu_1067_p1 <= bitcast_ln27_fu_1054_p1(23 - 1 downto 0);
    w_fu_835_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(select_ln25_fu_814_p3));
    weights_conv1_buffer_1_address0 <= select_ln18_4_fu_934_p3(5 - 1 downto 0);

    weights_conv1_buffer_1_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            weights_conv1_buffer_1_ce0 <= ap_const_logic_1;
        else 
            weights_conv1_buffer_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weights_conv1_buffer_2_address0 <= select_ln18_4_fu_934_p3(5 - 1 downto 0);

    weights_conv1_buffer_2_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            weights_conv1_buffer_2_ce0 <= ap_const_logic_1;
        else 
            weights_conv1_buffer_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weights_conv1_buffer_3_address0 <= select_ln18_4_fu_934_p3(5 - 1 downto 0);

    weights_conv1_buffer_3_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            weights_conv1_buffer_3_ce0 <= ap_const_logic_1;
        else 
            weights_conv1_buffer_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weights_conv1_buffer_4_address0 <= select_ln18_4_fu_934_p3(5 - 1 downto 0);

    weights_conv1_buffer_4_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            weights_conv1_buffer_4_ce0 <= ap_const_logic_1;
        else 
            weights_conv1_buffer_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weights_conv1_buffer_5_address0 <= select_ln18_4_fu_934_p3(5 - 1 downto 0);

    weights_conv1_buffer_5_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            weights_conv1_buffer_5_ce0 <= ap_const_logic_1;
        else 
            weights_conv1_buffer_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weights_conv1_buffer_address0 <= select_ln18_4_fu_934_p3(5 - 1 downto 0);

    weights_conv1_buffer_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            weights_conv1_buffer_ce0 <= ap_const_logic_1;
        else 
            weights_conv1_buffer_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln17_fu_672_p2 <= (icmp_ln18_fu_636_p2 xor ap_const_lv1_1);
    xor_ln18_fu_782_p2 <= (icmp_ln19_reg_1553 xor ap_const_lv1_1);
    zext_ln17_1_fu_841_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln17_1_reg_1539_pp0_iter1_reg),5));
    zext_ln17_2_fu_864_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln17_1_reg_1539_pp0_iter1_reg),64));
    zext_ln17_3_fu_901_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln17_4_fu_895_p3),64));
    zext_ln17_fu_552_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_m_0_phi_fu_320_p4),5));
    zext_ln18_fu_905_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln18_1_reg_1577_pp0_iter1_reg),5));
    zext_ln24_1_fu_1011_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_67_fu_1004_p3),11));
    zext_ln24_2_fu_1021_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln25_reg_1615_pp0_iter5_reg),11));
    zext_ln24_3_fu_1030_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln24_fu_1024_p2),64));
    zext_ln24_fu_1000_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_66_fu_993_p3),11));
    zext_ln25_1_fu_568_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_63_fu_560_p3),6));
    zext_ln25_2_fu_596_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_n_0_phi_fu_342_p4),6));
    zext_ln25_3_fu_844_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_reg_1522_pp0_iter1_reg),6));
    zext_ln25_4_fu_854_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_64_fu_847_p3),6));
    zext_ln25_5_fu_925_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_reg_1566_pp0_iter1_reg),64));
    zext_ln25_6_fu_874_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_65_fu_867_p3),64));
    zext_ln25_7_fu_952_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_reg_1522_pp0_iter1_reg),5));
    zext_ln25_8_fu_988_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_68_fu_980_p3),64));
    zext_ln25_fu_556_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_m_0_phi_fu_320_p4),6));
end behav;
