-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity max_pooling4 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_0_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    input_0_ce0 : OUT STD_LOGIC;
    input_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    input_1_ce0 : OUT STD_LOGIC;
    input_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    output_0_ce0 : OUT STD_LOGIC;
    output_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_0_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    output_0_ce1 : OUT STD_LOGIC;
    output_0_we1 : OUT STD_LOGIC;
    output_0_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    output_1_ce0 : OUT STD_LOGIC;
    output_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_1_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    output_1_ce1 : OUT STD_LOGIC;
    output_1_we1 : OUT STD_LOGIC;
    output_1_d1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of max_pooling4 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv10_320 : STD_LOGIC_VECTOR (9 downto 0) := "1100100000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv9_A0 : STD_LOGIC_VECTOR (8 downto 0) := "010100000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv6_10 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_const_lv7_20 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_D368D4A5 : STD_LOGIC_VECTOR (31 downto 0) := "11010011011010001101010010100101";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten111_reg_166 : STD_LOGIC_VECTOR (9 downto 0);
    signal h_0_reg_177 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten59_reg_188 : STD_LOGIC_VECTOR (8 downto 0);
    signal w_0_reg_199 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten21_reg_210 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_0_reg_221 : STD_LOGIC_VECTOR (1 downto 0);
    signal indvar_flatten_reg_232 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_0_reg_243 : STD_LOGIC_VECTOR (1 downto 0);
    signal c_0_0_reg_254 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln_fu_285_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln_reg_1187 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal shl_ln129_1_fu_293_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln129_1_reg_1192 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln129_fu_309_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln129_reg_1197 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln129_1_fu_323_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln129_1_reg_1202 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln121_fu_335_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln121_reg_1207 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln121_reg_1207_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln121_reg_1207_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln121_reg_1207_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln121_reg_1207_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln121_reg_1207_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln121_reg_1207_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln121_reg_1207_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln121_fu_341_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal h_fu_347_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal h_reg_1216 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln122_fu_353_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln122_reg_1221 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln121_2_fu_367_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln121_2_reg_1229 : STD_LOGIC_VECTOR (2 downto 0);
    signal and_ln121_4_fu_423_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln121_4_reg_1235 : STD_LOGIC_VECTOR (0 downto 0);
    signal w_fu_429_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal w_reg_1242 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln122_2_fu_449_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln122_2_reg_1247 : STD_LOGIC_VECTOR (2 downto 0);
    signal and_ln122_3_fu_487_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln122_3_reg_1253 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_493_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_reg_1259 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln123_4_fu_531_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln123_4_reg_1264 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln123_fu_545_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln123_reg_1269 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln123_5_fu_551_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_fu_559_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_reg_1280 : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln131_1_fu_589_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln131_1_reg_1285 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln124_3_fu_595_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal lshr_ln_reg_1295 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln125_fu_613_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln124_4_fu_625_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln123_6_fu_639_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln122_5_fu_653_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln124_1_fu_762_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln124_1_reg_1323 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln124_2_fu_769_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln124_2_reg_1328 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln124_2_reg_1328_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln129_5_fu_805_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln129_5_reg_1334 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln131_3_fu_852_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln131_3_reg_1340 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln129_7_fu_885_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln129_7_reg_1345 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln129_7_reg_1345_pp0_iter3_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln129_7_reg_1345_pp0_iter4_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal output_0_addr_reg_1350 : STD_LOGIC_VECTOR (7 downto 0);
    signal output_0_addr_reg_1350_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal output_0_addr_reg_1350_pp0_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal output_0_addr_reg_1350_pp0_iter5_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal output_0_addr_reg_1350_pp0_iter6_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal output_0_addr_reg_1350_pp0_iter7_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal output_1_addr_reg_1356 : STD_LOGIC_VECTOR (7 downto 0);
    signal output_1_addr_reg_1356_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal output_1_addr_reg_1356_pp0_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal output_1_addr_reg_1356_pp0_iter5_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal output_1_addr_reg_1356_pp0_iter6_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal output_1_addr_reg_1356_pp0_iter7_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_fu_896_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln131_reg_1362 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln131_reg_1362_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln131_1_fu_903_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln131_1_reg_1369 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln131_1_reg_1369_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln132_fu_956_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln132_reg_1386 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln132_reg_1386_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln132_1_fu_1004_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln132_1_reg_1393 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln132_1_reg_1393_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal input_0_load_reg_1400 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_1_load_reg_1407 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln133_fu_1093_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln133_reg_1414 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln133_1_fu_1181_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln133_1_reg_1419 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_phi_mux_h_0_phi_fu_181_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_w_0_phi_fu_203_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln131_2_fu_891_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln129_5_fu_910_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln123_fu_301_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln124_fu_315_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln124_fu_319_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln123_fu_305_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln121_fu_375_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln131_fu_329_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln125_fu_393_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln124_fu_405_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln123_fu_417_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln121_fu_359_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln122_fu_435_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln122_fu_457_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln121_fu_381_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln122_1_fu_463_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln121_1_fu_387_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln121_2_fu_399_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln121_3_fu_411_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln122_fu_441_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln123_fu_499_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln123_1_fu_505_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln123_1_fu_519_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln122_fu_469_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln122_1_fu_475_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln122_2_fu_481_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln123_fu_539_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln123_fu_511_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln124_fu_565_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln124_1_fu_571_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln124_1_fu_585_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln123_1_fu_523_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln124_fu_577_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln124_1_fu_619_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln123_1_fu_633_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln122_1_fu_647_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln129_mid1_fu_661_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln129_1_mid1_fu_689_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln121_3_fu_677_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln121_4_fu_683_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln123_1_fu_713_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln121_1_fu_668_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln121_5_fu_722_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln129_2_fu_716_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln122_4_fu_728_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln123_2_fu_735_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln122_1_fu_696_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln122_3_fu_706_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln124_1_fu_753_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln129_3_fu_756_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln123_3_fu_746_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_10_fu_777_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_11_fu_788_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln129_3_fu_795_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln129_2_fu_784_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln129_4_fu_799_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln129_fu_742_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_13_fu_811_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln129_1_fu_774_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln131_fu_818_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln131_fu_822_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln121_fu_674_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln131_1_fu_828_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln131_1_fu_834_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl_cast_fu_838_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln131_2_fu_846_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln122_fu_703_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_12_fu_868_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln129_4_fu_875_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl1_cast_fu_861_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln129_6_fu_879_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln124_2_fu_858_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal bitcast_ln132_fu_915_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_918_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln132_fu_928_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln132_1_fu_938_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln132_fu_932_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln132_fu_944_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_265_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln132_fu_950_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln132_1_fu_963_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_966_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln132_1_fu_976_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln132_3_fu_986_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln132_2_fu_980_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln132_1_fu_992_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_270_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln132_1_fu_998_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln133_fu_1011_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln133_1_fu_1028_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_1014_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln133_fu_1024_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln133_1_fu_1051_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln133_fu_1045_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_1031_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln133_1_fu_1041_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln133_3_fu_1069_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln133_2_fu_1063_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln133_fu_1057_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln133_1_fu_1075_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln133_fu_1081_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_275_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln133_1_fu_1087_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln133_2_fu_1099_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln133_3_fu_1116_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_1102_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln133_2_fu_1112_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln133_5_fu_1139_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln133_4_fu_1133_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_1119_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln133_3_fu_1129_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln133_7_fu_1157_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln133_6_fu_1151_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln133_2_fu_1145_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln133_3_fu_1163_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln133_2_fu_1169_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_280_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln133_3_fu_1175_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component LeNet_fcmp_32ns_3jbC IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    LeNet_fcmp_32ns_3jbC_U114 : component LeNet_fcmp_32ns_3jbC
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => select_ln131_reg_1362,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_265_p2);

    LeNet_fcmp_32ns_3jbC_U115 : component LeNet_fcmp_32ns_3jbC
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => select_ln131_1_reg_1369,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_270_p2);

    LeNet_fcmp_32ns_3jbC_U116 : component LeNet_fcmp_32ns_3jbC
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => select_ln132_reg_1386,
        din1 => input_0_q0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_275_p2);

    LeNet_fcmp_32ns_3jbC_U117 : component LeNet_fcmp_32ns_3jbC
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => select_ln132_1_reg_1393,
        din1 => input_1_q0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_280_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    c_0_0_reg_254_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln121_fu_335_p2 = ap_const_lv1_0))) then 
                c_0_0_reg_254 <= add_ln125_fu_613_p2;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                c_0_0_reg_254 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    h_0_reg_177_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln121_reg_1207 = ap_const_lv1_0))) then 
                h_0_reg_177 <= select_ln121_2_reg_1229;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                h_0_reg_177 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_0_reg_221_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln121_fu_335_p2 = ap_const_lv1_0))) then 
                i_0_reg_221 <= select_ln123_5_fu_551_p3;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_221 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    indvar_flatten111_reg_166_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln121_fu_335_p2 = ap_const_lv1_0))) then 
                indvar_flatten111_reg_166 <= add_ln121_fu_341_p2;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten111_reg_166 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    indvar_flatten21_reg_210_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln121_fu_335_p2 = ap_const_lv1_0))) then 
                indvar_flatten21_reg_210 <= select_ln123_6_fu_639_p3;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten21_reg_210 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    indvar_flatten59_reg_188_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln121_fu_335_p2 = ap_const_lv1_0))) then 
                indvar_flatten59_reg_188 <= select_ln122_5_fu_653_p3;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten59_reg_188 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_232_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln121_fu_335_p2 = ap_const_lv1_0))) then 
                indvar_flatten_reg_232 <= select_ln124_4_fu_625_p3;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_232 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    j_0_reg_243_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln121_fu_335_p2 = ap_const_lv1_0))) then 
                j_0_reg_243 <= select_ln124_3_fu_595_p3;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                j_0_reg_243 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    w_0_reg_199_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln121_reg_1207 = ap_const_lv1_0))) then 
                w_0_reg_199 <= select_ln122_2_reg_1247;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                w_0_reg_199 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln129_1_reg_1202 <= add_ln129_1_fu_323_p2;
                add_ln129_reg_1197 <= add_ln129_fu_309_p2;
                icmp_ln121_reg_1207 <= icmp_ln121_fu_335_p2;
                icmp_ln121_reg_1207_pp0_iter1_reg <= icmp_ln121_reg_1207;
                    shl_ln129_1_reg_1192(3 downto 1) <= shl_ln129_1_fu_293_p3(3 downto 1);
                    shl_ln_reg_1187(3 downto 1) <= shl_ln_fu_285_p3(3 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln121_reg_1207 = ap_const_lv1_0))) then
                add_ln129_5_reg_1334 <= add_ln129_5_fu_805_p2;
                add_ln131_3_reg_1340 <= add_ln131_3_fu_852_p2;
                select_ln124_1_reg_1323 <= select_ln124_1_fu_762_p3;
                select_ln124_2_reg_1328 <= select_ln124_2_fu_769_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln121_reg_1207_pp0_iter1_reg = ap_const_lv1_0))) then
                add_ln129_7_reg_1345 <= add_ln129_7_fu_885_p2;
                output_0_addr_reg_1350 <= zext_ln131_2_fu_891_p1(8 - 1 downto 0);
                output_1_addr_reg_1356 <= zext_ln131_2_fu_891_p1(8 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln129_7_reg_1345_pp0_iter3_reg <= add_ln129_7_reg_1345;
                add_ln129_7_reg_1345_pp0_iter4_reg <= add_ln129_7_reg_1345_pp0_iter3_reg;
                icmp_ln121_reg_1207_pp0_iter2_reg <= icmp_ln121_reg_1207_pp0_iter1_reg;
                icmp_ln121_reg_1207_pp0_iter3_reg <= icmp_ln121_reg_1207_pp0_iter2_reg;
                icmp_ln121_reg_1207_pp0_iter4_reg <= icmp_ln121_reg_1207_pp0_iter3_reg;
                icmp_ln121_reg_1207_pp0_iter5_reg <= icmp_ln121_reg_1207_pp0_iter4_reg;
                icmp_ln121_reg_1207_pp0_iter6_reg <= icmp_ln121_reg_1207_pp0_iter5_reg;
                icmp_ln121_reg_1207_pp0_iter7_reg <= icmp_ln121_reg_1207_pp0_iter6_reg;
                output_0_addr_reg_1350_pp0_iter3_reg <= output_0_addr_reg_1350;
                output_0_addr_reg_1350_pp0_iter4_reg <= output_0_addr_reg_1350_pp0_iter3_reg;
                output_0_addr_reg_1350_pp0_iter5_reg <= output_0_addr_reg_1350_pp0_iter4_reg;
                output_0_addr_reg_1350_pp0_iter6_reg <= output_0_addr_reg_1350_pp0_iter5_reg;
                output_0_addr_reg_1350_pp0_iter7_reg <= output_0_addr_reg_1350_pp0_iter6_reg;
                output_1_addr_reg_1356_pp0_iter3_reg <= output_1_addr_reg_1356;
                output_1_addr_reg_1356_pp0_iter4_reg <= output_1_addr_reg_1356_pp0_iter3_reg;
                output_1_addr_reg_1356_pp0_iter5_reg <= output_1_addr_reg_1356_pp0_iter4_reg;
                output_1_addr_reg_1356_pp0_iter6_reg <= output_1_addr_reg_1356_pp0_iter5_reg;
                output_1_addr_reg_1356_pp0_iter7_reg <= output_1_addr_reg_1356_pp0_iter6_reg;
                select_ln124_2_reg_1328_pp0_iter2_reg <= select_ln124_2_reg_1328;
                select_ln131_1_reg_1369_pp0_iter4_reg <= select_ln131_1_reg_1369;
                select_ln131_reg_1362_pp0_iter4_reg <= select_ln131_reg_1362;
                select_ln132_1_reg_1393_pp0_iter6_reg <= select_ln132_1_reg_1393;
                select_ln132_reg_1386_pp0_iter6_reg <= select_ln132_reg_1386;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln121_fu_335_p2 = ap_const_lv1_0))) then
                and_ln121_4_reg_1235 <= and_ln121_4_fu_423_p2;
                and_ln122_3_reg_1253 <= and_ln122_3_fu_487_p2;
                and_ln123_reg_1269 <= and_ln123_fu_545_p2;
                h_reg_1216 <= h_fu_347_p2;
                i_reg_1259 <= i_fu_493_p2;
                icmp_ln122_reg_1221 <= icmp_ln122_fu_353_p2;
                j_reg_1280 <= j_fu_559_p2;
                lshr_ln_reg_1295 <= select_ln124_fu_577_p3(4 downto 1);
                or_ln131_1_reg_1285 <= or_ln131_1_fu_589_p2;
                select_ln123_4_reg_1264 <= select_ln123_4_fu_531_p3;
                w_reg_1242 <= w_fu_429_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln121_reg_1207_pp0_iter5_reg = ap_const_lv1_0))) then
                input_0_load_reg_1400 <= input_0_q0;
                input_1_load_reg_1407 <= input_1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln121_fu_335_p2 = ap_const_lv1_0))) then
                select_ln121_2_reg_1229 <= select_ln121_2_fu_367_p3;
                select_ln122_2_reg_1247 <= select_ln122_2_fu_449_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln121_reg_1207_pp0_iter2_reg = ap_const_lv1_0))) then
                select_ln131_1_reg_1369 <= select_ln131_1_fu_903_p3;
                select_ln131_reg_1362 <= select_ln131_fu_896_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln121_reg_1207_pp0_iter4_reg = ap_const_lv1_0))) then
                select_ln132_1_reg_1393 <= select_ln132_1_fu_1004_p3;
                select_ln132_reg_1386 <= select_ln132_fu_956_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln121_reg_1207_pp0_iter6_reg = ap_const_lv1_0))) then
                select_ln133_1_reg_1419 <= select_ln133_1_fu_1181_p3;
                select_ln133_reg_1414 <= select_ln133_fu_1093_p3;
            end if;
        end if;
    end process;
    shl_ln_reg_1187(0) <= '0';
    shl_ln129_1_reg_1192(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln121_fu_335_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln121_fu_335_p2 = ap_const_lv1_1))) and not(((ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln121_fu_335_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln121_fu_341_p2 <= std_logic_vector(unsigned(ap_const_lv10_1) + unsigned(indvar_flatten111_reg_166));
    add_ln122_1_fu_647_p2 <= std_logic_vector(unsigned(ap_const_lv9_1) + unsigned(indvar_flatten59_reg_188));
    add_ln123_1_fu_633_p2 <= std_logic_vector(unsigned(ap_const_lv7_1) + unsigned(indvar_flatten21_reg_210));
    add_ln124_1_fu_619_p2 <= std_logic_vector(unsigned(ap_const_lv6_1) + unsigned(indvar_flatten_reg_232));
    add_ln125_fu_613_p2 <= std_logic_vector(unsigned(ap_const_lv5_2) + unsigned(select_ln124_fu_577_p3));
    add_ln129_1_fu_323_p2 <= std_logic_vector(unsigned(zext_ln124_fu_315_p1) + unsigned(shl_ln129_1_fu_293_p3));
    add_ln129_2_fu_716_p2 <= std_logic_vector(unsigned(zext_ln123_1_fu_713_p1) + unsigned(select_ln121_1_fu_668_p3));
    add_ln129_3_fu_756_p2 <= std_logic_vector(unsigned(zext_ln124_1_fu_753_p1) + unsigned(select_ln122_1_fu_696_p3));
    add_ln129_4_fu_799_p2 <= std_logic_vector(unsigned(zext_ln129_3_fu_795_p1) + unsigned(zext_ln129_2_fu_784_p1));
    add_ln129_5_fu_805_p2 <= std_logic_vector(unsigned(add_ln129_4_fu_799_p2) + unsigned(zext_ln129_fu_742_p1));
    add_ln129_6_fu_879_p2 <= std_logic_vector(unsigned(zext_ln129_4_fu_875_p1) + unsigned(p_shl1_cast_fu_861_p3));
    add_ln129_7_fu_885_p2 <= std_logic_vector(unsigned(add_ln129_6_fu_879_p2) + unsigned(zext_ln124_2_fu_858_p1));
    add_ln129_fu_309_p2 <= std_logic_vector(unsigned(zext_ln123_fu_301_p1) + unsigned(shl_ln_fu_285_p3));
    add_ln131_1_fu_828_p2 <= std_logic_vector(unsigned(add_ln131_fu_822_p2) + unsigned(zext_ln121_fu_674_p1));
    add_ln131_2_fu_846_p2 <= std_logic_vector(unsigned(zext_ln131_1_fu_834_p1) + unsigned(p_shl_cast_fu_838_p3));
    add_ln131_3_fu_852_p2 <= std_logic_vector(unsigned(add_ln131_2_fu_846_p2) + unsigned(zext_ln122_fu_703_p1));
    add_ln131_fu_822_p2 <= std_logic_vector(unsigned(zext_ln129_1_fu_774_p1) + unsigned(zext_ln131_fu_818_p1));
    and_ln121_1_fu_387_p2 <= (xor_ln121_fu_375_p2 and or_ln131_fu_329_p2);
    and_ln121_2_fu_399_p2 <= (xor_ln121_fu_375_p2 and icmp_ln125_fu_393_p2);
    and_ln121_3_fu_411_p2 <= (xor_ln121_fu_375_p2 and icmp_ln124_fu_405_p2);
    and_ln121_4_fu_423_p2 <= (xor_ln121_fu_375_p2 and icmp_ln123_fu_417_p2);
    and_ln121_fu_381_p2 <= (xor_ln121_fu_375_p2 and trunc_ln123_fu_305_p1);
    and_ln122_1_fu_475_p2 <= (or_ln122_1_fu_463_p2 and and_ln121_1_fu_387_p2);
    and_ln122_2_fu_481_p2 <= (or_ln122_1_fu_463_p2 and and_ln121_2_fu_399_p2);
    and_ln122_3_fu_487_p2 <= (or_ln122_1_fu_463_p2 and and_ln121_3_fu_411_p2);
    and_ln122_fu_469_p2 <= (or_ln122_1_fu_463_p2 and and_ln121_fu_381_p2);
    and_ln123_fu_545_p2 <= (xor_ln123_fu_539_p2 and and_ln122_2_fu_481_p2);
    and_ln132_1_fu_998_p2 <= (or_ln132_1_fu_992_p2 and grp_fu_270_p2);
    and_ln132_fu_950_p2 <= (or_ln132_fu_944_p2 and grp_fu_265_p2);
    and_ln133_1_fu_1087_p2 <= (grp_fu_275_p2 and and_ln133_fu_1081_p2);
    and_ln133_2_fu_1169_p2 <= (or_ln133_3_fu_1163_p2 and or_ln133_2_fu_1145_p2);
    and_ln133_3_fu_1175_p2 <= (grp_fu_280_p2 and and_ln133_2_fu_1169_p2);
    and_ln133_fu_1081_p2 <= (or_ln133_fu_1057_p2 and or_ln133_1_fu_1075_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state10_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln121_fu_335_p2)
    begin
        if ((icmp_ln121_fu_335_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_h_0_phi_fu_181_p4_assign_proc : process(h_0_reg_177, ap_CS_fsm_pp0_stage0, icmp_ln121_reg_1207, select_ln121_2_reg_1229, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln121_reg_1207 = ap_const_lv1_0))) then 
            ap_phi_mux_h_0_phi_fu_181_p4 <= select_ln121_2_reg_1229;
        else 
            ap_phi_mux_h_0_phi_fu_181_p4 <= h_0_reg_177;
        end if; 
    end process;


    ap_phi_mux_w_0_phi_fu_203_p4_assign_proc : process(w_0_reg_199, ap_CS_fsm_pp0_stage0, icmp_ln121_reg_1207, select_ln122_2_reg_1247, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln121_reg_1207 = ap_const_lv1_0))) then 
            ap_phi_mux_w_0_phi_fu_203_p4 <= select_ln122_2_reg_1247;
        else 
            ap_phi_mux_w_0_phi_fu_203_p4 <= w_0_reg_199;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln132_1_fu_963_p1 <= select_ln131_1_reg_1369_pp0_iter4_reg;
    bitcast_ln132_fu_915_p1 <= select_ln131_reg_1362_pp0_iter4_reg;
    bitcast_ln133_1_fu_1028_p1 <= input_0_load_reg_1400;
    bitcast_ln133_2_fu_1099_p1 <= select_ln132_1_reg_1393_pp0_iter6_reg;
    bitcast_ln133_3_fu_1116_p1 <= input_1_load_reg_1407;
    bitcast_ln133_fu_1011_p1 <= select_ln132_reg_1386_pp0_iter6_reg;
    h_fu_347_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(ap_phi_mux_h_0_phi_fu_181_p4));
    i_fu_493_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(select_ln122_fu_441_p3));
    icmp_ln121_fu_335_p2 <= "1" when (indvar_flatten111_reg_166 = ap_const_lv10_320) else "0";
    icmp_ln122_fu_353_p2 <= "1" when (indvar_flatten59_reg_188 = ap_const_lv9_A0) else "0";
    icmp_ln123_fu_417_p2 <= "1" when (indvar_flatten21_reg_210 = ap_const_lv7_20) else "0";
    icmp_ln124_fu_405_p2 <= "1" when (indvar_flatten_reg_232 = ap_const_lv6_10) else "0";
    icmp_ln125_fu_393_p2 <= "1" when (c_0_0_reg_254 = ap_const_lv5_10) else "0";
    icmp_ln132_1_fu_938_p2 <= "1" when (trunc_ln132_fu_928_p1 = ap_const_lv23_0) else "0";
    icmp_ln132_2_fu_980_p2 <= "0" when (tmp_6_fu_966_p4 = ap_const_lv8_FF) else "1";
    icmp_ln132_3_fu_986_p2 <= "1" when (trunc_ln132_1_fu_976_p1 = ap_const_lv23_0) else "0";
    icmp_ln132_fu_932_p2 <= "0" when (tmp_1_fu_918_p4 = ap_const_lv8_FF) else "1";
    icmp_ln133_1_fu_1051_p2 <= "1" when (trunc_ln133_fu_1024_p1 = ap_const_lv23_0) else "0";
    icmp_ln133_2_fu_1063_p2 <= "0" when (tmp_4_fu_1031_p4 = ap_const_lv8_FF) else "1";
    icmp_ln133_3_fu_1069_p2 <= "1" when (trunc_ln133_1_fu_1041_p1 = ap_const_lv23_0) else "0";
    icmp_ln133_4_fu_1133_p2 <= "0" when (tmp_8_fu_1102_p4 = ap_const_lv8_FF) else "1";
    icmp_ln133_5_fu_1139_p2 <= "1" when (trunc_ln133_2_fu_1112_p1 = ap_const_lv23_0) else "0";
    icmp_ln133_6_fu_1151_p2 <= "0" when (tmp_9_fu_1119_p4 = ap_const_lv8_FF) else "1";
    icmp_ln133_7_fu_1157_p2 <= "1" when (trunc_ln133_3_fu_1129_p1 = ap_const_lv23_0) else "0";
    icmp_ln133_fu_1045_p2 <= "0" when (tmp_3_fu_1014_p4 = ap_const_lv8_FF) else "1";
    input_0_address0 <= zext_ln129_5_fu_910_p1(10 - 1 downto 0);

    input_0_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            input_0_ce0 <= ap_const_logic_1;
        else 
            input_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_1_address0 <= zext_ln129_5_fu_910_p1(10 - 1 downto 0);

    input_1_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            input_1_ce0 <= ap_const_logic_1;
        else 
            input_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    j_fu_559_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(select_ln123_fu_511_p3));
    or_ln122_1_fu_463_p2 <= (xor_ln122_fu_457_p2 or icmp_ln122_fu_353_p2);
    or_ln122_fu_435_p2 <= (icmp_ln122_fu_353_p2 or and_ln121_4_fu_423_p2);
    or_ln123_1_fu_505_p2 <= (or_ln123_fu_499_p2 or icmp_ln122_fu_353_p2);
    or_ln123_fu_499_p2 <= (and_ln122_3_fu_487_p2 or and_ln121_4_fu_423_p2);
    or_ln124_1_fu_571_p2 <= (or_ln124_fu_565_p2 or or_ln122_fu_435_p2);
    or_ln124_fu_565_p2 <= (and_ln123_fu_545_p2 or and_ln122_3_fu_487_p2);
    or_ln131_1_fu_589_p2 <= (trunc_ln124_1_fu_585_p1 or select_ln123_1_fu_523_p3);
    or_ln131_fu_329_p2 <= (trunc_ln124_fu_319_p1 or trunc_ln123_fu_305_p1);
    or_ln132_1_fu_992_p2 <= (icmp_ln132_3_fu_986_p2 or icmp_ln132_2_fu_980_p2);
    or_ln132_fu_944_p2 <= (icmp_ln132_fu_932_p2 or icmp_ln132_1_fu_938_p2);
    or_ln133_1_fu_1075_p2 <= (icmp_ln133_3_fu_1069_p2 or icmp_ln133_2_fu_1063_p2);
    or_ln133_2_fu_1145_p2 <= (icmp_ln133_5_fu_1139_p2 or icmp_ln133_4_fu_1133_p2);
    or_ln133_3_fu_1163_p2 <= (icmp_ln133_7_fu_1157_p2 or icmp_ln133_6_fu_1151_p2);
    or_ln133_fu_1057_p2 <= (icmp_ln133_fu_1045_p2 or icmp_ln133_1_fu_1051_p2);
    output_0_address0 <= zext_ln131_2_fu_891_p1(8 - 1 downto 0);
    output_0_address1 <= output_0_addr_reg_1350_pp0_iter7_reg;

    output_0_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            output_0_ce0 <= ap_const_logic_1;
        else 
            output_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_0_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter8)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            output_0_ce1 <= ap_const_logic_1;
        else 
            output_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    output_0_d1 <= select_ln133_reg_1414;

    output_0_we1_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln121_reg_1207_pp0_iter7_reg, ap_enable_reg_pp0_iter8)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (icmp_ln121_reg_1207_pp0_iter7_reg = ap_const_lv1_0))) then 
            output_0_we1 <= ap_const_logic_1;
        else 
            output_0_we1 <= ap_const_logic_0;
        end if; 
    end process;

    output_1_address0 <= zext_ln131_2_fu_891_p1(8 - 1 downto 0);
    output_1_address1 <= output_1_addr_reg_1356_pp0_iter7_reg;

    output_1_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            output_1_ce0 <= ap_const_logic_1;
        else 
            output_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_1_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter8)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            output_1_ce1 <= ap_const_logic_1;
        else 
            output_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    output_1_d1 <= select_ln133_1_reg_1419;

    output_1_we1_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln121_reg_1207_pp0_iter7_reg, ap_enable_reg_pp0_iter8)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (icmp_ln121_reg_1207_pp0_iter7_reg = ap_const_lv1_0))) then 
            output_1_we1 <= ap_const_logic_1;
        else 
            output_1_we1 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl1_cast_fu_861_p3 <= (add_ln129_5_reg_1334 & ap_const_lv3_0);
    p_shl_cast_fu_838_p3 <= (add_ln131_1_fu_828_p2 & ap_const_lv2_0);
    select_ln121_1_fu_668_p3 <= 
        shl_ln129_mid1_fu_661_p3 when (icmp_ln122_reg_1221(0) = '1') else 
        shl_ln_reg_1187;
    select_ln121_2_fu_367_p3 <= 
        h_fu_347_p2 when (icmp_ln122_fu_353_p2(0) = '1') else 
        ap_phi_mux_h_0_phi_fu_181_p4;
    select_ln121_3_fu_677_p3 <= 
        ap_const_lv4_0 when (icmp_ln122_reg_1221(0) = '1') else 
        shl_ln129_1_reg_1192;
    select_ln121_4_fu_683_p3 <= 
        ap_const_lv4_0 when (icmp_ln122_reg_1221(0) = '1') else 
        add_ln129_1_reg_1202;
    select_ln121_5_fu_722_p3 <= 
        shl_ln129_mid1_fu_661_p3 when (icmp_ln122_reg_1221(0) = '1') else 
        add_ln129_reg_1197;
    select_ln121_fu_359_p3 <= 
        ap_const_lv3_0 when (icmp_ln122_fu_353_p2(0) = '1') else 
        ap_phi_mux_w_0_phi_fu_203_p4;
    select_ln122_1_fu_696_p3 <= 
        shl_ln129_1_mid1_fu_689_p3 when (and_ln121_4_reg_1235(0) = '1') else 
        select_ln121_3_fu_677_p3;
    select_ln122_2_fu_449_p3 <= 
        w_fu_429_p2 when (and_ln121_4_fu_423_p2(0) = '1') else 
        select_ln121_fu_359_p3;
    select_ln122_3_fu_706_p3 <= 
        shl_ln129_1_mid1_fu_689_p3 when (and_ln121_4_reg_1235(0) = '1') else 
        select_ln121_4_fu_683_p3;
    select_ln122_4_fu_728_p3 <= 
        select_ln121_1_fu_668_p3 when (and_ln121_4_reg_1235(0) = '1') else 
        select_ln121_5_fu_722_p3;
    select_ln122_5_fu_653_p3 <= 
        ap_const_lv9_1 when (icmp_ln122_fu_353_p2(0) = '1') else 
        add_ln122_1_fu_647_p2;
    select_ln122_fu_441_p3 <= 
        ap_const_lv2_0 when (or_ln122_fu_435_p2(0) = '1') else 
        i_0_reg_221;
    select_ln123_1_fu_523_p3 <= 
        trunc_ln123_1_fu_519_p1 when (and_ln122_3_fu_487_p2(0) = '1') else 
        and_ln122_fu_469_p2;
    select_ln123_2_fu_735_p3 <= 
        add_ln129_2_fu_716_p2 when (and_ln122_3_reg_1253(0) = '1') else 
        select_ln122_4_fu_728_p3;
    select_ln123_3_fu_746_p3 <= 
        select_ln122_1_fu_696_p3 when (and_ln122_3_reg_1253(0) = '1') else 
        select_ln122_3_fu_706_p3;
    select_ln123_4_fu_531_p3 <= 
        trunc_ln123_1_fu_519_p1 when (and_ln122_3_fu_487_p2(0) = '1') else 
        and_ln122_1_fu_475_p2;
    select_ln123_5_fu_551_p3 <= 
        i_fu_493_p2 when (and_ln122_3_fu_487_p2(0) = '1') else 
        select_ln122_fu_441_p3;
    select_ln123_6_fu_639_p3 <= 
        ap_const_lv7_1 when (or_ln122_fu_435_p2(0) = '1') else 
        add_ln123_1_fu_633_p2;
    select_ln123_fu_511_p3 <= 
        ap_const_lv2_0 when (or_ln123_1_fu_505_p2(0) = '1') else 
        j_0_reg_243;
    select_ln124_1_fu_762_p3 <= 
        add_ln129_3_fu_756_p2 when (and_ln123_reg_1269(0) = '1') else 
        select_ln123_3_fu_746_p3;
    select_ln124_2_fu_769_p3 <= 
        or_ln131_1_reg_1285 when (and_ln123_reg_1269(0) = '1') else 
        select_ln123_4_reg_1264;
    select_ln124_3_fu_595_p3 <= 
        j_fu_559_p2 when (and_ln123_fu_545_p2(0) = '1') else 
        select_ln123_fu_511_p3;
    select_ln124_4_fu_625_p3 <= 
        ap_const_lv6_1 when (or_ln123_1_fu_505_p2(0) = '1') else 
        add_ln124_1_fu_619_p2;
    select_ln124_fu_577_p3 <= 
        ap_const_lv5_0 when (or_ln124_1_fu_571_p2(0) = '1') else 
        c_0_0_reg_254;
    select_ln131_1_fu_903_p3 <= 
        output_1_q0 when (select_ln124_2_reg_1328_pp0_iter2_reg(0) = '1') else 
        ap_const_lv32_D368D4A5;
    select_ln131_fu_896_p3 <= 
        output_0_q0 when (select_ln124_2_reg_1328_pp0_iter2_reg(0) = '1') else 
        ap_const_lv32_D368D4A5;
    select_ln132_1_fu_1004_p3 <= 
        select_ln131_1_reg_1369_pp0_iter4_reg when (and_ln132_1_fu_998_p2(0) = '1') else 
        ap_const_lv32_0;
    select_ln132_fu_956_p3 <= 
        select_ln131_reg_1362_pp0_iter4_reg when (and_ln132_fu_950_p2(0) = '1') else 
        ap_const_lv32_0;
    select_ln133_1_fu_1181_p3 <= 
        select_ln132_1_reg_1393_pp0_iter6_reg when (and_ln133_3_fu_1175_p2(0) = '1') else 
        input_1_load_reg_1407;
    select_ln133_fu_1093_p3 <= 
        select_ln132_reg_1386_pp0_iter6_reg when (and_ln133_1_fu_1087_p2(0) = '1') else 
        input_0_load_reg_1400;
    shl_ln129_1_fu_293_p3 <= (ap_phi_mux_w_0_phi_fu_203_p4 & ap_const_lv1_0);
    shl_ln129_1_mid1_fu_689_p3 <= (w_reg_1242 & ap_const_lv1_0);
    shl_ln129_mid1_fu_661_p3 <= (h_reg_1216 & ap_const_lv1_0);
    shl_ln_fu_285_p3 <= (ap_phi_mux_h_0_phi_fu_181_p4 & ap_const_lv1_0);
    tmp_10_fu_777_p3 <= (lshr_ln_reg_1295 & ap_const_lv3_0);
    tmp_11_fu_788_p3 <= (lshr_ln_reg_1295 & ap_const_lv1_0);
    tmp_12_fu_868_p3 <= (add_ln129_5_reg_1334 & ap_const_lv1_0);
    tmp_13_fu_811_p3 <= (lshr_ln_reg_1295 & ap_const_lv2_0);
    tmp_1_fu_918_p4 <= bitcast_ln132_fu_915_p1(30 downto 23);
    tmp_3_fu_1014_p4 <= bitcast_ln133_fu_1011_p1(30 downto 23);
    tmp_4_fu_1031_p4 <= bitcast_ln133_1_fu_1028_p1(30 downto 23);
    tmp_6_fu_966_p4 <= bitcast_ln132_1_fu_963_p1(30 downto 23);
    tmp_8_fu_1102_p4 <= bitcast_ln133_2_fu_1099_p1(30 downto 23);
    tmp_9_fu_1119_p4 <= bitcast_ln133_3_fu_1116_p1(30 downto 23);
    trunc_ln123_1_fu_519_p1 <= i_fu_493_p2(1 - 1 downto 0);
    trunc_ln123_fu_305_p1 <= i_0_reg_221(1 - 1 downto 0);
    trunc_ln124_1_fu_585_p1 <= j_fu_559_p2(1 - 1 downto 0);
    trunc_ln124_fu_319_p1 <= j_0_reg_243(1 - 1 downto 0);
    trunc_ln132_1_fu_976_p1 <= bitcast_ln132_1_fu_963_p1(23 - 1 downto 0);
    trunc_ln132_fu_928_p1 <= bitcast_ln132_fu_915_p1(23 - 1 downto 0);
    trunc_ln133_1_fu_1041_p1 <= bitcast_ln133_1_fu_1028_p1(23 - 1 downto 0);
    trunc_ln133_2_fu_1112_p1 <= bitcast_ln133_2_fu_1099_p1(23 - 1 downto 0);
    trunc_ln133_3_fu_1129_p1 <= bitcast_ln133_3_fu_1116_p1(23 - 1 downto 0);
    trunc_ln133_fu_1024_p1 <= bitcast_ln133_fu_1011_p1(23 - 1 downto 0);
    w_fu_429_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(select_ln121_fu_359_p3));
    xor_ln121_fu_375_p2 <= (icmp_ln122_fu_353_p2 xor ap_const_lv1_1);
    xor_ln122_fu_457_p2 <= (icmp_ln123_fu_417_p2 xor ap_const_lv1_1);
    xor_ln123_fu_539_p2 <= (ap_const_lv1_1 xor and_ln122_3_fu_487_p2);
    zext_ln121_fu_674_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln121_2_reg_1229),7));
    zext_ln122_fu_703_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln122_2_reg_1247),9));
    zext_ln123_1_fu_713_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_1259),4));
    zext_ln123_fu_301_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_221),4));
    zext_ln124_1_fu_753_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_1280),4));
    zext_ln124_2_fu_858_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln124_1_reg_1323),11));
    zext_ln124_fu_315_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_243),4));
    zext_ln129_1_fu_774_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_reg_1295),7));
    zext_ln129_2_fu_784_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_fu_777_p3),8));
    zext_ln129_3_fu_795_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_fu_788_p3),8));
    zext_ln129_4_fu_875_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_fu_868_p3),11));
    zext_ln129_5_fu_910_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln129_7_reg_1345_pp0_iter4_reg),64));
    zext_ln129_fu_742_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln123_2_fu_735_p3),8));
    zext_ln131_1_fu_834_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln131_1_fu_828_p2),9));
    zext_ln131_2_fu_891_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln131_3_reg_1340),64));
    zext_ln131_fu_818_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_fu_811_p3),7));
end behav;
