-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity fc6_weights_fc6_bXh4_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 100
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of fc6_weights_fc6_bXh4_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101110100001000100110111111", 
    1 => "10111101110011011101000100111001", 
    2 => "00111110001101010100000010000000", 
    3 => "10111101111100111111100111100000", 
    4 => "10111101000101010010001011100101", 
    5 => "10111110001011011010110011101011", 
    6 => "00111101110000001111010100010111", 
    7 => "00111110001100111100111000000111", 
    8 => "00111110000110110011101111000111", 
    9 => "10111100110100111000100000101101", 
    10 => "10111110011100011110111000001010", 
    11 => "00111101110101010101111111001011", 
    12 => "10111101000100000110110011101010", 
    13 => "10111110001000110011001001010010", 
    14 => "00111110000010110011000011101000", 
    15 => "10111110001001100110001101001000", 
    16 => "00111101110110000110000001111101", 
    17 => "00111110011100101100011010111000", 
    18 => "10111101100001000001111100011010", 
    19 => "10111100111010000010101000001011", 
    20 => "00111101011111011101011100111001", 
    21 => "00111101011101010101011110011000", 
    22 => "10111101111010110000110100100110", 
    23 => "00111101111000001000011011100100", 
    24 => "10111100111010010100010110011111", 
    25 => "10111110011001111010111100010010", 
    26 => "00111110001111010100001001111100", 
    27 => "00111101101101011110110010101100", 
    28 => "00111110001110101011000011101000", 
    29 => "10111100101101111111110001110001", 
    30 => "00111110001011100101110001100010", 
    31 => "00111101111110110011100001001110", 
    32 => "00111101010101010100010101101100", 
    33 => "00111100011001101011000111110000", 
    34 => "10111110000101011101101111001110", 
    35 => "10111100001001001110110100110101", 
    36 => "10111101110001001011001110011000", 
    37 => "00111110000111100011110100011010", 
    38 => "10111100000101010101010100010001", 
    39 => "10111101101011100110100111000000", 
    40 => "10111110000101011101111101000100", 
    41 => "10111110001001111101010001111100", 
    42 => "10111101011111100101011001011101", 
    43 => "10111101100010110101110001100010", 
    44 => "10111101100000010001000100100101", 
    45 => "00111100101101110000001001100000", 
    46 => "00111100011100111011100001111111", 
    47 => "10111110010000000110101001011111", 
    48 => "00111100100011100111011001011011", 
    49 => "00111110000010110100100010111001", 
    50 => "00111101101100011011001110000101", 
    51 => "00111100111011101111110001111101", 
    52 => "10111101101000000010011101001000", 
    53 => "10111110010000101100100010110100", 
    54 => "00111110010101111000111111101111", 
    55 => "00111100110000010001111010111110", 
    56 => "10111011101110110000111101110110", 
    57 => "00111010111111101110001011110101", 
    58 => "10111101110010110001010011111010", 
    59 => "10111101010101001110011111000110", 
    60 => "10111110000011100010101010001000", 
    61 => "10111101110101011000110101000001", 
    62 => "10111110000111111101000001110000", 
    63 => "00111101000011000001010000101000", 
    64 => "10111110000100100000011001100010", 
    65 => "10111110010101000000101100101011", 
    66 => "10111101110011101100000001111110", 
    67 => "00111110010101101010011101110100", 
    68 => "10111110010100011010100110110100", 
    69 => "00111101100101011101010101101000", 
    70 => "10111101000101010001011101001001", 
    71 => "10111100110010110101100011100100", 
    72 => "00111110001011110110010011001000", 
    73 => "10111101110011110100010101110101", 
    74 => "10111101100100100111000110000011", 
    75 => "10111101010110001010000110011010", 
    76 => "10111110000110111101010000110100", 
    77 => "00111010111011010101011101011100", 
    78 => "00111101010110110001010101000010", 
    79 => "00111110110010011101101000000101", 
    80 => "10111101011000101011001001111101", 
    81 => "10111011000001100101101101001110", 
    82 => "10111101111011101101100101111101", 
    83 => "10111101111100001001101101100111", 
    84 => "00111111011000111001100000001100", 
    85 => "00111010010010001110000110000110", 
    86 => "00111101010001111110110011011100", 
    87 => "10111101100100111100001011100110", 
    88 => "00111101100100101011010100111100", 
    89 => "10111100111100000100001100011001", 
    90 => "10111110001110100111100011000101", 
    91 => "10111110000011001001010100011110", 
    92 => "00111101101110101011011100111111", 
    93 => "10111101001110110011011010111101", 
    94 => "00111101011110100111011110000000", 
    95 => "00111101001011111001000111000011", 
    96 => "00111110010011101111100101100110", 
    97 => "10111110000100110001101010101111", 
    98 => "10111110001010000000110001000110", 
    99 => "10111101001011010001100001010100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity fc6_weights_fc6_bXh4 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 100;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of fc6_weights_fc6_bXh4 is
    component fc6_weights_fc6_bXh4_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    fc6_weights_fc6_bXh4_rom_U :  component fc6_weights_fc6_bXh4_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


