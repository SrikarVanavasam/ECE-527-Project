-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity fc6_weights_fc6_bOgC_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 100
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of fc6_weights_fc6_bOgC_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110000011001000101101100101", 
    1 => "00111100010010000101011010110001", 
    2 => "10111100001001010110111101000110", 
    3 => "10111101011001010110000000001100", 
    4 => "10111101100111011101011100010001", 
    5 => "00111100101011001110001010110010", 
    6 => "10111110011011101110000010011111", 
    7 => "00111101101001110001001010100100", 
    8 => "00111101000010011111001100011011", 
    9 => "00111110000111100000001011001000", 
    10 => "10111110001011001100110101011110", 
    11 => "00111101111101001100100111101011", 
    12 => "00111110001101010010000010101001", 
    13 => "00111101101101100111111011100010", 
    14 => "10111101100110110101000101010010", 
    15 => "00111110000001001111011111100000", 
    16 => "10111110000001101000111110100000", 
    17 => "10111110010010001110000011111001", 
    18 => "00111101100100101100011011010100", 
    19 => "10111110001010000001101100011001", 
    20 => "00111110010011101000111100011011", 
    21 => "00111110001110101100100010111101", 
    22 => "10111100101100000101010000000110", 
    23 => "00111010110101111010010111000100", 
    24 => "00111110010011111101110111101100", 
    25 => "10111110000110110110101000010000", 
    26 => "10111110000100101100110101011011", 
    27 => "00111110011111100001111110011001", 
    28 => "00111101110111100001101101100011", 
    29 => "00111101001111100110011010001011", 
    30 => "10111101011011000010111010010111", 
    31 => "00111101111010111110110011111010", 
    32 => "00111101110000101111010010000011", 
    33 => "00111101110111001010001111110011", 
    34 => "10111011111100011010011010100001", 
    35 => "00111101010101001001110000011001", 
    36 => "00111111000110011100101001011001", 
    37 => "10111101110001101001100000101001", 
    38 => "00111110000011110000001011111010", 
    39 => "10111110000101100001010000110000", 
    40 => "10111101111111000110010010101111", 
    41 => "00111101101110100011011101010100", 
    42 => "00111110001001100001110111010010", 
    43 => "00111101001101001000100001110110", 
    44 => "10111110100110011100100110011000", 
    45 => "00111110010000100001010101100101", 
    46 => "00111101100110101110111111100111", 
    47 => "00111100100001110110011110111110", 
    48 => "00111110000100000001000101001111", 
    49 => "00111110001011110100000010100010", 
    50 => "00111101100001011110110000100110", 
    51 => "10111101110001111001011101011010", 
    52 => "00111101110010100000100110010001", 
    53 => "10111101100000011001000011100100", 
    54 => "10111010001111001011011110101100", 
    55 => "00111101110000101111101100101111", 
    56 => "00111100011110100100111011010001", 
    57 => "00111101110100010100010100011000", 
    58 => "00111100000101101100010101111111", 
    59 => "10111101100101111011011000000110", 
    60 => "10111110010011001110010000110110", 
    61 => "00111101000111100111011111100011", 
    62 => "10111101000111010110010001001111", 
    63 => "10111110000111111001000100001000", 
    64 => "00111011111001000001111010100011", 
    65 => "00111110001001001111010010110001", 
    66 => "10111100101000000110100101011100", 
    67 => "00111101011111110011101100110111", 
    68 => "10111101011111111101010011000010", 
    69 => "00111110010000101010010001100011", 
    70 => "00111100100110000101100011011101", 
    71 => "10111101111111000010110101111001", 
    72 => "00111110011101110010011010110001", 
    73 => "10111100100101110100110110101010", 
    74 => "00111100110011000001000000011001", 
    75 => "10111110010111000101010101011000", 
    76 => "00111101000010000110000110111001", 
    77 => "00111110001101100001001110001001", 
    78 => "10111101100111011100100000010011", 
    79 => "00111110010010111101001011101001", 
    80 => "10111100000100110001010111111101", 
    81 => "10111110000100011011100001111110", 
    82 => "00111100110010000110101100011001", 
    83 => "10111110010110101011100010100010", 
    84 => "00111101000010101011000011010001", 
    85 => "00111100110101000011011001010011", 
    86 => "10111100110010111100100110001101", 
    87 => "10111101001010010100111011101001", 
    88 => "10111011111111110010010101001111", 
    89 => "10111101100110001100111001001101", 
    90 => "10111101100011111010011000110101", 
    91 => "00111110000011000111010111101010", 
    92 => "10111101111001001101101010000111", 
    93 => "00111100111101000111001010111001", 
    94 => "00111110000111101110000010010110", 
    95 => "10111110010000111011011101110001", 
    96 => "10111100110111001111110000111010", 
    97 => "10111110000111101111011000110010", 
    98 => "00111101011010100011001011110111", 
    99 => "10111110010110110011111100001110" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity fc6_weights_fc6_bOgC is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 100;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of fc6_weights_fc6_bOgC is
    component fc6_weights_fc6_bOgC_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    fc6_weights_fc6_bOgC_rom_U :  component fc6_weights_fc6_bOgC_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


