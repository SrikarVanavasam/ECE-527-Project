-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity fc6_weights_fc6_bRg6_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 100
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of fc6_weights_fc6_bRg6_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111100111000011011111001100001", 
    1 => "10111110000100010101100111101101", 
    2 => "00111110000010111010100000000001", 
    3 => "10111101010101010111100011111011", 
    4 => "00111110000000001110011110010010", 
    5 => "10111101110001010001000100011101", 
    6 => "10111011100101010111011001110100", 
    7 => "10111101110111001010100111000011", 
    8 => "10111010111110100110000101011011", 
    9 => "10111110001010100010100000001111", 
    10 => "10111101000000100111011101111001", 
    11 => "10111101101010011001110000110010", 
    12 => "10111101100000101111100000101100", 
    13 => "10111101101100010101001101100101", 
    14 => "10111100110010011000000101010011", 
    15 => "10111101111011100100101110101101", 
    16 => "10111110000001110100110011010011", 
    17 => "10111101100010011110010010000111", 
    18 => "00111101111111110010111010000011", 
    19 => "00111101100010000110110100101101", 
    20 => "10111101100100110010010100010110", 
    21 => "00111101100010001000000001111111", 
    22 => "00111110011101100000100001101011", 
    23 => "10111101100000101100001111010101", 
    24 => "00111110000101011110110000010001", 
    25 => "10111101001011010001010010010110", 
    26 => "10111101110001010100101101110100", 
    27 => "10111101100111100000011101100011", 
    28 => "00111101001000111111011110011100", 
    29 => "00111101011011111001101110100111", 
    30 => "00111100111101010001100101111101", 
    31 => "00111110010010011011011111000011", 
    32 => "10111100011011000001001000101101", 
    33 => "10111100100001101101100000010001", 
    34 => "10111101111101000011101000001111", 
    35 => "00111100011011011110011111000101", 
    36 => "10111100011011000001111011000010", 
    37 => "00111111100000100101000101011010", 
    38 => "00111101100110111100100010111111", 
    39 => "00111110001010101101110001111110", 
    40 => "10111110010010100110001110010010", 
    41 => "00111101100000011011001010010110", 
    42 => "10111110000001011000110100111100", 
    43 => "10111110001000110001110001110011", 
    44 => "00111101100111100010101100111100", 
    45 => "10111101100011000010000010100001", 
    46 => "10111101001101100001010111100100", 
    47 => "10111101101011111111101110010110", 
    48 => "00111101010010100001011111000001", 
    49 => "10111110001011001010000001111111", 
    50 => "00111101011001001011110110111101", 
    51 => "10111101001001000000001000110011", 
    52 => "00111110010101100111000100111000", 
    53 => "10111100101001001111000001001010", 
    54 => "10111101001100100101000000110100", 
    55 => "10111100101111010101010110101100", 
    56 => "10111101101001010011110110100010", 
    57 => "10111101110101000111100111001011", 
    58 => "10111101111001100001110011111000", 
    59 => "10111101100110101101011001010100", 
    60 => "10111110001100111101100010011000", 
    61 => "00111011011101100010101111101100", 
    62 => "10111110001100111010110101011001", 
    63 => "10111101010110101010101001000110", 
    64 => "10111110011010000101011010111000", 
    65 => "00111110111011011010110011101101", 
    66 => "10111110001010101001001001010010", 
    67 => "10111101100011111101010001000000", 
    68 => "00111101001111100000110010001110", 
    69 => "10111101110001000000000111010010", 
    70 => "10111100111001000011100110101011", 
    71 => "10111101110000111001100001010110", 
    72 => "10111110010010010010111011100000", 
    73 => "00111011111110001101111001001110", 
    74 => "10111101000100011111100000000101", 
    75 => "00111010100000110011011100000010", 
    76 => "00111110001011001001101110101100", 
    77 => "10111101100111001001100111010100", 
    78 => "10111101010100110110010100101010", 
    79 => "00111110000111111010100110000001", 
    80 => "00111010100100111111111101010001", 
    81 => "00111110001000001001011110101100", 
    82 => "00111101101010010101111110000101", 
    83 => "10111101101101011100000110101010", 
    84 => "10111100011110101011100101111010", 
    85 => "00111100010100010110100000111101", 
    86 => "00111101100101010000101011110011", 
    87 => "00111111010111100010110000010000", 
    88 => "10111110001010000010100110000010", 
    89 => "10111110011001111100001101010000", 
    90 => "00111100111010011011010000111001", 
    91 => "00111101110101110001111110011101", 
    92 => "10111110001111111000100111011000", 
    93 => "10111101101011100011100111000110", 
    94 => "10111101101111010000010100111000", 
    95 => "10111101001000010010110011101100", 
    96 => "10111101000001110111010000011000", 
    97 => "10111110000101100001001010001010", 
    98 => "00111101101100110110011001110000", 
    99 => "10111101011010101001010100100010" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity fc6_weights_fc6_bRg6 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 100;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of fc6_weights_fc6_bRg6 is
    component fc6_weights_fc6_bRg6_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    fc6_weights_fc6_bRg6_rom_U :  component fc6_weights_fc6_bRg6_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


