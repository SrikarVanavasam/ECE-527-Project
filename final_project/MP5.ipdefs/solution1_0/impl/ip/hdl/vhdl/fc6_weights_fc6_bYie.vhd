-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity fc6_weights_fc6_bYie_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 100
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of fc6_weights_fc6_bYie_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111110010101011100000011010001", 
    1 => "10111101101101000111101011111000", 
    2 => "10111101110011110110100000000000", 
    3 => "00111111010101010010000111011100", 
    4 => "10111110001001011100000000110110", 
    5 => "10111101101011010001101011110110", 
    6 => "00111110010010000100000110000000", 
    7 => "10111101100001010001100110101000", 
    8 => "00111110001101000010011010110101", 
    9 => "00111101101011010111011011110010", 
    10 => "10111100010100111001101010000111", 
    11 => "10111010110110011111010011111110", 
    12 => "10111101101011110011110101011110", 
    13 => "10111011010110100000001101000001", 
    14 => "10111101011001110010010110011110", 
    15 => "10111110000101101000000100000100", 
    16 => "10111101011001101101101101111001", 
    17 => "10111101101010011100111101001011", 
    18 => "00111101100010011111000101111000", 
    19 => "00111110000001001001111100010011", 
    20 => "00111100100111110100001001010000", 
    21 => "00111110001010000101100001000000", 
    22 => "00111101100000011110000000001100", 
    23 => "10111101011100010111111001100000", 
    24 => "10111110001100110000010111110100", 
    25 => "10111101001001011110101000000111", 
    26 => "10111101100000100010110011011111", 
    27 => "10111110000100010011100101011111", 
    28 => "10111101011111110111111001010000", 
    29 => "10111110000111111101100101101100", 
    30 => "10111101000110100010011110000110", 
    31 => "00111100111011110010010000010101", 
    32 => "00111101101010101111100000101000", 
    33 => "00111011001011000010111111110100", 
    34 => "00111111000001100001110001111100", 
    35 => "00111110000100101011111000011100", 
    36 => "10111101110101100010101011100110", 
    37 => "10111110101011100111000000001101", 
    38 => "10111110000110000110111011100010", 
    39 => "10111101100011111100000111110001", 
    40 => "10111101010100100001101010110101", 
    41 => "10111110001000010001101110110010", 
    42 => "10111101001101101000101010010001", 
    43 => "10111101000110001010100011100001", 
    44 => "10111110010010111000001000001000", 
    45 => "00111101010000111011110100001110", 
    46 => "00111100100110001111110010100001", 
    47 => "10111101110110110100100000010010", 
    48 => "10111101001101001101100100011011", 
    49 => "00111101101111111001101010011000", 
    50 => "10111110001100011011010101010000", 
    51 => "10111100011110010010010110100110", 
    52 => "10111101110100001111000111000101", 
    53 => "10111101100101011001100001101010", 
    54 => "10111100101010010001100111110101", 
    55 => "10111110001100000000000110110101", 
    56 => "10111110001011010010000011110110", 
    57 => "10111101010110010001010010111111", 
    58 => "00111110001001001000001010000000", 
    59 => "00111100100000100101000100011000", 
    60 => "00111101111111100101000100110101", 
    61 => "00111110010011001111011111001110", 
    62 => "00111110011011011011101110010001", 
    63 => "10111110100101010001011011000101", 
    64 => "00111110001001100001111010011110", 
    65 => "10111101010011111001110001111011", 
    66 => "00111101000000010101010101011010", 
    67 => "10111110000000001100111101111001", 
    68 => "10111100100010100101110001101010", 
    69 => "00111101101101101101001001011101", 
    70 => "10111101000001110101111101111101", 
    71 => "10111110010110010111100011011001", 
    72 => "10111101110010101100011101100100", 
    73 => "00111101110100001000100111111110", 
    74 => "10111101111011100011001010111111", 
    75 => "00111110100000010000010000101010", 
    76 => "00111100111011111001100000110100", 
    77 => "10111110100011010111010001010001", 
    78 => "00111011101111100111011000000111", 
    79 => "10111110000100010111000111101000", 
    80 => "10111110000111110001011110011100", 
    81 => "10111101110110001011000001001000", 
    82 => "00111101011011010100010100010101", 
    83 => "10111101010101010001100110101101", 
    84 => "00111110001000001101111001100111", 
    85 => "10111101000000111100000111110100", 
    86 => "10111101001110110011100110110101", 
    87 => "10111101110110011111001101001001", 
    88 => "00111110000000010100010011110110", 
    89 => "00111011110000100010001110100110", 
    90 => "00111110000111011100001000000101", 
    91 => "10111101011110111100011000111101", 
    92 => "00111101101101111001000010001001", 
    93 => "10111101111110010100011000110101", 
    94 => "10111101010010001100111101000100", 
    95 => "00111100001101111111010011001110", 
    96 => "10111110011000110111010100010110", 
    97 => "10111100110000110110011111111111", 
    98 => "10111110100000000111011110000010", 
    99 => "10111101000001111001100011010011" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity fc6_weights_fc6_bYie is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 100;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of fc6_weights_fc6_bYie is
    component fc6_weights_fc6_bYie_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    fc6_weights_fc6_bYie_rom_U :  component fc6_weights_fc6_bYie_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


