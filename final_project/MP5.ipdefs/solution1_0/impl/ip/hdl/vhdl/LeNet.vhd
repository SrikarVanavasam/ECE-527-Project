-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity LeNet is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_CACHE_VALUE : INTEGER := 3 );
port (
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    interrupt : OUT STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_BUSER_WIDTH-1 downto 0) );
end;


architecture behav of LeNet is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "LeNet,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=9.167750,HLS_SYN_LAT=29894,HLS_SYN_TPT=20047,HLS_SYN_MEM=150,HLS_SYN_DSP=188,HLS_SYN_FF=31666,HLS_SYN_LUT=47043,HLS_VERSION=2019_1}";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_S_AXI_WSTRB_WIDTH : INTEGER range 63 downto 0 := 4;
    constant C_S_AXI_ADDR_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant C_M_AXI_ID_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_ADDR_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_WSTRB_WIDTH : INTEGER range 63 downto 0 := 4;
    constant C_M_AXI_AWUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_ARUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_WUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_RUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_BUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_ready : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal input_r : STD_LOGIC_VECTOR (31 downto 0);
    signal output_r : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_AWREADY : STD_LOGIC;
    signal gmem_WREADY : STD_LOGIC;
    signal gmem_ARREADY : STD_LOGIC;
    signal gmem_RVALID : STD_LOGIC;
    signal gmem_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_RLAST : STD_LOGIC;
    signal gmem_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BVALID : STD_LOGIC;
    signal gmem_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal input_buffer_0_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_buffer_0_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_conv1_buffer_s_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_conv1_buffer_s_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_conv1_buffer_1_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_conv1_buffer_1_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_conv1_buffer_2_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_conv1_buffer_2_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_conv1_buffer_3_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_conv1_buffer_3_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_conv1_buffer_4_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_conv1_buffer_4_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_conv1_buffer_5_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_conv1_buffer_5_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_maxp2_buffer_s_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_maxp2_buffer_s_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_maxp2_buffer_1_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_maxp2_buffer_1_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_maxp2_buffer_2_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_maxp2_buffer_2_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_maxp2_buffer_3_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_maxp2_buffer_3_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_maxp2_buffer_4_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_maxp2_buffer_4_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_maxp2_buffer_5_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_maxp2_buffer_5_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_conv3_buffer_s_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_conv3_buffer_s_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_conv3_buffer_1_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_conv3_buffer_1_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_maxp4_buffer_s_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_maxp4_buffer_s_i_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_maxp4_buffer_s_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_maxp4_buffer_s_t_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_maxp4_buffer_1_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_maxp4_buffer_1_i_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_maxp4_buffer_1_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_maxp4_buffer_1_t_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_conv5_buffer_s_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_conv5_buffer_s_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_conv5_buffer_1_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_conv5_buffer_1_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_conv5_buffer_2_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_conv5_buffer_2_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_conv5_buffer_3_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_conv5_buffer_3_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_conv5_buffer_4_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_conv5_buffer_4_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_conv5_buffer_5_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_conv5_buffer_5_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_fc6_buffer_0_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_fc6_buffer_0_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_fc6_buffer_1_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_fc6_buffer_1_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal load_input19_U0_ap_start : STD_LOGIC;
    signal load_input19_U0_ap_done : STD_LOGIC;
    signal load_input19_U0_ap_continue : STD_LOGIC;
    signal load_input19_U0_ap_idle : STD_LOGIC;
    signal load_input19_U0_ap_ready : STD_LOGIC;
    signal load_input19_U0_m_axi_input_r_AWVALID : STD_LOGIC;
    signal load_input19_U0_m_axi_input_r_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal load_input19_U0_m_axi_input_r_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal load_input19_U0_m_axi_input_r_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal load_input19_U0_m_axi_input_r_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal load_input19_U0_m_axi_input_r_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal load_input19_U0_m_axi_input_r_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal load_input19_U0_m_axi_input_r_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal load_input19_U0_m_axi_input_r_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal load_input19_U0_m_axi_input_r_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal load_input19_U0_m_axi_input_r_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal load_input19_U0_m_axi_input_r_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal load_input19_U0_m_axi_input_r_WVALID : STD_LOGIC;
    signal load_input19_U0_m_axi_input_r_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal load_input19_U0_m_axi_input_r_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal load_input19_U0_m_axi_input_r_WLAST : STD_LOGIC;
    signal load_input19_U0_m_axi_input_r_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal load_input19_U0_m_axi_input_r_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal load_input19_U0_m_axi_input_r_ARVALID : STD_LOGIC;
    signal load_input19_U0_m_axi_input_r_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal load_input19_U0_m_axi_input_r_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal load_input19_U0_m_axi_input_r_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal load_input19_U0_m_axi_input_r_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal load_input19_U0_m_axi_input_r_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal load_input19_U0_m_axi_input_r_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal load_input19_U0_m_axi_input_r_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal load_input19_U0_m_axi_input_r_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal load_input19_U0_m_axi_input_r_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal load_input19_U0_m_axi_input_r_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal load_input19_U0_m_axi_input_r_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal load_input19_U0_m_axi_input_r_RREADY : STD_LOGIC;
    signal load_input19_U0_m_axi_input_r_BREADY : STD_LOGIC;
    signal load_input19_U0_input_buffer_0_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal load_input19_U0_input_buffer_0_ce0 : STD_LOGIC;
    signal load_input19_U0_input_buffer_0_we0 : STD_LOGIC;
    signal load_input19_U0_input_buffer_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal load_input19_U0_output_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal load_input19_U0_output_out_write : STD_LOGIC;
    signal ap_channel_done_input_buffer_0 : STD_LOGIC;
    signal load_input19_U0_input_buffer_0_full_n : STD_LOGIC;
    signal convolution1_U0_ap_start : STD_LOGIC;
    signal convolution1_U0_ap_done : STD_LOGIC;
    signal convolution1_U0_ap_continue : STD_LOGIC;
    signal convolution1_U0_ap_idle : STD_LOGIC;
    signal convolution1_U0_ap_ready : STD_LOGIC;
    signal convolution1_U0_input_0_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal convolution1_U0_input_0_ce0 : STD_LOGIC;
    signal convolution1_U0_output_0_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal convolution1_U0_output_0_ce0 : STD_LOGIC;
    signal convolution1_U0_output_0_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal convolution1_U0_output_0_ce1 : STD_LOGIC;
    signal convolution1_U0_output_0_we1 : STD_LOGIC;
    signal convolution1_U0_output_0_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal convolution1_U0_output_1_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal convolution1_U0_output_1_ce0 : STD_LOGIC;
    signal convolution1_U0_output_1_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal convolution1_U0_output_1_ce1 : STD_LOGIC;
    signal convolution1_U0_output_1_we1 : STD_LOGIC;
    signal convolution1_U0_output_1_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal convolution1_U0_output_2_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal convolution1_U0_output_2_ce0 : STD_LOGIC;
    signal convolution1_U0_output_2_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal convolution1_U0_output_2_ce1 : STD_LOGIC;
    signal convolution1_U0_output_2_we1 : STD_LOGIC;
    signal convolution1_U0_output_2_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal convolution1_U0_output_3_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal convolution1_U0_output_3_ce0 : STD_LOGIC;
    signal convolution1_U0_output_3_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal convolution1_U0_output_3_ce1 : STD_LOGIC;
    signal convolution1_U0_output_3_we1 : STD_LOGIC;
    signal convolution1_U0_output_3_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal convolution1_U0_output_4_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal convolution1_U0_output_4_ce0 : STD_LOGIC;
    signal convolution1_U0_output_4_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal convolution1_U0_output_4_ce1 : STD_LOGIC;
    signal convolution1_U0_output_4_we1 : STD_LOGIC;
    signal convolution1_U0_output_4_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal convolution1_U0_output_5_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal convolution1_U0_output_5_ce0 : STD_LOGIC;
    signal convolution1_U0_output_5_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal convolution1_U0_output_5_ce1 : STD_LOGIC;
    signal convolution1_U0_output_5_we1 : STD_LOGIC;
    signal convolution1_U0_output_5_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_channel_done_output_conv1_buffer_5 : STD_LOGIC;
    signal convolution1_U0_output_5_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_output_conv1_buffer_5 : STD_LOGIC := '0';
    signal ap_sync_channel_write_output_conv1_buffer_5 : STD_LOGIC;
    signal ap_channel_done_output_conv1_buffer_4 : STD_LOGIC;
    signal convolution1_U0_output_4_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_output_conv1_buffer_4 : STD_LOGIC := '0';
    signal ap_sync_channel_write_output_conv1_buffer_4 : STD_LOGIC;
    signal ap_channel_done_output_conv1_buffer_3 : STD_LOGIC;
    signal convolution1_U0_output_3_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_output_conv1_buffer_3 : STD_LOGIC := '0';
    signal ap_sync_channel_write_output_conv1_buffer_3 : STD_LOGIC;
    signal ap_channel_done_output_conv1_buffer_2 : STD_LOGIC;
    signal convolution1_U0_output_2_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_output_conv1_buffer_2 : STD_LOGIC := '0';
    signal ap_sync_channel_write_output_conv1_buffer_2 : STD_LOGIC;
    signal ap_channel_done_output_conv1_buffer_1 : STD_LOGIC;
    signal convolution1_U0_output_1_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_output_conv1_buffer_1 : STD_LOGIC := '0';
    signal ap_sync_channel_write_output_conv1_buffer_1 : STD_LOGIC;
    signal ap_channel_done_output_conv1_buffer_s : STD_LOGIC;
    signal convolution1_U0_output_0_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_output_conv1_buffer_s : STD_LOGIC := '0';
    signal ap_sync_channel_write_output_conv1_buffer_s : STD_LOGIC;
    signal max_pooling2_U0_ap_start : STD_LOGIC;
    signal max_pooling2_U0_ap_done : STD_LOGIC;
    signal max_pooling2_U0_ap_continue : STD_LOGIC;
    signal max_pooling2_U0_ap_idle : STD_LOGIC;
    signal max_pooling2_U0_ap_ready : STD_LOGIC;
    signal max_pooling2_U0_input_0_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal max_pooling2_U0_input_0_ce0 : STD_LOGIC;
    signal max_pooling2_U0_input_1_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal max_pooling2_U0_input_1_ce0 : STD_LOGIC;
    signal max_pooling2_U0_input_2_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal max_pooling2_U0_input_2_ce0 : STD_LOGIC;
    signal max_pooling2_U0_input_3_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal max_pooling2_U0_input_3_ce0 : STD_LOGIC;
    signal max_pooling2_U0_input_4_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal max_pooling2_U0_input_4_ce0 : STD_LOGIC;
    signal max_pooling2_U0_input_5_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal max_pooling2_U0_input_5_ce0 : STD_LOGIC;
    signal max_pooling2_U0_output_0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal max_pooling2_U0_output_0_ce0 : STD_LOGIC;
    signal max_pooling2_U0_output_0_we0 : STD_LOGIC;
    signal max_pooling2_U0_output_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_pooling2_U0_output_1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal max_pooling2_U0_output_1_ce0 : STD_LOGIC;
    signal max_pooling2_U0_output_1_we0 : STD_LOGIC;
    signal max_pooling2_U0_output_1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_pooling2_U0_output_2_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal max_pooling2_U0_output_2_ce0 : STD_LOGIC;
    signal max_pooling2_U0_output_2_we0 : STD_LOGIC;
    signal max_pooling2_U0_output_2_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_pooling2_U0_output_3_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal max_pooling2_U0_output_3_ce0 : STD_LOGIC;
    signal max_pooling2_U0_output_3_we0 : STD_LOGIC;
    signal max_pooling2_U0_output_3_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_pooling2_U0_output_4_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal max_pooling2_U0_output_4_ce0 : STD_LOGIC;
    signal max_pooling2_U0_output_4_we0 : STD_LOGIC;
    signal max_pooling2_U0_output_4_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_pooling2_U0_output_5_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal max_pooling2_U0_output_5_ce0 : STD_LOGIC;
    signal max_pooling2_U0_output_5_we0 : STD_LOGIC;
    signal max_pooling2_U0_output_5_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_channel_done_output_maxp2_buffer_5 : STD_LOGIC;
    signal max_pooling2_U0_output_5_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_output_maxp2_buffer_5 : STD_LOGIC := '0';
    signal ap_sync_channel_write_output_maxp2_buffer_5 : STD_LOGIC;
    signal ap_channel_done_output_maxp2_buffer_4 : STD_LOGIC;
    signal max_pooling2_U0_output_4_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_output_maxp2_buffer_4 : STD_LOGIC := '0';
    signal ap_sync_channel_write_output_maxp2_buffer_4 : STD_LOGIC;
    signal ap_channel_done_output_maxp2_buffer_3 : STD_LOGIC;
    signal max_pooling2_U0_output_3_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_output_maxp2_buffer_3 : STD_LOGIC := '0';
    signal ap_sync_channel_write_output_maxp2_buffer_3 : STD_LOGIC;
    signal ap_channel_done_output_maxp2_buffer_2 : STD_LOGIC;
    signal max_pooling2_U0_output_2_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_output_maxp2_buffer_2 : STD_LOGIC := '0';
    signal ap_sync_channel_write_output_maxp2_buffer_2 : STD_LOGIC;
    signal ap_channel_done_output_maxp2_buffer_1 : STD_LOGIC;
    signal max_pooling2_U0_output_1_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_output_maxp2_buffer_1 : STD_LOGIC := '0';
    signal ap_sync_channel_write_output_maxp2_buffer_1 : STD_LOGIC;
    signal ap_channel_done_output_maxp2_buffer_s : STD_LOGIC;
    signal max_pooling2_U0_output_0_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_output_maxp2_buffer_s : STD_LOGIC := '0';
    signal ap_sync_channel_write_output_maxp2_buffer_s : STD_LOGIC;
    signal convolution3_U0_ap_start : STD_LOGIC;
    signal convolution3_U0_ap_done : STD_LOGIC;
    signal convolution3_U0_ap_continue : STD_LOGIC;
    signal convolution3_U0_ap_idle : STD_LOGIC;
    signal convolution3_U0_ap_ready : STD_LOGIC;
    signal convolution3_U0_input_0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal convolution3_U0_input_0_ce0 : STD_LOGIC;
    signal convolution3_U0_input_1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal convolution3_U0_input_1_ce0 : STD_LOGIC;
    signal convolution3_U0_input_2_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal convolution3_U0_input_2_ce0 : STD_LOGIC;
    signal convolution3_U0_input_3_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal convolution3_U0_input_3_ce0 : STD_LOGIC;
    signal convolution3_U0_input_4_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal convolution3_U0_input_4_ce0 : STD_LOGIC;
    signal convolution3_U0_input_5_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal convolution3_U0_input_5_ce0 : STD_LOGIC;
    signal convolution3_U0_output_0_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal convolution3_U0_output_0_ce0 : STD_LOGIC;
    signal convolution3_U0_output_0_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal convolution3_U0_output_0_ce1 : STD_LOGIC;
    signal convolution3_U0_output_0_we1 : STD_LOGIC;
    signal convolution3_U0_output_0_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal convolution3_U0_output_1_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal convolution3_U0_output_1_ce0 : STD_LOGIC;
    signal convolution3_U0_output_1_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal convolution3_U0_output_1_ce1 : STD_LOGIC;
    signal convolution3_U0_output_1_we1 : STD_LOGIC;
    signal convolution3_U0_output_1_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_channel_done_output_conv3_buffer_1 : STD_LOGIC;
    signal convolution3_U0_output_1_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_output_conv3_buffer_1 : STD_LOGIC := '0';
    signal ap_sync_channel_write_output_conv3_buffer_1 : STD_LOGIC;
    signal ap_channel_done_output_conv3_buffer_s : STD_LOGIC;
    signal convolution3_U0_output_0_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_output_conv3_buffer_s : STD_LOGIC := '0';
    signal ap_sync_channel_write_output_conv3_buffer_s : STD_LOGIC;
    signal max_pooling4_U0_ap_start : STD_LOGIC;
    signal max_pooling4_U0_ap_done : STD_LOGIC;
    signal max_pooling4_U0_ap_continue : STD_LOGIC;
    signal max_pooling4_U0_ap_idle : STD_LOGIC;
    signal max_pooling4_U0_ap_ready : STD_LOGIC;
    signal max_pooling4_U0_input_0_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal max_pooling4_U0_input_0_ce0 : STD_LOGIC;
    signal max_pooling4_U0_input_1_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal max_pooling4_U0_input_1_ce0 : STD_LOGIC;
    signal max_pooling4_U0_output_0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal max_pooling4_U0_output_0_ce0 : STD_LOGIC;
    signal max_pooling4_U0_output_0_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal max_pooling4_U0_output_0_ce1 : STD_LOGIC;
    signal max_pooling4_U0_output_0_we1 : STD_LOGIC;
    signal max_pooling4_U0_output_0_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_pooling4_U0_output_1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal max_pooling4_U0_output_1_ce0 : STD_LOGIC;
    signal max_pooling4_U0_output_1_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal max_pooling4_U0_output_1_ce1 : STD_LOGIC;
    signal max_pooling4_U0_output_1_we1 : STD_LOGIC;
    signal max_pooling4_U0_output_1_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_channel_done_output_maxp4_buffer_1 : STD_LOGIC;
    signal max_pooling4_U0_output_1_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_output_maxp4_buffer_1 : STD_LOGIC := '0';
    signal ap_sync_channel_write_output_maxp4_buffer_1 : STD_LOGIC;
    signal ap_channel_done_output_maxp4_buffer_s : STD_LOGIC;
    signal max_pooling4_U0_output_0_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_output_maxp4_buffer_s : STD_LOGIC := '0';
    signal ap_sync_channel_write_output_maxp4_buffer_s : STD_LOGIC;
    signal convolution5_U0_ap_start : STD_LOGIC;
    signal convolution5_U0_ap_done : STD_LOGIC;
    signal convolution5_U0_ap_continue : STD_LOGIC;
    signal convolution5_U0_ap_idle : STD_LOGIC;
    signal convolution5_U0_ap_ready : STD_LOGIC;
    signal convolution5_U0_input_0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal convolution5_U0_input_0_ce0 : STD_LOGIC;
    signal convolution5_U0_input_0_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal convolution5_U0_input_0_ce1 : STD_LOGIC;
    signal convolution5_U0_input_1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal convolution5_U0_input_1_ce0 : STD_LOGIC;
    signal convolution5_U0_input_1_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal convolution5_U0_input_1_ce1 : STD_LOGIC;
    signal convolution5_U0_output_0_0_0_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal convolution5_U0_output_0_0_0_ce0 : STD_LOGIC;
    signal convolution5_U0_output_0_0_0_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal convolution5_U0_output_0_0_0_ce1 : STD_LOGIC;
    signal convolution5_U0_output_0_0_0_we1 : STD_LOGIC;
    signal convolution5_U0_output_0_0_0_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal convolution5_U0_output_1_0_0_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal convolution5_U0_output_1_0_0_ce0 : STD_LOGIC;
    signal convolution5_U0_output_1_0_0_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal convolution5_U0_output_1_0_0_ce1 : STD_LOGIC;
    signal convolution5_U0_output_1_0_0_we1 : STD_LOGIC;
    signal convolution5_U0_output_1_0_0_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal convolution5_U0_output_2_0_0_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal convolution5_U0_output_2_0_0_ce0 : STD_LOGIC;
    signal convolution5_U0_output_2_0_0_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal convolution5_U0_output_2_0_0_ce1 : STD_LOGIC;
    signal convolution5_U0_output_2_0_0_we1 : STD_LOGIC;
    signal convolution5_U0_output_2_0_0_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal convolution5_U0_output_3_0_0_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal convolution5_U0_output_3_0_0_ce0 : STD_LOGIC;
    signal convolution5_U0_output_3_0_0_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal convolution5_U0_output_3_0_0_ce1 : STD_LOGIC;
    signal convolution5_U0_output_3_0_0_we1 : STD_LOGIC;
    signal convolution5_U0_output_3_0_0_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal convolution5_U0_output_4_0_0_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal convolution5_U0_output_4_0_0_ce0 : STD_LOGIC;
    signal convolution5_U0_output_4_0_0_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal convolution5_U0_output_4_0_0_ce1 : STD_LOGIC;
    signal convolution5_U0_output_4_0_0_we1 : STD_LOGIC;
    signal convolution5_U0_output_4_0_0_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal convolution5_U0_output_5_0_0_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal convolution5_U0_output_5_0_0_ce0 : STD_LOGIC;
    signal convolution5_U0_output_5_0_0_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal convolution5_U0_output_5_0_0_ce1 : STD_LOGIC;
    signal convolution5_U0_output_5_0_0_we1 : STD_LOGIC;
    signal convolution5_U0_output_5_0_0_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_channel_done_output_conv5_buffer_5 : STD_LOGIC;
    signal convolution5_U0_output_5_0_0_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_output_conv5_buffer_5 : STD_LOGIC := '0';
    signal ap_sync_channel_write_output_conv5_buffer_5 : STD_LOGIC;
    signal ap_channel_done_output_conv5_buffer_4 : STD_LOGIC;
    signal convolution5_U0_output_4_0_0_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_output_conv5_buffer_4 : STD_LOGIC := '0';
    signal ap_sync_channel_write_output_conv5_buffer_4 : STD_LOGIC;
    signal ap_channel_done_output_conv5_buffer_3 : STD_LOGIC;
    signal convolution5_U0_output_3_0_0_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_output_conv5_buffer_3 : STD_LOGIC := '0';
    signal ap_sync_channel_write_output_conv5_buffer_3 : STD_LOGIC;
    signal ap_channel_done_output_conv5_buffer_2 : STD_LOGIC;
    signal convolution5_U0_output_2_0_0_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_output_conv5_buffer_2 : STD_LOGIC := '0';
    signal ap_sync_channel_write_output_conv5_buffer_2 : STD_LOGIC;
    signal ap_channel_done_output_conv5_buffer_1 : STD_LOGIC;
    signal convolution5_U0_output_1_0_0_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_output_conv5_buffer_1 : STD_LOGIC := '0';
    signal ap_sync_channel_write_output_conv5_buffer_1 : STD_LOGIC;
    signal ap_channel_done_output_conv5_buffer_s : STD_LOGIC;
    signal convolution5_U0_output_0_0_0_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_output_conv5_buffer_s : STD_LOGIC := '0';
    signal ap_sync_channel_write_output_conv5_buffer_s : STD_LOGIC;
    signal fc6_U0_ap_start : STD_LOGIC;
    signal fc6_U0_ap_done : STD_LOGIC;
    signal fc6_U0_ap_continue : STD_LOGIC;
    signal fc6_U0_ap_idle : STD_LOGIC;
    signal fc6_U0_ap_ready : STD_LOGIC;
    signal fc6_U0_input_0_0_0_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal fc6_U0_input_0_0_0_ce0 : STD_LOGIC;
    signal fc6_U0_input_1_0_0_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal fc6_U0_input_1_0_0_ce0 : STD_LOGIC;
    signal fc6_U0_input_2_0_0_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal fc6_U0_input_2_0_0_ce0 : STD_LOGIC;
    signal fc6_U0_input_3_0_0_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal fc6_U0_input_3_0_0_ce0 : STD_LOGIC;
    signal fc6_U0_input_4_0_0_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal fc6_U0_input_4_0_0_ce0 : STD_LOGIC;
    signal fc6_U0_input_5_0_0_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal fc6_U0_input_5_0_0_ce0 : STD_LOGIC;
    signal fc6_U0_output_0_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal fc6_U0_output_0_ce0 : STD_LOGIC;
    signal fc6_U0_output_0_we0 : STD_LOGIC;
    signal fc6_U0_output_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc6_U0_output_1_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal fc6_U0_output_1_ce0 : STD_LOGIC;
    signal fc6_U0_output_1_we0 : STD_LOGIC;
    signal fc6_U0_output_1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_channel_done_output_fc6_buffer_1 : STD_LOGIC;
    signal fc6_U0_output_1_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_output_fc6_buffer_1 : STD_LOGIC := '0';
    signal ap_sync_channel_write_output_fc6_buffer_1 : STD_LOGIC;
    signal ap_channel_done_output_fc6_buffer_0 : STD_LOGIC;
    signal fc6_U0_output_0_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_output_fc6_buffer_0 : STD_LOGIC := '0';
    signal ap_sync_channel_write_output_fc6_buffer_0 : STD_LOGIC;
    signal store_output_U0_ap_start : STD_LOGIC;
    signal store_output_U0_ap_done : STD_LOGIC;
    signal store_output_U0_ap_continue : STD_LOGIC;
    signal store_output_U0_ap_idle : STD_LOGIC;
    signal store_output_U0_ap_ready : STD_LOGIC;
    signal store_output_U0_m_axi_output_r_AWVALID : STD_LOGIC;
    signal store_output_U0_m_axi_output_r_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal store_output_U0_m_axi_output_r_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal store_output_U0_m_axi_output_r_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal store_output_U0_m_axi_output_r_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal store_output_U0_m_axi_output_r_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal store_output_U0_m_axi_output_r_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal store_output_U0_m_axi_output_r_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal store_output_U0_m_axi_output_r_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal store_output_U0_m_axi_output_r_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal store_output_U0_m_axi_output_r_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal store_output_U0_m_axi_output_r_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal store_output_U0_m_axi_output_r_WVALID : STD_LOGIC;
    signal store_output_U0_m_axi_output_r_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal store_output_U0_m_axi_output_r_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal store_output_U0_m_axi_output_r_WLAST : STD_LOGIC;
    signal store_output_U0_m_axi_output_r_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal store_output_U0_m_axi_output_r_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal store_output_U0_m_axi_output_r_ARVALID : STD_LOGIC;
    signal store_output_U0_m_axi_output_r_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal store_output_U0_m_axi_output_r_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal store_output_U0_m_axi_output_r_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal store_output_U0_m_axi_output_r_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal store_output_U0_m_axi_output_r_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal store_output_U0_m_axi_output_r_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal store_output_U0_m_axi_output_r_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal store_output_U0_m_axi_output_r_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal store_output_U0_m_axi_output_r_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal store_output_U0_m_axi_output_r_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal store_output_U0_m_axi_output_r_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal store_output_U0_m_axi_output_r_RREADY : STD_LOGIC;
    signal store_output_U0_m_axi_output_r_BREADY : STD_LOGIC;
    signal store_output_U0_output_offset_read : STD_LOGIC;
    signal store_output_U0_output_fc6_buffer_0_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal store_output_U0_output_fc6_buffer_0_ce0 : STD_LOGIC;
    signal store_output_U0_output_fc6_buffer_1_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal store_output_U0_output_fc6_buffer_1_ce0 : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal input_buffer_0_i_full_n : STD_LOGIC;
    signal input_buffer_0_t_empty_n : STD_LOGIC;
    signal output_conv1_buffer_s_i_full_n : STD_LOGIC;
    signal output_conv1_buffer_s_t_empty_n : STD_LOGIC;
    signal output_conv1_buffer_s_i_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_conv1_buffer_s_i_we0 : STD_LOGIC;
    signal output_conv1_buffer_s_t_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_conv1_buffer_s_t_we0 : STD_LOGIC;
    signal output_conv1_buffer_1_i_full_n : STD_LOGIC;
    signal output_conv1_buffer_1_t_empty_n : STD_LOGIC;
    signal output_conv1_buffer_1_i_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_conv1_buffer_1_i_we0 : STD_LOGIC;
    signal output_conv1_buffer_1_t_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_conv1_buffer_1_t_we0 : STD_LOGIC;
    signal output_conv1_buffer_2_i_full_n : STD_LOGIC;
    signal output_conv1_buffer_2_t_empty_n : STD_LOGIC;
    signal output_conv1_buffer_2_i_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_conv1_buffer_2_i_we0 : STD_LOGIC;
    signal output_conv1_buffer_2_t_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_conv1_buffer_2_t_we0 : STD_LOGIC;
    signal output_conv1_buffer_3_i_full_n : STD_LOGIC;
    signal output_conv1_buffer_3_t_empty_n : STD_LOGIC;
    signal output_conv1_buffer_3_i_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_conv1_buffer_3_i_we0 : STD_LOGIC;
    signal output_conv1_buffer_3_t_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_conv1_buffer_3_t_we0 : STD_LOGIC;
    signal output_conv1_buffer_4_i_full_n : STD_LOGIC;
    signal output_conv1_buffer_4_t_empty_n : STD_LOGIC;
    signal output_conv1_buffer_4_i_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_conv1_buffer_4_i_we0 : STD_LOGIC;
    signal output_conv1_buffer_4_t_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_conv1_buffer_4_t_we0 : STD_LOGIC;
    signal output_conv1_buffer_5_i_full_n : STD_LOGIC;
    signal output_conv1_buffer_5_t_empty_n : STD_LOGIC;
    signal output_conv1_buffer_5_i_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_conv1_buffer_5_i_we0 : STD_LOGIC;
    signal output_conv1_buffer_5_t_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_conv1_buffer_5_t_we0 : STD_LOGIC;
    signal output_maxp2_buffer_s_i_full_n : STD_LOGIC;
    signal output_maxp2_buffer_s_t_empty_n : STD_LOGIC;
    signal output_maxp2_buffer_1_i_full_n : STD_LOGIC;
    signal output_maxp2_buffer_1_t_empty_n : STD_LOGIC;
    signal output_maxp2_buffer_2_i_full_n : STD_LOGIC;
    signal output_maxp2_buffer_2_t_empty_n : STD_LOGIC;
    signal output_maxp2_buffer_3_i_full_n : STD_LOGIC;
    signal output_maxp2_buffer_3_t_empty_n : STD_LOGIC;
    signal output_maxp2_buffer_4_i_full_n : STD_LOGIC;
    signal output_maxp2_buffer_4_t_empty_n : STD_LOGIC;
    signal output_maxp2_buffer_5_i_full_n : STD_LOGIC;
    signal output_maxp2_buffer_5_t_empty_n : STD_LOGIC;
    signal output_conv3_buffer_s_i_full_n : STD_LOGIC;
    signal output_conv3_buffer_s_t_empty_n : STD_LOGIC;
    signal output_conv3_buffer_s_i_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_conv3_buffer_s_i_we0 : STD_LOGIC;
    signal output_conv3_buffer_s_t_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_conv3_buffer_s_t_we0 : STD_LOGIC;
    signal output_conv3_buffer_1_i_full_n : STD_LOGIC;
    signal output_conv3_buffer_1_t_empty_n : STD_LOGIC;
    signal output_conv3_buffer_1_i_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_conv3_buffer_1_i_we0 : STD_LOGIC;
    signal output_conv3_buffer_1_t_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_conv3_buffer_1_t_we0 : STD_LOGIC;
    signal output_maxp4_buffer_s_i_full_n : STD_LOGIC;
    signal output_maxp4_buffer_s_t_empty_n : STD_LOGIC;
    signal output_maxp4_buffer_s_i_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_maxp4_buffer_s_i_we0 : STD_LOGIC;
    signal output_maxp4_buffer_s_t_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_maxp4_buffer_s_t_we0 : STD_LOGIC;
    signal output_maxp4_buffer_1_i_full_n : STD_LOGIC;
    signal output_maxp4_buffer_1_t_empty_n : STD_LOGIC;
    signal output_maxp4_buffer_1_i_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_maxp4_buffer_1_i_we0 : STD_LOGIC;
    signal output_maxp4_buffer_1_t_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_maxp4_buffer_1_t_we0 : STD_LOGIC;
    signal output_conv5_buffer_s_i_full_n : STD_LOGIC;
    signal output_conv5_buffer_s_t_empty_n : STD_LOGIC;
    signal output_conv5_buffer_s_i_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_conv5_buffer_s_i_we0 : STD_LOGIC;
    signal output_conv5_buffer_s_t_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_conv5_buffer_s_t_we0 : STD_LOGIC;
    signal output_conv5_buffer_1_i_full_n : STD_LOGIC;
    signal output_conv5_buffer_1_t_empty_n : STD_LOGIC;
    signal output_conv5_buffer_1_i_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_conv5_buffer_1_i_we0 : STD_LOGIC;
    signal output_conv5_buffer_1_t_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_conv5_buffer_1_t_we0 : STD_LOGIC;
    signal output_conv5_buffer_2_i_full_n : STD_LOGIC;
    signal output_conv5_buffer_2_t_empty_n : STD_LOGIC;
    signal output_conv5_buffer_2_i_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_conv5_buffer_2_i_we0 : STD_LOGIC;
    signal output_conv5_buffer_2_t_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_conv5_buffer_2_t_we0 : STD_LOGIC;
    signal output_conv5_buffer_3_i_full_n : STD_LOGIC;
    signal output_conv5_buffer_3_t_empty_n : STD_LOGIC;
    signal output_conv5_buffer_3_i_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_conv5_buffer_3_i_we0 : STD_LOGIC;
    signal output_conv5_buffer_3_t_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_conv5_buffer_3_t_we0 : STD_LOGIC;
    signal output_conv5_buffer_4_i_full_n : STD_LOGIC;
    signal output_conv5_buffer_4_t_empty_n : STD_LOGIC;
    signal output_conv5_buffer_4_i_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_conv5_buffer_4_i_we0 : STD_LOGIC;
    signal output_conv5_buffer_4_t_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_conv5_buffer_4_t_we0 : STD_LOGIC;
    signal output_conv5_buffer_5_i_full_n : STD_LOGIC;
    signal output_conv5_buffer_5_t_empty_n : STD_LOGIC;
    signal output_conv5_buffer_5_i_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_conv5_buffer_5_i_we0 : STD_LOGIC;
    signal output_conv5_buffer_5_t_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_conv5_buffer_5_t_we0 : STD_LOGIC;
    signal output_fc6_buffer_0_i_full_n : STD_LOGIC;
    signal output_fc6_buffer_0_t_empty_n : STD_LOGIC;
    signal output_fc6_buffer_1_i_full_n : STD_LOGIC;
    signal output_fc6_buffer_1_t_empty_n : STD_LOGIC;
    signal output_c_full_n : STD_LOGIC;
    signal output_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal output_c_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal load_input19_U0_start_full_n : STD_LOGIC;
    signal load_input19_U0_start_write : STD_LOGIC;
    signal convolution1_U0_start_full_n : STD_LOGIC;
    signal convolution1_U0_start_write : STD_LOGIC;
    signal max_pooling2_U0_start_full_n : STD_LOGIC;
    signal max_pooling2_U0_start_write : STD_LOGIC;
    signal convolution3_U0_start_full_n : STD_LOGIC;
    signal convolution3_U0_start_write : STD_LOGIC;
    signal max_pooling4_U0_start_full_n : STD_LOGIC;
    signal max_pooling4_U0_start_write : STD_LOGIC;
    signal convolution5_U0_start_full_n : STD_LOGIC;
    signal convolution5_U0_start_write : STD_LOGIC;
    signal fc6_U0_start_full_n : STD_LOGIC;
    signal fc6_U0_start_write : STD_LOGIC;
    signal store_output_U0_start_full_n : STD_LOGIC;
    signal store_output_U0_start_write : STD_LOGIC;

    component load_input19 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_input_r_AWVALID : OUT STD_LOGIC;
        m_axi_input_r_AWREADY : IN STD_LOGIC;
        m_axi_input_r_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_input_r_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_r_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_input_r_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_input_r_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_r_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_r_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_r_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_input_r_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_r_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_r_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_r_WVALID : OUT STD_LOGIC;
        m_axi_input_r_WREADY : IN STD_LOGIC;
        m_axi_input_r_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_input_r_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_r_WLAST : OUT STD_LOGIC;
        m_axi_input_r_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_r_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_r_ARVALID : OUT STD_LOGIC;
        m_axi_input_r_ARREADY : IN STD_LOGIC;
        m_axi_input_r_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_input_r_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_r_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_input_r_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_input_r_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_r_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_r_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_r_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_input_r_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_r_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_r_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_r_RVALID : IN STD_LOGIC;
        m_axi_input_r_RREADY : OUT STD_LOGIC;
        m_axi_input_r_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_input_r_RLAST : IN STD_LOGIC;
        m_axi_input_r_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_r_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_r_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_r_BVALID : IN STD_LOGIC;
        m_axi_input_r_BREADY : OUT STD_LOGIC;
        m_axi_input_r_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_r_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_r_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        input_offset : IN STD_LOGIC_VECTOR (31 downto 0);
        input_buffer_0_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        input_buffer_0_ce0 : OUT STD_LOGIC;
        input_buffer_0_we0 : OUT STD_LOGIC;
        input_buffer_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_r : IN STD_LOGIC_VECTOR (31 downto 0);
        output_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_out_full_n : IN STD_LOGIC;
        output_out_write : OUT STD_LOGIC );
    end component;


    component convolution1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_0_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        input_0_ce0 : OUT STD_LOGIC;
        input_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_0_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        output_0_ce0 : OUT STD_LOGIC;
        output_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_0_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        output_0_ce1 : OUT STD_LOGIC;
        output_0_we1 : OUT STD_LOGIC;
        output_0_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        output_1_ce0 : OUT STD_LOGIC;
        output_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_1_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        output_1_ce1 : OUT STD_LOGIC;
        output_1_we1 : OUT STD_LOGIC;
        output_1_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_2_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        output_2_ce0 : OUT STD_LOGIC;
        output_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_2_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        output_2_ce1 : OUT STD_LOGIC;
        output_2_we1 : OUT STD_LOGIC;
        output_2_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_3_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        output_3_ce0 : OUT STD_LOGIC;
        output_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_3_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        output_3_ce1 : OUT STD_LOGIC;
        output_3_we1 : OUT STD_LOGIC;
        output_3_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_4_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        output_4_ce0 : OUT STD_LOGIC;
        output_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_4_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        output_4_ce1 : OUT STD_LOGIC;
        output_4_we1 : OUT STD_LOGIC;
        output_4_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_5_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        output_5_ce0 : OUT STD_LOGIC;
        output_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_5_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        output_5_ce1 : OUT STD_LOGIC;
        output_5_we1 : OUT STD_LOGIC;
        output_5_d1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component max_pooling2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_0_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        input_0_ce0 : OUT STD_LOGIC;
        input_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        input_1_ce0 : OUT STD_LOGIC;
        input_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_2_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        input_2_ce0 : OUT STD_LOGIC;
        input_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_3_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        input_3_ce0 : OUT STD_LOGIC;
        input_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_4_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        input_4_ce0 : OUT STD_LOGIC;
        input_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_5_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        input_5_ce0 : OUT STD_LOGIC;
        input_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        output_0_ce0 : OUT STD_LOGIC;
        output_0_we0 : OUT STD_LOGIC;
        output_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        output_1_ce0 : OUT STD_LOGIC;
        output_1_we0 : OUT STD_LOGIC;
        output_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        output_2_ce0 : OUT STD_LOGIC;
        output_2_we0 : OUT STD_LOGIC;
        output_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_3_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        output_3_ce0 : OUT STD_LOGIC;
        output_3_we0 : OUT STD_LOGIC;
        output_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_4_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        output_4_ce0 : OUT STD_LOGIC;
        output_4_we0 : OUT STD_LOGIC;
        output_4_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_5_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        output_5_ce0 : OUT STD_LOGIC;
        output_5_we0 : OUT STD_LOGIC;
        output_5_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component convolution3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        input_0_ce0 : OUT STD_LOGIC;
        input_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        input_1_ce0 : OUT STD_LOGIC;
        input_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        input_2_ce0 : OUT STD_LOGIC;
        input_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_3_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        input_3_ce0 : OUT STD_LOGIC;
        input_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_4_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        input_4_ce0 : OUT STD_LOGIC;
        input_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_5_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        input_5_ce0 : OUT STD_LOGIC;
        input_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_0_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        output_0_ce0 : OUT STD_LOGIC;
        output_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_0_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        output_0_ce1 : OUT STD_LOGIC;
        output_0_we1 : OUT STD_LOGIC;
        output_0_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        output_1_ce0 : OUT STD_LOGIC;
        output_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_1_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        output_1_ce1 : OUT STD_LOGIC;
        output_1_we1 : OUT STD_LOGIC;
        output_1_d1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component max_pooling4 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_0_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        input_0_ce0 : OUT STD_LOGIC;
        input_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        input_1_ce0 : OUT STD_LOGIC;
        input_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        output_0_ce0 : OUT STD_LOGIC;
        output_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_0_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        output_0_ce1 : OUT STD_LOGIC;
        output_0_we1 : OUT STD_LOGIC;
        output_0_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        output_1_ce0 : OUT STD_LOGIC;
        output_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_1_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        output_1_ce1 : OUT STD_LOGIC;
        output_1_we1 : OUT STD_LOGIC;
        output_1_d1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component convolution5 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        input_0_ce0 : OUT STD_LOGIC;
        input_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_0_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        input_0_ce1 : OUT STD_LOGIC;
        input_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        input_1_ce0 : OUT STD_LOGIC;
        input_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_1_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        input_1_ce1 : OUT STD_LOGIC;
        input_1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_0_0_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        output_0_0_0_ce0 : OUT STD_LOGIC;
        output_0_0_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_0_0_0_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        output_0_0_0_ce1 : OUT STD_LOGIC;
        output_0_0_0_we1 : OUT STD_LOGIC;
        output_0_0_0_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_1_0_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        output_1_0_0_ce0 : OUT STD_LOGIC;
        output_1_0_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_1_0_0_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        output_1_0_0_ce1 : OUT STD_LOGIC;
        output_1_0_0_we1 : OUT STD_LOGIC;
        output_1_0_0_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_2_0_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        output_2_0_0_ce0 : OUT STD_LOGIC;
        output_2_0_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_2_0_0_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        output_2_0_0_ce1 : OUT STD_LOGIC;
        output_2_0_0_we1 : OUT STD_LOGIC;
        output_2_0_0_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_3_0_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        output_3_0_0_ce0 : OUT STD_LOGIC;
        output_3_0_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_3_0_0_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        output_3_0_0_ce1 : OUT STD_LOGIC;
        output_3_0_0_we1 : OUT STD_LOGIC;
        output_3_0_0_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_4_0_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        output_4_0_0_ce0 : OUT STD_LOGIC;
        output_4_0_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_4_0_0_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        output_4_0_0_ce1 : OUT STD_LOGIC;
        output_4_0_0_we1 : OUT STD_LOGIC;
        output_4_0_0_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_5_0_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        output_5_0_0_ce0 : OUT STD_LOGIC;
        output_5_0_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_5_0_0_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        output_5_0_0_ce1 : OUT STD_LOGIC;
        output_5_0_0_we1 : OUT STD_LOGIC;
        output_5_0_0_d1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fc6 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_0_0_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        input_0_0_0_ce0 : OUT STD_LOGIC;
        input_0_0_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_1_0_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        input_1_0_0_ce0 : OUT STD_LOGIC;
        input_1_0_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_2_0_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        input_2_0_0_ce0 : OUT STD_LOGIC;
        input_2_0_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_3_0_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        input_3_0_0_ce0 : OUT STD_LOGIC;
        input_3_0_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_4_0_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        input_4_0_0_ce0 : OUT STD_LOGIC;
        input_4_0_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_5_0_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        input_5_0_0_ce0 : OUT STD_LOGIC;
        input_5_0_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_0_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        output_0_ce0 : OUT STD_LOGIC;
        output_0_we0 : OUT STD_LOGIC;
        output_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_1_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        output_1_ce0 : OUT STD_LOGIC;
        output_1_we0 : OUT STD_LOGIC;
        output_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component store_output IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_output_r_AWVALID : OUT STD_LOGIC;
        m_axi_output_r_AWREADY : IN STD_LOGIC;
        m_axi_output_r_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_output_r_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_output_r_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_output_r_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_output_r_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_output_r_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_output_r_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_output_r_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_output_r_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_output_r_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_output_r_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_output_r_WVALID : OUT STD_LOGIC;
        m_axi_output_r_WREADY : IN STD_LOGIC;
        m_axi_output_r_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_output_r_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_output_r_WLAST : OUT STD_LOGIC;
        m_axi_output_r_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_output_r_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_output_r_ARVALID : OUT STD_LOGIC;
        m_axi_output_r_ARREADY : IN STD_LOGIC;
        m_axi_output_r_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_output_r_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_output_r_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_output_r_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_output_r_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_output_r_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_output_r_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_output_r_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_output_r_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_output_r_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_output_r_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_output_r_RVALID : IN STD_LOGIC;
        m_axi_output_r_RREADY : OUT STD_LOGIC;
        m_axi_output_r_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_output_r_RLAST : IN STD_LOGIC;
        m_axi_output_r_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_output_r_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_output_r_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_output_r_BVALID : IN STD_LOGIC;
        m_axi_output_r_BREADY : OUT STD_LOGIC;
        m_axi_output_r_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_output_r_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_output_r_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        output_offset_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        output_offset_empty_n : IN STD_LOGIC;
        output_offset_read : OUT STD_LOGIC;
        output_fc6_buffer_0_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        output_fc6_buffer_0_ce0 : OUT STD_LOGIC;
        output_fc6_buffer_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_fc6_buffer_1_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        output_fc6_buffer_1_ce0 : OUT STD_LOGIC;
        output_fc6_buffer_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component LeNet_input_buffeZio IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        i_address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        i_ce0 : IN STD_LOGIC;
        i_we0 : IN STD_LOGIC;
        i_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        i_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        t_address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        t_ce0 : IN STD_LOGIC;
        t_we0 : IN STD_LOGIC;
        t_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        t_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        i_ce : IN STD_LOGIC;
        t_ce : IN STD_LOGIC;
        i_full_n : OUT STD_LOGIC;
        i_write : IN STD_LOGIC;
        t_empty_n : OUT STD_LOGIC;
        t_read : IN STD_LOGIC );
    end component;


    component LeNet_output_conv0iy IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        i_address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        i_ce0 : IN STD_LOGIC;
        i_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        i_address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        i_ce1 : IN STD_LOGIC;
        i_we1 : IN STD_LOGIC;
        i_d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        t_address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        t_ce0 : IN STD_LOGIC;
        t_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        t_address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        t_ce1 : IN STD_LOGIC;
        t_we1 : IN STD_LOGIC;
        t_d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        i_ce : IN STD_LOGIC;
        t_ce : IN STD_LOGIC;
        i_full_n : OUT STD_LOGIC;
        i_write : IN STD_LOGIC;
        t_empty_n : OUT STD_LOGIC;
        t_read : IN STD_LOGIC );
    end component;


    component LeNet_output_maxp6jw IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        i_address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        i_ce0 : IN STD_LOGIC;
        i_we0 : IN STD_LOGIC;
        i_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        i_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        t_address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        t_ce0 : IN STD_LOGIC;
        t_we0 : IN STD_LOGIC;
        t_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        t_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        i_ce : IN STD_LOGIC;
        t_ce : IN STD_LOGIC;
        i_full_n : OUT STD_LOGIC;
        i_write : IN STD_LOGIC;
        t_empty_n : OUT STD_LOGIC;
        t_read : IN STD_LOGIC );
    end component;


    component LeNet_output_convbck IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        i_address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        i_ce0 : IN STD_LOGIC;
        i_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        i_address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        i_ce1 : IN STD_LOGIC;
        i_we1 : IN STD_LOGIC;
        i_d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        t_address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        t_ce0 : IN STD_LOGIC;
        t_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        t_address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        t_ce1 : IN STD_LOGIC;
        t_we1 : IN STD_LOGIC;
        t_d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        i_ce : IN STD_LOGIC;
        t_ce : IN STD_LOGIC;
        i_full_n : OUT STD_LOGIC;
        i_write : IN STD_LOGIC;
        t_empty_n : OUT STD_LOGIC;
        t_read : IN STD_LOGIC );
    end component;


    component LeNet_output_maxpbek IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        i_address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        i_ce0 : IN STD_LOGIC;
        i_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        i_address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        i_ce1 : IN STD_LOGIC;
        i_we1 : IN STD_LOGIC;
        i_d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        i_q1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        t_address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        t_ce0 : IN STD_LOGIC;
        t_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        t_address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        t_ce1 : IN STD_LOGIC;
        t_we1 : IN STD_LOGIC;
        t_d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        t_q1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        i_ce : IN STD_LOGIC;
        t_ce : IN STD_LOGIC;
        i_full_n : OUT STD_LOGIC;
        i_write : IN STD_LOGIC;
        t_empty_n : OUT STD_LOGIC;
        t_read : IN STD_LOGIC );
    end component;


    component LeNet_output_convbgk IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        i_address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        i_ce0 : IN STD_LOGIC;
        i_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        i_address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        i_ce1 : IN STD_LOGIC;
        i_we1 : IN STD_LOGIC;
        i_d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        t_address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        t_ce0 : IN STD_LOGIC;
        t_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        t_address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        t_ce1 : IN STD_LOGIC;
        t_we1 : IN STD_LOGIC;
        t_d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        i_ce : IN STD_LOGIC;
        t_ce : IN STD_LOGIC;
        i_full_n : OUT STD_LOGIC;
        i_write : IN STD_LOGIC;
        t_empty_n : OUT STD_LOGIC;
        t_read : IN STD_LOGIC );
    end component;


    component LeNet_output_fc6_bml IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        i_address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        i_ce0 : IN STD_LOGIC;
        i_we0 : IN STD_LOGIC;
        i_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        i_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        t_address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        t_ce0 : IN STD_LOGIC;
        t_we0 : IN STD_LOGIC;
        t_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        t_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        i_ce : IN STD_LOGIC;
        t_ce : IN STD_LOGIC;
        i_full_n : OUT STD_LOGIC;
        i_write : IN STD_LOGIC;
        t_empty_n : OUT STD_LOGIC;
        t_read : IN STD_LOGIC );
    end component;


    component fifo_w32_d8_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component LeNet_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        input_r : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_r : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component LeNet_gmem_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    LeNet_control_s_axi_U : component LeNet_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        input_r => input_r,
        output_r => output_r);

    LeNet_gmem_m_axi_U : component LeNet_gmem_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem_AWVALID,
        AWREADY => m_axi_gmem_AWREADY,
        AWADDR => m_axi_gmem_AWADDR,
        AWID => m_axi_gmem_AWID,
        AWLEN => m_axi_gmem_AWLEN,
        AWSIZE => m_axi_gmem_AWSIZE,
        AWBURST => m_axi_gmem_AWBURST,
        AWLOCK => m_axi_gmem_AWLOCK,
        AWCACHE => m_axi_gmem_AWCACHE,
        AWPROT => m_axi_gmem_AWPROT,
        AWQOS => m_axi_gmem_AWQOS,
        AWREGION => m_axi_gmem_AWREGION,
        AWUSER => m_axi_gmem_AWUSER,
        WVALID => m_axi_gmem_WVALID,
        WREADY => m_axi_gmem_WREADY,
        WDATA => m_axi_gmem_WDATA,
        WSTRB => m_axi_gmem_WSTRB,
        WLAST => m_axi_gmem_WLAST,
        WID => m_axi_gmem_WID,
        WUSER => m_axi_gmem_WUSER,
        ARVALID => m_axi_gmem_ARVALID,
        ARREADY => m_axi_gmem_ARREADY,
        ARADDR => m_axi_gmem_ARADDR,
        ARID => m_axi_gmem_ARID,
        ARLEN => m_axi_gmem_ARLEN,
        ARSIZE => m_axi_gmem_ARSIZE,
        ARBURST => m_axi_gmem_ARBURST,
        ARLOCK => m_axi_gmem_ARLOCK,
        ARCACHE => m_axi_gmem_ARCACHE,
        ARPROT => m_axi_gmem_ARPROT,
        ARQOS => m_axi_gmem_ARQOS,
        ARREGION => m_axi_gmem_ARREGION,
        ARUSER => m_axi_gmem_ARUSER,
        RVALID => m_axi_gmem_RVALID,
        RREADY => m_axi_gmem_RREADY,
        RDATA => m_axi_gmem_RDATA,
        RLAST => m_axi_gmem_RLAST,
        RID => m_axi_gmem_RID,
        RUSER => m_axi_gmem_RUSER,
        RRESP => m_axi_gmem_RRESP,
        BVALID => m_axi_gmem_BVALID,
        BREADY => m_axi_gmem_BREADY,
        BRESP => m_axi_gmem_BRESP,
        BID => m_axi_gmem_BID,
        BUSER => m_axi_gmem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => load_input19_U0_m_axi_input_r_ARVALID,
        I_ARREADY => gmem_ARREADY,
        I_ARADDR => load_input19_U0_m_axi_input_r_ARADDR,
        I_ARID => load_input19_U0_m_axi_input_r_ARID,
        I_ARLEN => load_input19_U0_m_axi_input_r_ARLEN,
        I_ARSIZE => load_input19_U0_m_axi_input_r_ARSIZE,
        I_ARLOCK => load_input19_U0_m_axi_input_r_ARLOCK,
        I_ARCACHE => load_input19_U0_m_axi_input_r_ARCACHE,
        I_ARQOS => load_input19_U0_m_axi_input_r_ARQOS,
        I_ARPROT => load_input19_U0_m_axi_input_r_ARPROT,
        I_ARUSER => load_input19_U0_m_axi_input_r_ARUSER,
        I_ARBURST => load_input19_U0_m_axi_input_r_ARBURST,
        I_ARREGION => load_input19_U0_m_axi_input_r_ARREGION,
        I_RVALID => gmem_RVALID,
        I_RREADY => load_input19_U0_m_axi_input_r_RREADY,
        I_RDATA => gmem_RDATA,
        I_RID => gmem_RID,
        I_RUSER => gmem_RUSER,
        I_RRESP => gmem_RRESP,
        I_RLAST => gmem_RLAST,
        I_AWVALID => store_output_U0_m_axi_output_r_AWVALID,
        I_AWREADY => gmem_AWREADY,
        I_AWADDR => store_output_U0_m_axi_output_r_AWADDR,
        I_AWID => store_output_U0_m_axi_output_r_AWID,
        I_AWLEN => store_output_U0_m_axi_output_r_AWLEN,
        I_AWSIZE => store_output_U0_m_axi_output_r_AWSIZE,
        I_AWLOCK => store_output_U0_m_axi_output_r_AWLOCK,
        I_AWCACHE => store_output_U0_m_axi_output_r_AWCACHE,
        I_AWQOS => store_output_U0_m_axi_output_r_AWQOS,
        I_AWPROT => store_output_U0_m_axi_output_r_AWPROT,
        I_AWUSER => store_output_U0_m_axi_output_r_AWUSER,
        I_AWBURST => store_output_U0_m_axi_output_r_AWBURST,
        I_AWREGION => store_output_U0_m_axi_output_r_AWREGION,
        I_WVALID => store_output_U0_m_axi_output_r_WVALID,
        I_WREADY => gmem_WREADY,
        I_WDATA => store_output_U0_m_axi_output_r_WDATA,
        I_WID => store_output_U0_m_axi_output_r_WID,
        I_WUSER => store_output_U0_m_axi_output_r_WUSER,
        I_WLAST => store_output_U0_m_axi_output_r_WLAST,
        I_WSTRB => store_output_U0_m_axi_output_r_WSTRB,
        I_BVALID => gmem_BVALID,
        I_BREADY => store_output_U0_m_axi_output_r_BREADY,
        I_BRESP => gmem_BRESP,
        I_BID => gmem_BID,
        I_BUSER => gmem_BUSER);

    input_buffer_0_U : component LeNet_input_buffeZio
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        i_address0 => load_input19_U0_input_buffer_0_address0,
        i_ce0 => load_input19_U0_input_buffer_0_ce0,
        i_we0 => load_input19_U0_input_buffer_0_we0,
        i_d0 => load_input19_U0_input_buffer_0_d0,
        i_q0 => input_buffer_0_i_q0,
        t_address0 => convolution1_U0_input_0_address0,
        t_ce0 => convolution1_U0_input_0_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => input_buffer_0_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => input_buffer_0_i_full_n,
        i_write => load_input19_U0_ap_done,
        t_empty_n => input_buffer_0_t_empty_n,
        t_read => convolution1_U0_ap_ready);

    output_conv1_buffer_s_U : component LeNet_output_conv0iy
    generic map (
        DataWidth => 32,
        AddressRange => 784,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        i_address0 => convolution1_U0_output_0_address0,
        i_ce0 => convolution1_U0_output_0_ce0,
        i_q0 => output_conv1_buffer_s_i_q0,
        i_address1 => convolution1_U0_output_0_address1,
        i_ce1 => convolution1_U0_output_0_ce1,
        i_we1 => convolution1_U0_output_0_we1,
        i_d1 => convolution1_U0_output_0_d1,
        t_address0 => max_pooling2_U0_input_0_address0,
        t_ce0 => max_pooling2_U0_input_0_ce0,
        t_q0 => output_conv1_buffer_s_t_q0,
        t_address1 => ap_const_lv10_0,
        t_ce1 => ap_const_logic_0,
        t_we1 => ap_const_logic_0,
        t_d1 => ap_const_lv32_0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => output_conv1_buffer_s_i_full_n,
        i_write => ap_channel_done_output_conv1_buffer_s,
        t_empty_n => output_conv1_buffer_s_t_empty_n,
        t_read => max_pooling2_U0_ap_ready);

    output_conv1_buffer_1_U : component LeNet_output_conv0iy
    generic map (
        DataWidth => 32,
        AddressRange => 784,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        i_address0 => convolution1_U0_output_1_address0,
        i_ce0 => convolution1_U0_output_1_ce0,
        i_q0 => output_conv1_buffer_1_i_q0,
        i_address1 => convolution1_U0_output_1_address1,
        i_ce1 => convolution1_U0_output_1_ce1,
        i_we1 => convolution1_U0_output_1_we1,
        i_d1 => convolution1_U0_output_1_d1,
        t_address0 => max_pooling2_U0_input_1_address0,
        t_ce0 => max_pooling2_U0_input_1_ce0,
        t_q0 => output_conv1_buffer_1_t_q0,
        t_address1 => ap_const_lv10_0,
        t_ce1 => ap_const_logic_0,
        t_we1 => ap_const_logic_0,
        t_d1 => ap_const_lv32_0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => output_conv1_buffer_1_i_full_n,
        i_write => ap_channel_done_output_conv1_buffer_1,
        t_empty_n => output_conv1_buffer_1_t_empty_n,
        t_read => max_pooling2_U0_ap_ready);

    output_conv1_buffer_2_U : component LeNet_output_conv0iy
    generic map (
        DataWidth => 32,
        AddressRange => 784,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        i_address0 => convolution1_U0_output_2_address0,
        i_ce0 => convolution1_U0_output_2_ce0,
        i_q0 => output_conv1_buffer_2_i_q0,
        i_address1 => convolution1_U0_output_2_address1,
        i_ce1 => convolution1_U0_output_2_ce1,
        i_we1 => convolution1_U0_output_2_we1,
        i_d1 => convolution1_U0_output_2_d1,
        t_address0 => max_pooling2_U0_input_2_address0,
        t_ce0 => max_pooling2_U0_input_2_ce0,
        t_q0 => output_conv1_buffer_2_t_q0,
        t_address1 => ap_const_lv10_0,
        t_ce1 => ap_const_logic_0,
        t_we1 => ap_const_logic_0,
        t_d1 => ap_const_lv32_0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => output_conv1_buffer_2_i_full_n,
        i_write => ap_channel_done_output_conv1_buffer_2,
        t_empty_n => output_conv1_buffer_2_t_empty_n,
        t_read => max_pooling2_U0_ap_ready);

    output_conv1_buffer_3_U : component LeNet_output_conv0iy
    generic map (
        DataWidth => 32,
        AddressRange => 784,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        i_address0 => convolution1_U0_output_3_address0,
        i_ce0 => convolution1_U0_output_3_ce0,
        i_q0 => output_conv1_buffer_3_i_q0,
        i_address1 => convolution1_U0_output_3_address1,
        i_ce1 => convolution1_U0_output_3_ce1,
        i_we1 => convolution1_U0_output_3_we1,
        i_d1 => convolution1_U0_output_3_d1,
        t_address0 => max_pooling2_U0_input_3_address0,
        t_ce0 => max_pooling2_U0_input_3_ce0,
        t_q0 => output_conv1_buffer_3_t_q0,
        t_address1 => ap_const_lv10_0,
        t_ce1 => ap_const_logic_0,
        t_we1 => ap_const_logic_0,
        t_d1 => ap_const_lv32_0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => output_conv1_buffer_3_i_full_n,
        i_write => ap_channel_done_output_conv1_buffer_3,
        t_empty_n => output_conv1_buffer_3_t_empty_n,
        t_read => max_pooling2_U0_ap_ready);

    output_conv1_buffer_4_U : component LeNet_output_conv0iy
    generic map (
        DataWidth => 32,
        AddressRange => 784,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        i_address0 => convolution1_U0_output_4_address0,
        i_ce0 => convolution1_U0_output_4_ce0,
        i_q0 => output_conv1_buffer_4_i_q0,
        i_address1 => convolution1_U0_output_4_address1,
        i_ce1 => convolution1_U0_output_4_ce1,
        i_we1 => convolution1_U0_output_4_we1,
        i_d1 => convolution1_U0_output_4_d1,
        t_address0 => max_pooling2_U0_input_4_address0,
        t_ce0 => max_pooling2_U0_input_4_ce0,
        t_q0 => output_conv1_buffer_4_t_q0,
        t_address1 => ap_const_lv10_0,
        t_ce1 => ap_const_logic_0,
        t_we1 => ap_const_logic_0,
        t_d1 => ap_const_lv32_0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => output_conv1_buffer_4_i_full_n,
        i_write => ap_channel_done_output_conv1_buffer_4,
        t_empty_n => output_conv1_buffer_4_t_empty_n,
        t_read => max_pooling2_U0_ap_ready);

    output_conv1_buffer_5_U : component LeNet_output_conv0iy
    generic map (
        DataWidth => 32,
        AddressRange => 784,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        i_address0 => convolution1_U0_output_5_address0,
        i_ce0 => convolution1_U0_output_5_ce0,
        i_q0 => output_conv1_buffer_5_i_q0,
        i_address1 => convolution1_U0_output_5_address1,
        i_ce1 => convolution1_U0_output_5_ce1,
        i_we1 => convolution1_U0_output_5_we1,
        i_d1 => convolution1_U0_output_5_d1,
        t_address0 => max_pooling2_U0_input_5_address0,
        t_ce0 => max_pooling2_U0_input_5_ce0,
        t_q0 => output_conv1_buffer_5_t_q0,
        t_address1 => ap_const_lv10_0,
        t_ce1 => ap_const_logic_0,
        t_we1 => ap_const_logic_0,
        t_d1 => ap_const_lv32_0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => output_conv1_buffer_5_i_full_n,
        i_write => ap_channel_done_output_conv1_buffer_5,
        t_empty_n => output_conv1_buffer_5_t_empty_n,
        t_read => max_pooling2_U0_ap_ready);

    output_maxp2_buffer_s_U : component LeNet_output_maxp6jw
    generic map (
        DataWidth => 32,
        AddressRange => 196,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        i_address0 => max_pooling2_U0_output_0_address0,
        i_ce0 => max_pooling2_U0_output_0_ce0,
        i_we0 => max_pooling2_U0_output_0_we0,
        i_d0 => max_pooling2_U0_output_0_d0,
        i_q0 => output_maxp2_buffer_s_i_q0,
        t_address0 => convolution3_U0_input_0_address0,
        t_ce0 => convolution3_U0_input_0_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => output_maxp2_buffer_s_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => output_maxp2_buffer_s_i_full_n,
        i_write => ap_channel_done_output_maxp2_buffer_s,
        t_empty_n => output_maxp2_buffer_s_t_empty_n,
        t_read => convolution3_U0_ap_ready);

    output_maxp2_buffer_1_U : component LeNet_output_maxp6jw
    generic map (
        DataWidth => 32,
        AddressRange => 196,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        i_address0 => max_pooling2_U0_output_1_address0,
        i_ce0 => max_pooling2_U0_output_1_ce0,
        i_we0 => max_pooling2_U0_output_1_we0,
        i_d0 => max_pooling2_U0_output_1_d0,
        i_q0 => output_maxp2_buffer_1_i_q0,
        t_address0 => convolution3_U0_input_1_address0,
        t_ce0 => convolution3_U0_input_1_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => output_maxp2_buffer_1_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => output_maxp2_buffer_1_i_full_n,
        i_write => ap_channel_done_output_maxp2_buffer_1,
        t_empty_n => output_maxp2_buffer_1_t_empty_n,
        t_read => convolution3_U0_ap_ready);

    output_maxp2_buffer_2_U : component LeNet_output_maxp6jw
    generic map (
        DataWidth => 32,
        AddressRange => 196,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        i_address0 => max_pooling2_U0_output_2_address0,
        i_ce0 => max_pooling2_U0_output_2_ce0,
        i_we0 => max_pooling2_U0_output_2_we0,
        i_d0 => max_pooling2_U0_output_2_d0,
        i_q0 => output_maxp2_buffer_2_i_q0,
        t_address0 => convolution3_U0_input_2_address0,
        t_ce0 => convolution3_U0_input_2_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => output_maxp2_buffer_2_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => output_maxp2_buffer_2_i_full_n,
        i_write => ap_channel_done_output_maxp2_buffer_2,
        t_empty_n => output_maxp2_buffer_2_t_empty_n,
        t_read => convolution3_U0_ap_ready);

    output_maxp2_buffer_3_U : component LeNet_output_maxp6jw
    generic map (
        DataWidth => 32,
        AddressRange => 196,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        i_address0 => max_pooling2_U0_output_3_address0,
        i_ce0 => max_pooling2_U0_output_3_ce0,
        i_we0 => max_pooling2_U0_output_3_we0,
        i_d0 => max_pooling2_U0_output_3_d0,
        i_q0 => output_maxp2_buffer_3_i_q0,
        t_address0 => convolution3_U0_input_3_address0,
        t_ce0 => convolution3_U0_input_3_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => output_maxp2_buffer_3_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => output_maxp2_buffer_3_i_full_n,
        i_write => ap_channel_done_output_maxp2_buffer_3,
        t_empty_n => output_maxp2_buffer_3_t_empty_n,
        t_read => convolution3_U0_ap_ready);

    output_maxp2_buffer_4_U : component LeNet_output_maxp6jw
    generic map (
        DataWidth => 32,
        AddressRange => 196,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        i_address0 => max_pooling2_U0_output_4_address0,
        i_ce0 => max_pooling2_U0_output_4_ce0,
        i_we0 => max_pooling2_U0_output_4_we0,
        i_d0 => max_pooling2_U0_output_4_d0,
        i_q0 => output_maxp2_buffer_4_i_q0,
        t_address0 => convolution3_U0_input_4_address0,
        t_ce0 => convolution3_U0_input_4_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => output_maxp2_buffer_4_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => output_maxp2_buffer_4_i_full_n,
        i_write => ap_channel_done_output_maxp2_buffer_4,
        t_empty_n => output_maxp2_buffer_4_t_empty_n,
        t_read => convolution3_U0_ap_ready);

    output_maxp2_buffer_5_U : component LeNet_output_maxp6jw
    generic map (
        DataWidth => 32,
        AddressRange => 196,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        i_address0 => max_pooling2_U0_output_5_address0,
        i_ce0 => max_pooling2_U0_output_5_ce0,
        i_we0 => max_pooling2_U0_output_5_we0,
        i_d0 => max_pooling2_U0_output_5_d0,
        i_q0 => output_maxp2_buffer_5_i_q0,
        t_address0 => convolution3_U0_input_5_address0,
        t_ce0 => convolution3_U0_input_5_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => output_maxp2_buffer_5_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => output_maxp2_buffer_5_i_full_n,
        i_write => ap_channel_done_output_maxp2_buffer_5,
        t_empty_n => output_maxp2_buffer_5_t_empty_n,
        t_read => convolution3_U0_ap_ready);

    output_conv3_buffer_s_U : component LeNet_output_convbck
    generic map (
        DataWidth => 32,
        AddressRange => 800,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        i_address0 => convolution3_U0_output_0_address0,
        i_ce0 => convolution3_U0_output_0_ce0,
        i_q0 => output_conv3_buffer_s_i_q0,
        i_address1 => convolution3_U0_output_0_address1,
        i_ce1 => convolution3_U0_output_0_ce1,
        i_we1 => convolution3_U0_output_0_we1,
        i_d1 => convolution3_U0_output_0_d1,
        t_address0 => max_pooling4_U0_input_0_address0,
        t_ce0 => max_pooling4_U0_input_0_ce0,
        t_q0 => output_conv3_buffer_s_t_q0,
        t_address1 => ap_const_lv10_0,
        t_ce1 => ap_const_logic_0,
        t_we1 => ap_const_logic_0,
        t_d1 => ap_const_lv32_0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => output_conv3_buffer_s_i_full_n,
        i_write => ap_channel_done_output_conv3_buffer_s,
        t_empty_n => output_conv3_buffer_s_t_empty_n,
        t_read => max_pooling4_U0_ap_ready);

    output_conv3_buffer_1_U : component LeNet_output_convbck
    generic map (
        DataWidth => 32,
        AddressRange => 800,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        i_address0 => convolution3_U0_output_1_address0,
        i_ce0 => convolution3_U0_output_1_ce0,
        i_q0 => output_conv3_buffer_1_i_q0,
        i_address1 => convolution3_U0_output_1_address1,
        i_ce1 => convolution3_U0_output_1_ce1,
        i_we1 => convolution3_U0_output_1_we1,
        i_d1 => convolution3_U0_output_1_d1,
        t_address0 => max_pooling4_U0_input_1_address0,
        t_ce0 => max_pooling4_U0_input_1_ce0,
        t_q0 => output_conv3_buffer_1_t_q0,
        t_address1 => ap_const_lv10_0,
        t_ce1 => ap_const_logic_0,
        t_we1 => ap_const_logic_0,
        t_d1 => ap_const_lv32_0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => output_conv3_buffer_1_i_full_n,
        i_write => ap_channel_done_output_conv3_buffer_1,
        t_empty_n => output_conv3_buffer_1_t_empty_n,
        t_read => max_pooling4_U0_ap_ready);

    output_maxp4_buffer_s_U : component LeNet_output_maxpbek
    generic map (
        DataWidth => 32,
        AddressRange => 200,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        i_address0 => max_pooling4_U0_output_0_address0,
        i_ce0 => max_pooling4_U0_output_0_ce0,
        i_q0 => output_maxp4_buffer_s_i_q0,
        i_address1 => max_pooling4_U0_output_0_address1,
        i_ce1 => max_pooling4_U0_output_0_ce1,
        i_we1 => max_pooling4_U0_output_0_we1,
        i_d1 => max_pooling4_U0_output_0_d1,
        i_q1 => output_maxp4_buffer_s_i_q1,
        t_address0 => convolution5_U0_input_0_address0,
        t_ce0 => convolution5_U0_input_0_ce0,
        t_q0 => output_maxp4_buffer_s_t_q0,
        t_address1 => convolution5_U0_input_0_address1,
        t_ce1 => convolution5_U0_input_0_ce1,
        t_we1 => ap_const_logic_0,
        t_d1 => ap_const_lv32_0,
        t_q1 => output_maxp4_buffer_s_t_q1,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => output_maxp4_buffer_s_i_full_n,
        i_write => ap_channel_done_output_maxp4_buffer_s,
        t_empty_n => output_maxp4_buffer_s_t_empty_n,
        t_read => convolution5_U0_ap_ready);

    output_maxp4_buffer_1_U : component LeNet_output_maxpbek
    generic map (
        DataWidth => 32,
        AddressRange => 200,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        i_address0 => max_pooling4_U0_output_1_address0,
        i_ce0 => max_pooling4_U0_output_1_ce0,
        i_q0 => output_maxp4_buffer_1_i_q0,
        i_address1 => max_pooling4_U0_output_1_address1,
        i_ce1 => max_pooling4_U0_output_1_ce1,
        i_we1 => max_pooling4_U0_output_1_we1,
        i_d1 => max_pooling4_U0_output_1_d1,
        i_q1 => output_maxp4_buffer_1_i_q1,
        t_address0 => convolution5_U0_input_1_address0,
        t_ce0 => convolution5_U0_input_1_ce0,
        t_q0 => output_maxp4_buffer_1_t_q0,
        t_address1 => convolution5_U0_input_1_address1,
        t_ce1 => convolution5_U0_input_1_ce1,
        t_we1 => ap_const_logic_0,
        t_d1 => ap_const_lv32_0,
        t_q1 => output_maxp4_buffer_1_t_q1,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => output_maxp4_buffer_1_i_full_n,
        i_write => ap_channel_done_output_maxp4_buffer_1,
        t_empty_n => output_maxp4_buffer_1_t_empty_n,
        t_read => convolution5_U0_ap_ready);

    output_conv5_buffer_s_U : component LeNet_output_convbgk
    generic map (
        DataWidth => 32,
        AddressRange => 20,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        i_address0 => convolution5_U0_output_0_0_0_address0,
        i_ce0 => convolution5_U0_output_0_0_0_ce0,
        i_q0 => output_conv5_buffer_s_i_q0,
        i_address1 => convolution5_U0_output_0_0_0_address1,
        i_ce1 => convolution5_U0_output_0_0_0_ce1,
        i_we1 => convolution5_U0_output_0_0_0_we1,
        i_d1 => convolution5_U0_output_0_0_0_d1,
        t_address0 => fc6_U0_input_0_0_0_address0,
        t_ce0 => fc6_U0_input_0_0_0_ce0,
        t_q0 => output_conv5_buffer_s_t_q0,
        t_address1 => ap_const_lv5_0,
        t_ce1 => ap_const_logic_0,
        t_we1 => ap_const_logic_0,
        t_d1 => ap_const_lv32_0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => output_conv5_buffer_s_i_full_n,
        i_write => ap_channel_done_output_conv5_buffer_s,
        t_empty_n => output_conv5_buffer_s_t_empty_n,
        t_read => fc6_U0_ap_ready);

    output_conv5_buffer_1_U : component LeNet_output_convbgk
    generic map (
        DataWidth => 32,
        AddressRange => 20,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        i_address0 => convolution5_U0_output_1_0_0_address0,
        i_ce0 => convolution5_U0_output_1_0_0_ce0,
        i_q0 => output_conv5_buffer_1_i_q0,
        i_address1 => convolution5_U0_output_1_0_0_address1,
        i_ce1 => convolution5_U0_output_1_0_0_ce1,
        i_we1 => convolution5_U0_output_1_0_0_we1,
        i_d1 => convolution5_U0_output_1_0_0_d1,
        t_address0 => fc6_U0_input_1_0_0_address0,
        t_ce0 => fc6_U0_input_1_0_0_ce0,
        t_q0 => output_conv5_buffer_1_t_q0,
        t_address1 => ap_const_lv5_0,
        t_ce1 => ap_const_logic_0,
        t_we1 => ap_const_logic_0,
        t_d1 => ap_const_lv32_0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => output_conv5_buffer_1_i_full_n,
        i_write => ap_channel_done_output_conv5_buffer_1,
        t_empty_n => output_conv5_buffer_1_t_empty_n,
        t_read => fc6_U0_ap_ready);

    output_conv5_buffer_2_U : component LeNet_output_convbgk
    generic map (
        DataWidth => 32,
        AddressRange => 20,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        i_address0 => convolution5_U0_output_2_0_0_address0,
        i_ce0 => convolution5_U0_output_2_0_0_ce0,
        i_q0 => output_conv5_buffer_2_i_q0,
        i_address1 => convolution5_U0_output_2_0_0_address1,
        i_ce1 => convolution5_U0_output_2_0_0_ce1,
        i_we1 => convolution5_U0_output_2_0_0_we1,
        i_d1 => convolution5_U0_output_2_0_0_d1,
        t_address0 => fc6_U0_input_2_0_0_address0,
        t_ce0 => fc6_U0_input_2_0_0_ce0,
        t_q0 => output_conv5_buffer_2_t_q0,
        t_address1 => ap_const_lv5_0,
        t_ce1 => ap_const_logic_0,
        t_we1 => ap_const_logic_0,
        t_d1 => ap_const_lv32_0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => output_conv5_buffer_2_i_full_n,
        i_write => ap_channel_done_output_conv5_buffer_2,
        t_empty_n => output_conv5_buffer_2_t_empty_n,
        t_read => fc6_U0_ap_ready);

    output_conv5_buffer_3_U : component LeNet_output_convbgk
    generic map (
        DataWidth => 32,
        AddressRange => 20,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        i_address0 => convolution5_U0_output_3_0_0_address0,
        i_ce0 => convolution5_U0_output_3_0_0_ce0,
        i_q0 => output_conv5_buffer_3_i_q0,
        i_address1 => convolution5_U0_output_3_0_0_address1,
        i_ce1 => convolution5_U0_output_3_0_0_ce1,
        i_we1 => convolution5_U0_output_3_0_0_we1,
        i_d1 => convolution5_U0_output_3_0_0_d1,
        t_address0 => fc6_U0_input_3_0_0_address0,
        t_ce0 => fc6_U0_input_3_0_0_ce0,
        t_q0 => output_conv5_buffer_3_t_q0,
        t_address1 => ap_const_lv5_0,
        t_ce1 => ap_const_logic_0,
        t_we1 => ap_const_logic_0,
        t_d1 => ap_const_lv32_0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => output_conv5_buffer_3_i_full_n,
        i_write => ap_channel_done_output_conv5_buffer_3,
        t_empty_n => output_conv5_buffer_3_t_empty_n,
        t_read => fc6_U0_ap_ready);

    output_conv5_buffer_4_U : component LeNet_output_convbgk
    generic map (
        DataWidth => 32,
        AddressRange => 20,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        i_address0 => convolution5_U0_output_4_0_0_address0,
        i_ce0 => convolution5_U0_output_4_0_0_ce0,
        i_q0 => output_conv5_buffer_4_i_q0,
        i_address1 => convolution5_U0_output_4_0_0_address1,
        i_ce1 => convolution5_U0_output_4_0_0_ce1,
        i_we1 => convolution5_U0_output_4_0_0_we1,
        i_d1 => convolution5_U0_output_4_0_0_d1,
        t_address0 => fc6_U0_input_4_0_0_address0,
        t_ce0 => fc6_U0_input_4_0_0_ce0,
        t_q0 => output_conv5_buffer_4_t_q0,
        t_address1 => ap_const_lv5_0,
        t_ce1 => ap_const_logic_0,
        t_we1 => ap_const_logic_0,
        t_d1 => ap_const_lv32_0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => output_conv5_buffer_4_i_full_n,
        i_write => ap_channel_done_output_conv5_buffer_4,
        t_empty_n => output_conv5_buffer_4_t_empty_n,
        t_read => fc6_U0_ap_ready);

    output_conv5_buffer_5_U : component LeNet_output_convbgk
    generic map (
        DataWidth => 32,
        AddressRange => 20,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        i_address0 => convolution5_U0_output_5_0_0_address0,
        i_ce0 => convolution5_U0_output_5_0_0_ce0,
        i_q0 => output_conv5_buffer_5_i_q0,
        i_address1 => convolution5_U0_output_5_0_0_address1,
        i_ce1 => convolution5_U0_output_5_0_0_ce1,
        i_we1 => convolution5_U0_output_5_0_0_we1,
        i_d1 => convolution5_U0_output_5_0_0_d1,
        t_address0 => fc6_U0_input_5_0_0_address0,
        t_ce0 => fc6_U0_input_5_0_0_ce0,
        t_q0 => output_conv5_buffer_5_t_q0,
        t_address1 => ap_const_lv5_0,
        t_ce1 => ap_const_logic_0,
        t_we1 => ap_const_logic_0,
        t_d1 => ap_const_lv32_0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => output_conv5_buffer_5_i_full_n,
        i_write => ap_channel_done_output_conv5_buffer_5,
        t_empty_n => output_conv5_buffer_5_t_empty_n,
        t_read => fc6_U0_ap_ready);

    output_fc6_buffer_0_U : component LeNet_output_fc6_bml
    generic map (
        DataWidth => 32,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        i_address0 => fc6_U0_output_0_address0,
        i_ce0 => fc6_U0_output_0_ce0,
        i_we0 => fc6_U0_output_0_we0,
        i_d0 => fc6_U0_output_0_d0,
        i_q0 => output_fc6_buffer_0_i_q0,
        t_address0 => store_output_U0_output_fc6_buffer_0_address0,
        t_ce0 => store_output_U0_output_fc6_buffer_0_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => output_fc6_buffer_0_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => output_fc6_buffer_0_i_full_n,
        i_write => ap_channel_done_output_fc6_buffer_0,
        t_empty_n => output_fc6_buffer_0_t_empty_n,
        t_read => store_output_U0_ap_ready);

    output_fc6_buffer_1_U : component LeNet_output_fc6_bml
    generic map (
        DataWidth => 32,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        i_address0 => fc6_U0_output_1_address0,
        i_ce0 => fc6_U0_output_1_ce0,
        i_we0 => fc6_U0_output_1_we0,
        i_d0 => fc6_U0_output_1_d0,
        i_q0 => output_fc6_buffer_1_i_q0,
        t_address0 => store_output_U0_output_fc6_buffer_1_address0,
        t_ce0 => store_output_U0_output_fc6_buffer_1_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => output_fc6_buffer_1_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => output_fc6_buffer_1_i_full_n,
        i_write => ap_channel_done_output_fc6_buffer_1,
        t_empty_n => output_fc6_buffer_1_t_empty_n,
        t_read => store_output_U0_ap_ready);

    load_input19_U0 : component load_input19
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => load_input19_U0_ap_start,
        ap_done => load_input19_U0_ap_done,
        ap_continue => load_input19_U0_ap_continue,
        ap_idle => load_input19_U0_ap_idle,
        ap_ready => load_input19_U0_ap_ready,
        m_axi_input_r_AWVALID => load_input19_U0_m_axi_input_r_AWVALID,
        m_axi_input_r_AWREADY => ap_const_logic_0,
        m_axi_input_r_AWADDR => load_input19_U0_m_axi_input_r_AWADDR,
        m_axi_input_r_AWID => load_input19_U0_m_axi_input_r_AWID,
        m_axi_input_r_AWLEN => load_input19_U0_m_axi_input_r_AWLEN,
        m_axi_input_r_AWSIZE => load_input19_U0_m_axi_input_r_AWSIZE,
        m_axi_input_r_AWBURST => load_input19_U0_m_axi_input_r_AWBURST,
        m_axi_input_r_AWLOCK => load_input19_U0_m_axi_input_r_AWLOCK,
        m_axi_input_r_AWCACHE => load_input19_U0_m_axi_input_r_AWCACHE,
        m_axi_input_r_AWPROT => load_input19_U0_m_axi_input_r_AWPROT,
        m_axi_input_r_AWQOS => load_input19_U0_m_axi_input_r_AWQOS,
        m_axi_input_r_AWREGION => load_input19_U0_m_axi_input_r_AWREGION,
        m_axi_input_r_AWUSER => load_input19_U0_m_axi_input_r_AWUSER,
        m_axi_input_r_WVALID => load_input19_U0_m_axi_input_r_WVALID,
        m_axi_input_r_WREADY => ap_const_logic_0,
        m_axi_input_r_WDATA => load_input19_U0_m_axi_input_r_WDATA,
        m_axi_input_r_WSTRB => load_input19_U0_m_axi_input_r_WSTRB,
        m_axi_input_r_WLAST => load_input19_U0_m_axi_input_r_WLAST,
        m_axi_input_r_WID => load_input19_U0_m_axi_input_r_WID,
        m_axi_input_r_WUSER => load_input19_U0_m_axi_input_r_WUSER,
        m_axi_input_r_ARVALID => load_input19_U0_m_axi_input_r_ARVALID,
        m_axi_input_r_ARREADY => gmem_ARREADY,
        m_axi_input_r_ARADDR => load_input19_U0_m_axi_input_r_ARADDR,
        m_axi_input_r_ARID => load_input19_U0_m_axi_input_r_ARID,
        m_axi_input_r_ARLEN => load_input19_U0_m_axi_input_r_ARLEN,
        m_axi_input_r_ARSIZE => load_input19_U0_m_axi_input_r_ARSIZE,
        m_axi_input_r_ARBURST => load_input19_U0_m_axi_input_r_ARBURST,
        m_axi_input_r_ARLOCK => load_input19_U0_m_axi_input_r_ARLOCK,
        m_axi_input_r_ARCACHE => load_input19_U0_m_axi_input_r_ARCACHE,
        m_axi_input_r_ARPROT => load_input19_U0_m_axi_input_r_ARPROT,
        m_axi_input_r_ARQOS => load_input19_U0_m_axi_input_r_ARQOS,
        m_axi_input_r_ARREGION => load_input19_U0_m_axi_input_r_ARREGION,
        m_axi_input_r_ARUSER => load_input19_U0_m_axi_input_r_ARUSER,
        m_axi_input_r_RVALID => gmem_RVALID,
        m_axi_input_r_RREADY => load_input19_U0_m_axi_input_r_RREADY,
        m_axi_input_r_RDATA => gmem_RDATA,
        m_axi_input_r_RLAST => gmem_RLAST,
        m_axi_input_r_RID => gmem_RID,
        m_axi_input_r_RUSER => gmem_RUSER,
        m_axi_input_r_RRESP => gmem_RRESP,
        m_axi_input_r_BVALID => ap_const_logic_0,
        m_axi_input_r_BREADY => load_input19_U0_m_axi_input_r_BREADY,
        m_axi_input_r_BRESP => ap_const_lv2_0,
        m_axi_input_r_BID => ap_const_lv1_0,
        m_axi_input_r_BUSER => ap_const_lv1_0,
        input_offset => input_r,
        input_buffer_0_address0 => load_input19_U0_input_buffer_0_address0,
        input_buffer_0_ce0 => load_input19_U0_input_buffer_0_ce0,
        input_buffer_0_we0 => load_input19_U0_input_buffer_0_we0,
        input_buffer_0_d0 => load_input19_U0_input_buffer_0_d0,
        output_r => output_r,
        output_out_din => load_input19_U0_output_out_din,
        output_out_full_n => output_c_full_n,
        output_out_write => load_input19_U0_output_out_write);

    convolution1_U0 : component convolution1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => convolution1_U0_ap_start,
        ap_done => convolution1_U0_ap_done,
        ap_continue => convolution1_U0_ap_continue,
        ap_idle => convolution1_U0_ap_idle,
        ap_ready => convolution1_U0_ap_ready,
        input_0_address0 => convolution1_U0_input_0_address0,
        input_0_ce0 => convolution1_U0_input_0_ce0,
        input_0_q0 => input_buffer_0_t_q0,
        output_0_address0 => convolution1_U0_output_0_address0,
        output_0_ce0 => convolution1_U0_output_0_ce0,
        output_0_q0 => output_conv1_buffer_s_i_q0,
        output_0_address1 => convolution1_U0_output_0_address1,
        output_0_ce1 => convolution1_U0_output_0_ce1,
        output_0_we1 => convolution1_U0_output_0_we1,
        output_0_d1 => convolution1_U0_output_0_d1,
        output_1_address0 => convolution1_U0_output_1_address0,
        output_1_ce0 => convolution1_U0_output_1_ce0,
        output_1_q0 => output_conv1_buffer_1_i_q0,
        output_1_address1 => convolution1_U0_output_1_address1,
        output_1_ce1 => convolution1_U0_output_1_ce1,
        output_1_we1 => convolution1_U0_output_1_we1,
        output_1_d1 => convolution1_U0_output_1_d1,
        output_2_address0 => convolution1_U0_output_2_address0,
        output_2_ce0 => convolution1_U0_output_2_ce0,
        output_2_q0 => output_conv1_buffer_2_i_q0,
        output_2_address1 => convolution1_U0_output_2_address1,
        output_2_ce1 => convolution1_U0_output_2_ce1,
        output_2_we1 => convolution1_U0_output_2_we1,
        output_2_d1 => convolution1_U0_output_2_d1,
        output_3_address0 => convolution1_U0_output_3_address0,
        output_3_ce0 => convolution1_U0_output_3_ce0,
        output_3_q0 => output_conv1_buffer_3_i_q0,
        output_3_address1 => convolution1_U0_output_3_address1,
        output_3_ce1 => convolution1_U0_output_3_ce1,
        output_3_we1 => convolution1_U0_output_3_we1,
        output_3_d1 => convolution1_U0_output_3_d1,
        output_4_address0 => convolution1_U0_output_4_address0,
        output_4_ce0 => convolution1_U0_output_4_ce0,
        output_4_q0 => output_conv1_buffer_4_i_q0,
        output_4_address1 => convolution1_U0_output_4_address1,
        output_4_ce1 => convolution1_U0_output_4_ce1,
        output_4_we1 => convolution1_U0_output_4_we1,
        output_4_d1 => convolution1_U0_output_4_d1,
        output_5_address0 => convolution1_U0_output_5_address0,
        output_5_ce0 => convolution1_U0_output_5_ce0,
        output_5_q0 => output_conv1_buffer_5_i_q0,
        output_5_address1 => convolution1_U0_output_5_address1,
        output_5_ce1 => convolution1_U0_output_5_ce1,
        output_5_we1 => convolution1_U0_output_5_we1,
        output_5_d1 => convolution1_U0_output_5_d1);

    max_pooling2_U0 : component max_pooling2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => max_pooling2_U0_ap_start,
        ap_done => max_pooling2_U0_ap_done,
        ap_continue => max_pooling2_U0_ap_continue,
        ap_idle => max_pooling2_U0_ap_idle,
        ap_ready => max_pooling2_U0_ap_ready,
        input_0_address0 => max_pooling2_U0_input_0_address0,
        input_0_ce0 => max_pooling2_U0_input_0_ce0,
        input_0_q0 => output_conv1_buffer_s_t_q0,
        input_1_address0 => max_pooling2_U0_input_1_address0,
        input_1_ce0 => max_pooling2_U0_input_1_ce0,
        input_1_q0 => output_conv1_buffer_1_t_q0,
        input_2_address0 => max_pooling2_U0_input_2_address0,
        input_2_ce0 => max_pooling2_U0_input_2_ce0,
        input_2_q0 => output_conv1_buffer_2_t_q0,
        input_3_address0 => max_pooling2_U0_input_3_address0,
        input_3_ce0 => max_pooling2_U0_input_3_ce0,
        input_3_q0 => output_conv1_buffer_3_t_q0,
        input_4_address0 => max_pooling2_U0_input_4_address0,
        input_4_ce0 => max_pooling2_U0_input_4_ce0,
        input_4_q0 => output_conv1_buffer_4_t_q0,
        input_5_address0 => max_pooling2_U0_input_5_address0,
        input_5_ce0 => max_pooling2_U0_input_5_ce0,
        input_5_q0 => output_conv1_buffer_5_t_q0,
        output_0_address0 => max_pooling2_U0_output_0_address0,
        output_0_ce0 => max_pooling2_U0_output_0_ce0,
        output_0_we0 => max_pooling2_U0_output_0_we0,
        output_0_d0 => max_pooling2_U0_output_0_d0,
        output_0_q0 => output_maxp2_buffer_s_i_q0,
        output_1_address0 => max_pooling2_U0_output_1_address0,
        output_1_ce0 => max_pooling2_U0_output_1_ce0,
        output_1_we0 => max_pooling2_U0_output_1_we0,
        output_1_d0 => max_pooling2_U0_output_1_d0,
        output_1_q0 => output_maxp2_buffer_1_i_q0,
        output_2_address0 => max_pooling2_U0_output_2_address0,
        output_2_ce0 => max_pooling2_U0_output_2_ce0,
        output_2_we0 => max_pooling2_U0_output_2_we0,
        output_2_d0 => max_pooling2_U0_output_2_d0,
        output_2_q0 => output_maxp2_buffer_2_i_q0,
        output_3_address0 => max_pooling2_U0_output_3_address0,
        output_3_ce0 => max_pooling2_U0_output_3_ce0,
        output_3_we0 => max_pooling2_U0_output_3_we0,
        output_3_d0 => max_pooling2_U0_output_3_d0,
        output_3_q0 => output_maxp2_buffer_3_i_q0,
        output_4_address0 => max_pooling2_U0_output_4_address0,
        output_4_ce0 => max_pooling2_U0_output_4_ce0,
        output_4_we0 => max_pooling2_U0_output_4_we0,
        output_4_d0 => max_pooling2_U0_output_4_d0,
        output_4_q0 => output_maxp2_buffer_4_i_q0,
        output_5_address0 => max_pooling2_U0_output_5_address0,
        output_5_ce0 => max_pooling2_U0_output_5_ce0,
        output_5_we0 => max_pooling2_U0_output_5_we0,
        output_5_d0 => max_pooling2_U0_output_5_d0,
        output_5_q0 => output_maxp2_buffer_5_i_q0);

    convolution3_U0 : component convolution3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => convolution3_U0_ap_start,
        ap_done => convolution3_U0_ap_done,
        ap_continue => convolution3_U0_ap_continue,
        ap_idle => convolution3_U0_ap_idle,
        ap_ready => convolution3_U0_ap_ready,
        input_0_address0 => convolution3_U0_input_0_address0,
        input_0_ce0 => convolution3_U0_input_0_ce0,
        input_0_q0 => output_maxp2_buffer_s_t_q0,
        input_1_address0 => convolution3_U0_input_1_address0,
        input_1_ce0 => convolution3_U0_input_1_ce0,
        input_1_q0 => output_maxp2_buffer_1_t_q0,
        input_2_address0 => convolution3_U0_input_2_address0,
        input_2_ce0 => convolution3_U0_input_2_ce0,
        input_2_q0 => output_maxp2_buffer_2_t_q0,
        input_3_address0 => convolution3_U0_input_3_address0,
        input_3_ce0 => convolution3_U0_input_3_ce0,
        input_3_q0 => output_maxp2_buffer_3_t_q0,
        input_4_address0 => convolution3_U0_input_4_address0,
        input_4_ce0 => convolution3_U0_input_4_ce0,
        input_4_q0 => output_maxp2_buffer_4_t_q0,
        input_5_address0 => convolution3_U0_input_5_address0,
        input_5_ce0 => convolution3_U0_input_5_ce0,
        input_5_q0 => output_maxp2_buffer_5_t_q0,
        output_0_address0 => convolution3_U0_output_0_address0,
        output_0_ce0 => convolution3_U0_output_0_ce0,
        output_0_q0 => output_conv3_buffer_s_i_q0,
        output_0_address1 => convolution3_U0_output_0_address1,
        output_0_ce1 => convolution3_U0_output_0_ce1,
        output_0_we1 => convolution3_U0_output_0_we1,
        output_0_d1 => convolution3_U0_output_0_d1,
        output_1_address0 => convolution3_U0_output_1_address0,
        output_1_ce0 => convolution3_U0_output_1_ce0,
        output_1_q0 => output_conv3_buffer_1_i_q0,
        output_1_address1 => convolution3_U0_output_1_address1,
        output_1_ce1 => convolution3_U0_output_1_ce1,
        output_1_we1 => convolution3_U0_output_1_we1,
        output_1_d1 => convolution3_U0_output_1_d1);

    max_pooling4_U0 : component max_pooling4
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => max_pooling4_U0_ap_start,
        ap_done => max_pooling4_U0_ap_done,
        ap_continue => max_pooling4_U0_ap_continue,
        ap_idle => max_pooling4_U0_ap_idle,
        ap_ready => max_pooling4_U0_ap_ready,
        input_0_address0 => max_pooling4_U0_input_0_address0,
        input_0_ce0 => max_pooling4_U0_input_0_ce0,
        input_0_q0 => output_conv3_buffer_s_t_q0,
        input_1_address0 => max_pooling4_U0_input_1_address0,
        input_1_ce0 => max_pooling4_U0_input_1_ce0,
        input_1_q0 => output_conv3_buffer_1_t_q0,
        output_0_address0 => max_pooling4_U0_output_0_address0,
        output_0_ce0 => max_pooling4_U0_output_0_ce0,
        output_0_q0 => output_maxp4_buffer_s_i_q0,
        output_0_address1 => max_pooling4_U0_output_0_address1,
        output_0_ce1 => max_pooling4_U0_output_0_ce1,
        output_0_we1 => max_pooling4_U0_output_0_we1,
        output_0_d1 => max_pooling4_U0_output_0_d1,
        output_1_address0 => max_pooling4_U0_output_1_address0,
        output_1_ce0 => max_pooling4_U0_output_1_ce0,
        output_1_q0 => output_maxp4_buffer_1_i_q0,
        output_1_address1 => max_pooling4_U0_output_1_address1,
        output_1_ce1 => max_pooling4_U0_output_1_ce1,
        output_1_we1 => max_pooling4_U0_output_1_we1,
        output_1_d1 => max_pooling4_U0_output_1_d1);

    convolution5_U0 : component convolution5
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => convolution5_U0_ap_start,
        ap_done => convolution5_U0_ap_done,
        ap_continue => convolution5_U0_ap_continue,
        ap_idle => convolution5_U0_ap_idle,
        ap_ready => convolution5_U0_ap_ready,
        input_0_address0 => convolution5_U0_input_0_address0,
        input_0_ce0 => convolution5_U0_input_0_ce0,
        input_0_q0 => output_maxp4_buffer_s_t_q0,
        input_0_address1 => convolution5_U0_input_0_address1,
        input_0_ce1 => convolution5_U0_input_0_ce1,
        input_0_q1 => output_maxp4_buffer_s_t_q1,
        input_1_address0 => convolution5_U0_input_1_address0,
        input_1_ce0 => convolution5_U0_input_1_ce0,
        input_1_q0 => output_maxp4_buffer_1_t_q0,
        input_1_address1 => convolution5_U0_input_1_address1,
        input_1_ce1 => convolution5_U0_input_1_ce1,
        input_1_q1 => output_maxp4_buffer_1_t_q1,
        output_0_0_0_address0 => convolution5_U0_output_0_0_0_address0,
        output_0_0_0_ce0 => convolution5_U0_output_0_0_0_ce0,
        output_0_0_0_q0 => output_conv5_buffer_s_i_q0,
        output_0_0_0_address1 => convolution5_U0_output_0_0_0_address1,
        output_0_0_0_ce1 => convolution5_U0_output_0_0_0_ce1,
        output_0_0_0_we1 => convolution5_U0_output_0_0_0_we1,
        output_0_0_0_d1 => convolution5_U0_output_0_0_0_d1,
        output_1_0_0_address0 => convolution5_U0_output_1_0_0_address0,
        output_1_0_0_ce0 => convolution5_U0_output_1_0_0_ce0,
        output_1_0_0_q0 => output_conv5_buffer_1_i_q0,
        output_1_0_0_address1 => convolution5_U0_output_1_0_0_address1,
        output_1_0_0_ce1 => convolution5_U0_output_1_0_0_ce1,
        output_1_0_0_we1 => convolution5_U0_output_1_0_0_we1,
        output_1_0_0_d1 => convolution5_U0_output_1_0_0_d1,
        output_2_0_0_address0 => convolution5_U0_output_2_0_0_address0,
        output_2_0_0_ce0 => convolution5_U0_output_2_0_0_ce0,
        output_2_0_0_q0 => output_conv5_buffer_2_i_q0,
        output_2_0_0_address1 => convolution5_U0_output_2_0_0_address1,
        output_2_0_0_ce1 => convolution5_U0_output_2_0_0_ce1,
        output_2_0_0_we1 => convolution5_U0_output_2_0_0_we1,
        output_2_0_0_d1 => convolution5_U0_output_2_0_0_d1,
        output_3_0_0_address0 => convolution5_U0_output_3_0_0_address0,
        output_3_0_0_ce0 => convolution5_U0_output_3_0_0_ce0,
        output_3_0_0_q0 => output_conv5_buffer_3_i_q0,
        output_3_0_0_address1 => convolution5_U0_output_3_0_0_address1,
        output_3_0_0_ce1 => convolution5_U0_output_3_0_0_ce1,
        output_3_0_0_we1 => convolution5_U0_output_3_0_0_we1,
        output_3_0_0_d1 => convolution5_U0_output_3_0_0_d1,
        output_4_0_0_address0 => convolution5_U0_output_4_0_0_address0,
        output_4_0_0_ce0 => convolution5_U0_output_4_0_0_ce0,
        output_4_0_0_q0 => output_conv5_buffer_4_i_q0,
        output_4_0_0_address1 => convolution5_U0_output_4_0_0_address1,
        output_4_0_0_ce1 => convolution5_U0_output_4_0_0_ce1,
        output_4_0_0_we1 => convolution5_U0_output_4_0_0_we1,
        output_4_0_0_d1 => convolution5_U0_output_4_0_0_d1,
        output_5_0_0_address0 => convolution5_U0_output_5_0_0_address0,
        output_5_0_0_ce0 => convolution5_U0_output_5_0_0_ce0,
        output_5_0_0_q0 => output_conv5_buffer_5_i_q0,
        output_5_0_0_address1 => convolution5_U0_output_5_0_0_address1,
        output_5_0_0_ce1 => convolution5_U0_output_5_0_0_ce1,
        output_5_0_0_we1 => convolution5_U0_output_5_0_0_we1,
        output_5_0_0_d1 => convolution5_U0_output_5_0_0_d1);

    fc6_U0 : component fc6
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => fc6_U0_ap_start,
        ap_done => fc6_U0_ap_done,
        ap_continue => fc6_U0_ap_continue,
        ap_idle => fc6_U0_ap_idle,
        ap_ready => fc6_U0_ap_ready,
        input_0_0_0_address0 => fc6_U0_input_0_0_0_address0,
        input_0_0_0_ce0 => fc6_U0_input_0_0_0_ce0,
        input_0_0_0_q0 => output_conv5_buffer_s_t_q0,
        input_1_0_0_address0 => fc6_U0_input_1_0_0_address0,
        input_1_0_0_ce0 => fc6_U0_input_1_0_0_ce0,
        input_1_0_0_q0 => output_conv5_buffer_1_t_q0,
        input_2_0_0_address0 => fc6_U0_input_2_0_0_address0,
        input_2_0_0_ce0 => fc6_U0_input_2_0_0_ce0,
        input_2_0_0_q0 => output_conv5_buffer_2_t_q0,
        input_3_0_0_address0 => fc6_U0_input_3_0_0_address0,
        input_3_0_0_ce0 => fc6_U0_input_3_0_0_ce0,
        input_3_0_0_q0 => output_conv5_buffer_3_t_q0,
        input_4_0_0_address0 => fc6_U0_input_4_0_0_address0,
        input_4_0_0_ce0 => fc6_U0_input_4_0_0_ce0,
        input_4_0_0_q0 => output_conv5_buffer_4_t_q0,
        input_5_0_0_address0 => fc6_U0_input_5_0_0_address0,
        input_5_0_0_ce0 => fc6_U0_input_5_0_0_ce0,
        input_5_0_0_q0 => output_conv5_buffer_5_t_q0,
        output_0_address0 => fc6_U0_output_0_address0,
        output_0_ce0 => fc6_U0_output_0_ce0,
        output_0_we0 => fc6_U0_output_0_we0,
        output_0_d0 => fc6_U0_output_0_d0,
        output_0_q0 => output_fc6_buffer_0_i_q0,
        output_1_address0 => fc6_U0_output_1_address0,
        output_1_ce0 => fc6_U0_output_1_ce0,
        output_1_we0 => fc6_U0_output_1_we0,
        output_1_d0 => fc6_U0_output_1_d0,
        output_1_q0 => output_fc6_buffer_1_i_q0);

    store_output_U0 : component store_output
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => store_output_U0_ap_start,
        ap_done => store_output_U0_ap_done,
        ap_continue => store_output_U0_ap_continue,
        ap_idle => store_output_U0_ap_idle,
        ap_ready => store_output_U0_ap_ready,
        m_axi_output_r_AWVALID => store_output_U0_m_axi_output_r_AWVALID,
        m_axi_output_r_AWREADY => gmem_AWREADY,
        m_axi_output_r_AWADDR => store_output_U0_m_axi_output_r_AWADDR,
        m_axi_output_r_AWID => store_output_U0_m_axi_output_r_AWID,
        m_axi_output_r_AWLEN => store_output_U0_m_axi_output_r_AWLEN,
        m_axi_output_r_AWSIZE => store_output_U0_m_axi_output_r_AWSIZE,
        m_axi_output_r_AWBURST => store_output_U0_m_axi_output_r_AWBURST,
        m_axi_output_r_AWLOCK => store_output_U0_m_axi_output_r_AWLOCK,
        m_axi_output_r_AWCACHE => store_output_U0_m_axi_output_r_AWCACHE,
        m_axi_output_r_AWPROT => store_output_U0_m_axi_output_r_AWPROT,
        m_axi_output_r_AWQOS => store_output_U0_m_axi_output_r_AWQOS,
        m_axi_output_r_AWREGION => store_output_U0_m_axi_output_r_AWREGION,
        m_axi_output_r_AWUSER => store_output_U0_m_axi_output_r_AWUSER,
        m_axi_output_r_WVALID => store_output_U0_m_axi_output_r_WVALID,
        m_axi_output_r_WREADY => gmem_WREADY,
        m_axi_output_r_WDATA => store_output_U0_m_axi_output_r_WDATA,
        m_axi_output_r_WSTRB => store_output_U0_m_axi_output_r_WSTRB,
        m_axi_output_r_WLAST => store_output_U0_m_axi_output_r_WLAST,
        m_axi_output_r_WID => store_output_U0_m_axi_output_r_WID,
        m_axi_output_r_WUSER => store_output_U0_m_axi_output_r_WUSER,
        m_axi_output_r_ARVALID => store_output_U0_m_axi_output_r_ARVALID,
        m_axi_output_r_ARREADY => ap_const_logic_0,
        m_axi_output_r_ARADDR => store_output_U0_m_axi_output_r_ARADDR,
        m_axi_output_r_ARID => store_output_U0_m_axi_output_r_ARID,
        m_axi_output_r_ARLEN => store_output_U0_m_axi_output_r_ARLEN,
        m_axi_output_r_ARSIZE => store_output_U0_m_axi_output_r_ARSIZE,
        m_axi_output_r_ARBURST => store_output_U0_m_axi_output_r_ARBURST,
        m_axi_output_r_ARLOCK => store_output_U0_m_axi_output_r_ARLOCK,
        m_axi_output_r_ARCACHE => store_output_U0_m_axi_output_r_ARCACHE,
        m_axi_output_r_ARPROT => store_output_U0_m_axi_output_r_ARPROT,
        m_axi_output_r_ARQOS => store_output_U0_m_axi_output_r_ARQOS,
        m_axi_output_r_ARREGION => store_output_U0_m_axi_output_r_ARREGION,
        m_axi_output_r_ARUSER => store_output_U0_m_axi_output_r_ARUSER,
        m_axi_output_r_RVALID => ap_const_logic_0,
        m_axi_output_r_RREADY => store_output_U0_m_axi_output_r_RREADY,
        m_axi_output_r_RDATA => ap_const_lv32_0,
        m_axi_output_r_RLAST => ap_const_logic_0,
        m_axi_output_r_RID => ap_const_lv1_0,
        m_axi_output_r_RUSER => ap_const_lv1_0,
        m_axi_output_r_RRESP => ap_const_lv2_0,
        m_axi_output_r_BVALID => gmem_BVALID,
        m_axi_output_r_BREADY => store_output_U0_m_axi_output_r_BREADY,
        m_axi_output_r_BRESP => gmem_BRESP,
        m_axi_output_r_BID => gmem_BID,
        m_axi_output_r_BUSER => gmem_BUSER,
        output_offset_dout => output_c_dout,
        output_offset_empty_n => output_c_empty_n,
        output_offset_read => store_output_U0_output_offset_read,
        output_fc6_buffer_0_address0 => store_output_U0_output_fc6_buffer_0_address0,
        output_fc6_buffer_0_ce0 => store_output_U0_output_fc6_buffer_0_ce0,
        output_fc6_buffer_0_q0 => output_fc6_buffer_0_t_q0,
        output_fc6_buffer_1_address0 => store_output_U0_output_fc6_buffer_1_address0,
        output_fc6_buffer_1_ce0 => store_output_U0_output_fc6_buffer_1_ce0,
        output_fc6_buffer_1_q0 => output_fc6_buffer_1_t_q0);

    output_c_U : component fifo_w32_d8_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => load_input19_U0_output_out_din,
        if_full_n => output_c_full_n,
        if_write => load_input19_U0_output_out_write,
        if_dout => output_c_dout,
        if_empty_n => output_c_empty_n,
        if_read => store_output_U0_output_offset_read);





    ap_sync_reg_channel_write_output_conv1_buffer_1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_output_conv1_buffer_1 <= ap_const_logic_0;
            else
                if (((convolution1_U0_ap_done and convolution1_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_output_conv1_buffer_1 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_output_conv1_buffer_1 <= ap_sync_channel_write_output_conv1_buffer_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_output_conv1_buffer_2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_output_conv1_buffer_2 <= ap_const_logic_0;
            else
                if (((convolution1_U0_ap_done and convolution1_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_output_conv1_buffer_2 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_output_conv1_buffer_2 <= ap_sync_channel_write_output_conv1_buffer_2;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_output_conv1_buffer_3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_output_conv1_buffer_3 <= ap_const_logic_0;
            else
                if (((convolution1_U0_ap_done and convolution1_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_output_conv1_buffer_3 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_output_conv1_buffer_3 <= ap_sync_channel_write_output_conv1_buffer_3;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_output_conv1_buffer_4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_output_conv1_buffer_4 <= ap_const_logic_0;
            else
                if (((convolution1_U0_ap_done and convolution1_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_output_conv1_buffer_4 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_output_conv1_buffer_4 <= ap_sync_channel_write_output_conv1_buffer_4;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_output_conv1_buffer_5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_output_conv1_buffer_5 <= ap_const_logic_0;
            else
                if (((convolution1_U0_ap_done and convolution1_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_output_conv1_buffer_5 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_output_conv1_buffer_5 <= ap_sync_channel_write_output_conv1_buffer_5;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_output_conv1_buffer_s_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_output_conv1_buffer_s <= ap_const_logic_0;
            else
                if (((convolution1_U0_ap_done and convolution1_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_output_conv1_buffer_s <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_output_conv1_buffer_s <= ap_sync_channel_write_output_conv1_buffer_s;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_output_conv3_buffer_1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_output_conv3_buffer_1 <= ap_const_logic_0;
            else
                if (((convolution3_U0_ap_done and convolution3_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_output_conv3_buffer_1 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_output_conv3_buffer_1 <= ap_sync_channel_write_output_conv3_buffer_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_output_conv3_buffer_s_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_output_conv3_buffer_s <= ap_const_logic_0;
            else
                if (((convolution3_U0_ap_done and convolution3_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_output_conv3_buffer_s <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_output_conv3_buffer_s <= ap_sync_channel_write_output_conv3_buffer_s;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_output_conv5_buffer_1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_output_conv5_buffer_1 <= ap_const_logic_0;
            else
                if (((convolution5_U0_ap_done and convolution5_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_output_conv5_buffer_1 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_output_conv5_buffer_1 <= ap_sync_channel_write_output_conv5_buffer_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_output_conv5_buffer_2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_output_conv5_buffer_2 <= ap_const_logic_0;
            else
                if (((convolution5_U0_ap_done and convolution5_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_output_conv5_buffer_2 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_output_conv5_buffer_2 <= ap_sync_channel_write_output_conv5_buffer_2;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_output_conv5_buffer_3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_output_conv5_buffer_3 <= ap_const_logic_0;
            else
                if (((convolution5_U0_ap_done and convolution5_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_output_conv5_buffer_3 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_output_conv5_buffer_3 <= ap_sync_channel_write_output_conv5_buffer_3;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_output_conv5_buffer_4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_output_conv5_buffer_4 <= ap_const_logic_0;
            else
                if (((convolution5_U0_ap_done and convolution5_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_output_conv5_buffer_4 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_output_conv5_buffer_4 <= ap_sync_channel_write_output_conv5_buffer_4;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_output_conv5_buffer_5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_output_conv5_buffer_5 <= ap_const_logic_0;
            else
                if (((convolution5_U0_ap_done and convolution5_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_output_conv5_buffer_5 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_output_conv5_buffer_5 <= ap_sync_channel_write_output_conv5_buffer_5;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_output_conv5_buffer_s_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_output_conv5_buffer_s <= ap_const_logic_0;
            else
                if (((convolution5_U0_ap_done and convolution5_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_output_conv5_buffer_s <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_output_conv5_buffer_s <= ap_sync_channel_write_output_conv5_buffer_s;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_output_fc6_buffer_0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_output_fc6_buffer_0 <= ap_const_logic_0;
            else
                if (((fc6_U0_ap_done and fc6_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_output_fc6_buffer_0 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_output_fc6_buffer_0 <= ap_sync_channel_write_output_fc6_buffer_0;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_output_fc6_buffer_1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_output_fc6_buffer_1 <= ap_const_logic_0;
            else
                if (((fc6_U0_ap_done and fc6_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_output_fc6_buffer_1 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_output_fc6_buffer_1 <= ap_sync_channel_write_output_fc6_buffer_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_output_maxp2_buffer_1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_output_maxp2_buffer_1 <= ap_const_logic_0;
            else
                if (((max_pooling2_U0_ap_done and max_pooling2_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_output_maxp2_buffer_1 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_output_maxp2_buffer_1 <= ap_sync_channel_write_output_maxp2_buffer_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_output_maxp2_buffer_2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_output_maxp2_buffer_2 <= ap_const_logic_0;
            else
                if (((max_pooling2_U0_ap_done and max_pooling2_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_output_maxp2_buffer_2 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_output_maxp2_buffer_2 <= ap_sync_channel_write_output_maxp2_buffer_2;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_output_maxp2_buffer_3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_output_maxp2_buffer_3 <= ap_const_logic_0;
            else
                if (((max_pooling2_U0_ap_done and max_pooling2_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_output_maxp2_buffer_3 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_output_maxp2_buffer_3 <= ap_sync_channel_write_output_maxp2_buffer_3;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_output_maxp2_buffer_4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_output_maxp2_buffer_4 <= ap_const_logic_0;
            else
                if (((max_pooling2_U0_ap_done and max_pooling2_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_output_maxp2_buffer_4 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_output_maxp2_buffer_4 <= ap_sync_channel_write_output_maxp2_buffer_4;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_output_maxp2_buffer_5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_output_maxp2_buffer_5 <= ap_const_logic_0;
            else
                if (((max_pooling2_U0_ap_done and max_pooling2_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_output_maxp2_buffer_5 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_output_maxp2_buffer_5 <= ap_sync_channel_write_output_maxp2_buffer_5;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_output_maxp2_buffer_s_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_output_maxp2_buffer_s <= ap_const_logic_0;
            else
                if (((max_pooling2_U0_ap_done and max_pooling2_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_output_maxp2_buffer_s <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_output_maxp2_buffer_s <= ap_sync_channel_write_output_maxp2_buffer_s;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_output_maxp4_buffer_1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_output_maxp4_buffer_1 <= ap_const_logic_0;
            else
                if (((max_pooling4_U0_ap_done and max_pooling4_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_output_maxp4_buffer_1 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_output_maxp4_buffer_1 <= ap_sync_channel_write_output_maxp4_buffer_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_output_maxp4_buffer_s_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_output_maxp4_buffer_s <= ap_const_logic_0;
            else
                if (((max_pooling4_U0_ap_done and max_pooling4_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_output_maxp4_buffer_s <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_output_maxp4_buffer_s <= ap_sync_channel_write_output_maxp4_buffer_s;
                end if; 
            end if;
        end if;
    end process;

    ap_channel_done_input_buffer_0 <= load_input19_U0_ap_done;
    ap_channel_done_output_conv1_buffer_1 <= ((ap_sync_reg_channel_write_output_conv1_buffer_1 xor ap_const_logic_1) and convolution1_U0_ap_done);
    ap_channel_done_output_conv1_buffer_2 <= ((ap_sync_reg_channel_write_output_conv1_buffer_2 xor ap_const_logic_1) and convolution1_U0_ap_done);
    ap_channel_done_output_conv1_buffer_3 <= ((ap_sync_reg_channel_write_output_conv1_buffer_3 xor ap_const_logic_1) and convolution1_U0_ap_done);
    ap_channel_done_output_conv1_buffer_4 <= ((ap_sync_reg_channel_write_output_conv1_buffer_4 xor ap_const_logic_1) and convolution1_U0_ap_done);
    ap_channel_done_output_conv1_buffer_5 <= ((ap_sync_reg_channel_write_output_conv1_buffer_5 xor ap_const_logic_1) and convolution1_U0_ap_done);
    ap_channel_done_output_conv1_buffer_s <= ((ap_sync_reg_channel_write_output_conv1_buffer_s xor ap_const_logic_1) and convolution1_U0_ap_done);
    ap_channel_done_output_conv3_buffer_1 <= ((ap_sync_reg_channel_write_output_conv3_buffer_1 xor ap_const_logic_1) and convolution3_U0_ap_done);
    ap_channel_done_output_conv3_buffer_s <= ((ap_sync_reg_channel_write_output_conv3_buffer_s xor ap_const_logic_1) and convolution3_U0_ap_done);
    ap_channel_done_output_conv5_buffer_1 <= ((ap_sync_reg_channel_write_output_conv5_buffer_1 xor ap_const_logic_1) and convolution5_U0_ap_done);
    ap_channel_done_output_conv5_buffer_2 <= ((ap_sync_reg_channel_write_output_conv5_buffer_2 xor ap_const_logic_1) and convolution5_U0_ap_done);
    ap_channel_done_output_conv5_buffer_3 <= ((ap_sync_reg_channel_write_output_conv5_buffer_3 xor ap_const_logic_1) and convolution5_U0_ap_done);
    ap_channel_done_output_conv5_buffer_4 <= ((ap_sync_reg_channel_write_output_conv5_buffer_4 xor ap_const_logic_1) and convolution5_U0_ap_done);
    ap_channel_done_output_conv5_buffer_5 <= ((ap_sync_reg_channel_write_output_conv5_buffer_5 xor ap_const_logic_1) and convolution5_U0_ap_done);
    ap_channel_done_output_conv5_buffer_s <= ((ap_sync_reg_channel_write_output_conv5_buffer_s xor ap_const_logic_1) and convolution5_U0_ap_done);
    ap_channel_done_output_fc6_buffer_0 <= (fc6_U0_ap_done and (ap_sync_reg_channel_write_output_fc6_buffer_0 xor ap_const_logic_1));
    ap_channel_done_output_fc6_buffer_1 <= (fc6_U0_ap_done and (ap_sync_reg_channel_write_output_fc6_buffer_1 xor ap_const_logic_1));
    ap_channel_done_output_maxp2_buffer_1 <= (max_pooling2_U0_ap_done and (ap_sync_reg_channel_write_output_maxp2_buffer_1 xor ap_const_logic_1));
    ap_channel_done_output_maxp2_buffer_2 <= (max_pooling2_U0_ap_done and (ap_sync_reg_channel_write_output_maxp2_buffer_2 xor ap_const_logic_1));
    ap_channel_done_output_maxp2_buffer_3 <= (max_pooling2_U0_ap_done and (ap_sync_reg_channel_write_output_maxp2_buffer_3 xor ap_const_logic_1));
    ap_channel_done_output_maxp2_buffer_4 <= (max_pooling2_U0_ap_done and (ap_sync_reg_channel_write_output_maxp2_buffer_4 xor ap_const_logic_1));
    ap_channel_done_output_maxp2_buffer_5 <= (max_pooling2_U0_ap_done and (ap_sync_reg_channel_write_output_maxp2_buffer_5 xor ap_const_logic_1));
    ap_channel_done_output_maxp2_buffer_s <= (max_pooling2_U0_ap_done and (ap_sync_reg_channel_write_output_maxp2_buffer_s xor ap_const_logic_1));
    ap_channel_done_output_maxp4_buffer_1 <= (max_pooling4_U0_ap_done and (ap_sync_reg_channel_write_output_maxp4_buffer_1 xor ap_const_logic_1));
    ap_channel_done_output_maxp4_buffer_s <= (max_pooling4_U0_ap_done and (ap_sync_reg_channel_write_output_maxp4_buffer_s xor ap_const_logic_1));
    ap_done <= store_output_U0_ap_done;
    ap_idle <= (store_output_U0_ap_idle and max_pooling4_U0_ap_idle and max_pooling2_U0_ap_idle and load_input19_U0_ap_idle and fc6_U0_ap_idle and (output_fc6_buffer_1_t_empty_n xor ap_const_logic_1) and (output_fc6_buffer_0_t_empty_n xor ap_const_logic_1) and (output_conv5_buffer_5_t_empty_n xor ap_const_logic_1) and (output_conv5_buffer_4_t_empty_n xor ap_const_logic_1) and (output_conv5_buffer_3_t_empty_n xor ap_const_logic_1) and (output_conv5_buffer_2_t_empty_n xor ap_const_logic_1) and (output_conv5_buffer_1_t_empty_n xor ap_const_logic_1) and (output_conv5_buffer_s_t_empty_n xor ap_const_logic_1) and (output_maxp4_buffer_1_t_empty_n xor ap_const_logic_1) and (output_maxp4_buffer_s_t_empty_n xor ap_const_logic_1) and (output_conv3_buffer_1_t_empty_n xor ap_const_logic_1) and (output_conv3_buffer_s_t_empty_n xor ap_const_logic_1) and (output_maxp2_buffer_5_t_empty_n xor ap_const_logic_1) and (output_maxp2_buffer_4_t_empty_n xor ap_const_logic_1) and (output_maxp2_buffer_3_t_empty_n xor ap_const_logic_1) and (output_maxp2_buffer_2_t_empty_n xor ap_const_logic_1) and (output_maxp2_buffer_1_t_empty_n xor ap_const_logic_1) and (output_maxp2_buffer_s_t_empty_n xor ap_const_logic_1) and (output_conv1_buffer_5_t_empty_n xor ap_const_logic_1) and (output_conv1_buffer_4_t_empty_n xor ap_const_logic_1) and (output_conv1_buffer_3_t_empty_n xor ap_const_logic_1) and (output_conv1_buffer_2_t_empty_n xor ap_const_logic_1) and (output_conv1_buffer_1_t_empty_n xor ap_const_logic_1) and (output_conv1_buffer_s_t_empty_n xor ap_const_logic_1) and (input_buffer_0_t_empty_n xor ap_const_logic_1) and convolution5_U0_ap_idle and convolution3_U0_ap_idle and convolution1_U0_ap_idle);
    ap_ready <= load_input19_U0_ap_ready;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_channel_write_output_conv1_buffer_1 <= ((convolution1_U0_output_1_full_n and ap_channel_done_output_conv1_buffer_1) or ap_sync_reg_channel_write_output_conv1_buffer_1);
    ap_sync_channel_write_output_conv1_buffer_2 <= ((convolution1_U0_output_2_full_n and ap_channel_done_output_conv1_buffer_2) or ap_sync_reg_channel_write_output_conv1_buffer_2);
    ap_sync_channel_write_output_conv1_buffer_3 <= ((convolution1_U0_output_3_full_n and ap_channel_done_output_conv1_buffer_3) or ap_sync_reg_channel_write_output_conv1_buffer_3);
    ap_sync_channel_write_output_conv1_buffer_4 <= ((convolution1_U0_output_4_full_n and ap_channel_done_output_conv1_buffer_4) or ap_sync_reg_channel_write_output_conv1_buffer_4);
    ap_sync_channel_write_output_conv1_buffer_5 <= ((convolution1_U0_output_5_full_n and ap_channel_done_output_conv1_buffer_5) or ap_sync_reg_channel_write_output_conv1_buffer_5);
    ap_sync_channel_write_output_conv1_buffer_s <= ((convolution1_U0_output_0_full_n and ap_channel_done_output_conv1_buffer_s) or ap_sync_reg_channel_write_output_conv1_buffer_s);
    ap_sync_channel_write_output_conv3_buffer_1 <= ((convolution3_U0_output_1_full_n and ap_channel_done_output_conv3_buffer_1) or ap_sync_reg_channel_write_output_conv3_buffer_1);
    ap_sync_channel_write_output_conv3_buffer_s <= ((convolution3_U0_output_0_full_n and ap_channel_done_output_conv3_buffer_s) or ap_sync_reg_channel_write_output_conv3_buffer_s);
    ap_sync_channel_write_output_conv5_buffer_1 <= ((convolution5_U0_output_1_0_0_full_n and ap_channel_done_output_conv5_buffer_1) or ap_sync_reg_channel_write_output_conv5_buffer_1);
    ap_sync_channel_write_output_conv5_buffer_2 <= ((convolution5_U0_output_2_0_0_full_n and ap_channel_done_output_conv5_buffer_2) or ap_sync_reg_channel_write_output_conv5_buffer_2);
    ap_sync_channel_write_output_conv5_buffer_3 <= ((convolution5_U0_output_3_0_0_full_n and ap_channel_done_output_conv5_buffer_3) or ap_sync_reg_channel_write_output_conv5_buffer_3);
    ap_sync_channel_write_output_conv5_buffer_4 <= ((convolution5_U0_output_4_0_0_full_n and ap_channel_done_output_conv5_buffer_4) or ap_sync_reg_channel_write_output_conv5_buffer_4);
    ap_sync_channel_write_output_conv5_buffer_5 <= ((convolution5_U0_output_5_0_0_full_n and ap_channel_done_output_conv5_buffer_5) or ap_sync_reg_channel_write_output_conv5_buffer_5);
    ap_sync_channel_write_output_conv5_buffer_s <= ((convolution5_U0_output_0_0_0_full_n and ap_channel_done_output_conv5_buffer_s) or ap_sync_reg_channel_write_output_conv5_buffer_s);
    ap_sync_channel_write_output_fc6_buffer_0 <= ((fc6_U0_output_0_full_n and ap_channel_done_output_fc6_buffer_0) or ap_sync_reg_channel_write_output_fc6_buffer_0);
    ap_sync_channel_write_output_fc6_buffer_1 <= ((fc6_U0_output_1_full_n and ap_channel_done_output_fc6_buffer_1) or ap_sync_reg_channel_write_output_fc6_buffer_1);
    ap_sync_channel_write_output_maxp2_buffer_1 <= ((max_pooling2_U0_output_1_full_n and ap_channel_done_output_maxp2_buffer_1) or ap_sync_reg_channel_write_output_maxp2_buffer_1);
    ap_sync_channel_write_output_maxp2_buffer_2 <= ((max_pooling2_U0_output_2_full_n and ap_channel_done_output_maxp2_buffer_2) or ap_sync_reg_channel_write_output_maxp2_buffer_2);
    ap_sync_channel_write_output_maxp2_buffer_3 <= ((max_pooling2_U0_output_3_full_n and ap_channel_done_output_maxp2_buffer_3) or ap_sync_reg_channel_write_output_maxp2_buffer_3);
    ap_sync_channel_write_output_maxp2_buffer_4 <= ((max_pooling2_U0_output_4_full_n and ap_channel_done_output_maxp2_buffer_4) or ap_sync_reg_channel_write_output_maxp2_buffer_4);
    ap_sync_channel_write_output_maxp2_buffer_5 <= ((max_pooling2_U0_output_5_full_n and ap_channel_done_output_maxp2_buffer_5) or ap_sync_reg_channel_write_output_maxp2_buffer_5);
    ap_sync_channel_write_output_maxp2_buffer_s <= ((max_pooling2_U0_output_0_full_n and ap_channel_done_output_maxp2_buffer_s) or ap_sync_reg_channel_write_output_maxp2_buffer_s);
    ap_sync_channel_write_output_maxp4_buffer_1 <= ((max_pooling4_U0_output_1_full_n and ap_channel_done_output_maxp4_buffer_1) or ap_sync_reg_channel_write_output_maxp4_buffer_1);
    ap_sync_channel_write_output_maxp4_buffer_s <= ((max_pooling4_U0_output_0_full_n and ap_channel_done_output_maxp4_buffer_s) or ap_sync_reg_channel_write_output_maxp4_buffer_s);
    ap_sync_continue <= ap_const_logic_1;
    ap_sync_done <= store_output_U0_ap_done;
    ap_sync_ready <= load_input19_U0_ap_ready;
    convolution1_U0_ap_continue <= (ap_sync_channel_write_output_conv1_buffer_s and ap_sync_channel_write_output_conv1_buffer_5 and ap_sync_channel_write_output_conv1_buffer_4 and ap_sync_channel_write_output_conv1_buffer_3 and ap_sync_channel_write_output_conv1_buffer_2 and ap_sync_channel_write_output_conv1_buffer_1);
    convolution1_U0_ap_start <= input_buffer_0_t_empty_n;
    convolution1_U0_output_0_full_n <= output_conv1_buffer_s_i_full_n;
    convolution1_U0_output_1_full_n <= output_conv1_buffer_1_i_full_n;
    convolution1_U0_output_2_full_n <= output_conv1_buffer_2_i_full_n;
    convolution1_U0_output_3_full_n <= output_conv1_buffer_3_i_full_n;
    convolution1_U0_output_4_full_n <= output_conv1_buffer_4_i_full_n;
    convolution1_U0_output_5_full_n <= output_conv1_buffer_5_i_full_n;
    convolution1_U0_start_full_n <= ap_const_logic_1;
    convolution1_U0_start_write <= ap_const_logic_0;
    convolution3_U0_ap_continue <= (ap_sync_channel_write_output_conv3_buffer_s and ap_sync_channel_write_output_conv3_buffer_1);
    convolution3_U0_ap_start <= (output_maxp2_buffer_s_t_empty_n and output_maxp2_buffer_5_t_empty_n and output_maxp2_buffer_4_t_empty_n and output_maxp2_buffer_3_t_empty_n and output_maxp2_buffer_2_t_empty_n and output_maxp2_buffer_1_t_empty_n);
    convolution3_U0_output_0_full_n <= output_conv3_buffer_s_i_full_n;
    convolution3_U0_output_1_full_n <= output_conv3_buffer_1_i_full_n;
    convolution3_U0_start_full_n <= ap_const_logic_1;
    convolution3_U0_start_write <= ap_const_logic_0;
    convolution5_U0_ap_continue <= (ap_sync_channel_write_output_conv5_buffer_s and ap_sync_channel_write_output_conv5_buffer_5 and ap_sync_channel_write_output_conv5_buffer_4 and ap_sync_channel_write_output_conv5_buffer_3 and ap_sync_channel_write_output_conv5_buffer_2 and ap_sync_channel_write_output_conv5_buffer_1);
    convolution5_U0_ap_start <= (output_maxp4_buffer_s_t_empty_n and output_maxp4_buffer_1_t_empty_n);
    convolution5_U0_output_0_0_0_full_n <= output_conv5_buffer_s_i_full_n;
    convolution5_U0_output_1_0_0_full_n <= output_conv5_buffer_1_i_full_n;
    convolution5_U0_output_2_0_0_full_n <= output_conv5_buffer_2_i_full_n;
    convolution5_U0_output_3_0_0_full_n <= output_conv5_buffer_3_i_full_n;
    convolution5_U0_output_4_0_0_full_n <= output_conv5_buffer_4_i_full_n;
    convolution5_U0_output_5_0_0_full_n <= output_conv5_buffer_5_i_full_n;
    convolution5_U0_start_full_n <= ap_const_logic_1;
    convolution5_U0_start_write <= ap_const_logic_0;
    fc6_U0_ap_continue <= (ap_sync_channel_write_output_fc6_buffer_1 and ap_sync_channel_write_output_fc6_buffer_0);
    fc6_U0_ap_start <= (output_conv5_buffer_s_t_empty_n and output_conv5_buffer_5_t_empty_n and output_conv5_buffer_4_t_empty_n and output_conv5_buffer_3_t_empty_n and output_conv5_buffer_2_t_empty_n and output_conv5_buffer_1_t_empty_n);
    fc6_U0_output_0_full_n <= output_fc6_buffer_0_i_full_n;
    fc6_U0_output_1_full_n <= output_fc6_buffer_1_i_full_n;
    fc6_U0_start_full_n <= ap_const_logic_1;
    fc6_U0_start_write <= ap_const_logic_0;
    load_input19_U0_ap_continue <= input_buffer_0_i_full_n;
    load_input19_U0_ap_start <= ap_start;
    load_input19_U0_input_buffer_0_full_n <= input_buffer_0_i_full_n;
    load_input19_U0_start_full_n <= ap_const_logic_1;
    load_input19_U0_start_write <= ap_const_logic_0;
    max_pooling2_U0_ap_continue <= (ap_sync_channel_write_output_maxp2_buffer_s and ap_sync_channel_write_output_maxp2_buffer_5 and ap_sync_channel_write_output_maxp2_buffer_4 and ap_sync_channel_write_output_maxp2_buffer_3 and ap_sync_channel_write_output_maxp2_buffer_2 and ap_sync_channel_write_output_maxp2_buffer_1);
    max_pooling2_U0_ap_start <= (output_conv1_buffer_s_t_empty_n and output_conv1_buffer_5_t_empty_n and output_conv1_buffer_4_t_empty_n and output_conv1_buffer_3_t_empty_n and output_conv1_buffer_2_t_empty_n and output_conv1_buffer_1_t_empty_n);
    max_pooling2_U0_output_0_full_n <= output_maxp2_buffer_s_i_full_n;
    max_pooling2_U0_output_1_full_n <= output_maxp2_buffer_1_i_full_n;
    max_pooling2_U0_output_2_full_n <= output_maxp2_buffer_2_i_full_n;
    max_pooling2_U0_output_3_full_n <= output_maxp2_buffer_3_i_full_n;
    max_pooling2_U0_output_4_full_n <= output_maxp2_buffer_4_i_full_n;
    max_pooling2_U0_output_5_full_n <= output_maxp2_buffer_5_i_full_n;
    max_pooling2_U0_start_full_n <= ap_const_logic_1;
    max_pooling2_U0_start_write <= ap_const_logic_0;
    max_pooling4_U0_ap_continue <= (ap_sync_channel_write_output_maxp4_buffer_s and ap_sync_channel_write_output_maxp4_buffer_1);
    max_pooling4_U0_ap_start <= (output_conv3_buffer_s_t_empty_n and output_conv3_buffer_1_t_empty_n);
    max_pooling4_U0_output_0_full_n <= output_maxp4_buffer_s_i_full_n;
    max_pooling4_U0_output_1_full_n <= output_maxp4_buffer_1_i_full_n;
    max_pooling4_U0_start_full_n <= ap_const_logic_1;
    max_pooling4_U0_start_write <= ap_const_logic_0;
    output_conv1_buffer_1_i_d0 <= ap_const_lv32_0;
    output_conv1_buffer_1_i_we0 <= ap_const_logic_0;
    output_conv1_buffer_1_t_d0 <= ap_const_lv32_0;
    output_conv1_buffer_1_t_we0 <= ap_const_logic_0;
    output_conv1_buffer_2_i_d0 <= ap_const_lv32_0;
    output_conv1_buffer_2_i_we0 <= ap_const_logic_0;
    output_conv1_buffer_2_t_d0 <= ap_const_lv32_0;
    output_conv1_buffer_2_t_we0 <= ap_const_logic_0;
    output_conv1_buffer_3_i_d0 <= ap_const_lv32_0;
    output_conv1_buffer_3_i_we0 <= ap_const_logic_0;
    output_conv1_buffer_3_t_d0 <= ap_const_lv32_0;
    output_conv1_buffer_3_t_we0 <= ap_const_logic_0;
    output_conv1_buffer_4_i_d0 <= ap_const_lv32_0;
    output_conv1_buffer_4_i_we0 <= ap_const_logic_0;
    output_conv1_buffer_4_t_d0 <= ap_const_lv32_0;
    output_conv1_buffer_4_t_we0 <= ap_const_logic_0;
    output_conv1_buffer_5_i_d0 <= ap_const_lv32_0;
    output_conv1_buffer_5_i_we0 <= ap_const_logic_0;
    output_conv1_buffer_5_t_d0 <= ap_const_lv32_0;
    output_conv1_buffer_5_t_we0 <= ap_const_logic_0;
    output_conv1_buffer_s_i_d0 <= ap_const_lv32_0;
    output_conv1_buffer_s_i_we0 <= ap_const_logic_0;
    output_conv1_buffer_s_t_d0 <= ap_const_lv32_0;
    output_conv1_buffer_s_t_we0 <= ap_const_logic_0;
    output_conv3_buffer_1_i_d0 <= ap_const_lv32_0;
    output_conv3_buffer_1_i_we0 <= ap_const_logic_0;
    output_conv3_buffer_1_t_d0 <= ap_const_lv32_0;
    output_conv3_buffer_1_t_we0 <= ap_const_logic_0;
    output_conv3_buffer_s_i_d0 <= ap_const_lv32_0;
    output_conv3_buffer_s_i_we0 <= ap_const_logic_0;
    output_conv3_buffer_s_t_d0 <= ap_const_lv32_0;
    output_conv3_buffer_s_t_we0 <= ap_const_logic_0;
    output_conv5_buffer_1_i_d0 <= ap_const_lv32_0;
    output_conv5_buffer_1_i_we0 <= ap_const_logic_0;
    output_conv5_buffer_1_t_d0 <= ap_const_lv32_0;
    output_conv5_buffer_1_t_we0 <= ap_const_logic_0;
    output_conv5_buffer_2_i_d0 <= ap_const_lv32_0;
    output_conv5_buffer_2_i_we0 <= ap_const_logic_0;
    output_conv5_buffer_2_t_d0 <= ap_const_lv32_0;
    output_conv5_buffer_2_t_we0 <= ap_const_logic_0;
    output_conv5_buffer_3_i_d0 <= ap_const_lv32_0;
    output_conv5_buffer_3_i_we0 <= ap_const_logic_0;
    output_conv5_buffer_3_t_d0 <= ap_const_lv32_0;
    output_conv5_buffer_3_t_we0 <= ap_const_logic_0;
    output_conv5_buffer_4_i_d0 <= ap_const_lv32_0;
    output_conv5_buffer_4_i_we0 <= ap_const_logic_0;
    output_conv5_buffer_4_t_d0 <= ap_const_lv32_0;
    output_conv5_buffer_4_t_we0 <= ap_const_logic_0;
    output_conv5_buffer_5_i_d0 <= ap_const_lv32_0;
    output_conv5_buffer_5_i_we0 <= ap_const_logic_0;
    output_conv5_buffer_5_t_d0 <= ap_const_lv32_0;
    output_conv5_buffer_5_t_we0 <= ap_const_logic_0;
    output_conv5_buffer_s_i_d0 <= ap_const_lv32_0;
    output_conv5_buffer_s_i_we0 <= ap_const_logic_0;
    output_conv5_buffer_s_t_d0 <= ap_const_lv32_0;
    output_conv5_buffer_s_t_we0 <= ap_const_logic_0;
    output_maxp4_buffer_1_i_d0 <= ap_const_lv32_0;
    output_maxp4_buffer_1_i_we0 <= ap_const_logic_0;
    output_maxp4_buffer_1_t_d0 <= ap_const_lv32_0;
    output_maxp4_buffer_1_t_we0 <= ap_const_logic_0;
    output_maxp4_buffer_s_i_d0 <= ap_const_lv32_0;
    output_maxp4_buffer_s_i_we0 <= ap_const_logic_0;
    output_maxp4_buffer_s_t_d0 <= ap_const_lv32_0;
    output_maxp4_buffer_s_t_we0 <= ap_const_logic_0;
    store_output_U0_ap_continue <= ap_const_logic_1;
    store_output_U0_ap_start <= (output_fc6_buffer_1_t_empty_n and output_fc6_buffer_0_t_empty_n);
    store_output_U0_start_full_n <= ap_const_logic_1;
    store_output_U0_start_write <= ap_const_logic_0;
end behav;
