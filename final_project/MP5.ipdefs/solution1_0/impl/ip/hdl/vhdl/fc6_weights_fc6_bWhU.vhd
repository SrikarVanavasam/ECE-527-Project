-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity fc6_weights_fc6_bWhU_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 100
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of fc6_weights_fc6_bWhU_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111110010010110001100000100011", 
    1 => "00111101010101100010000111010011", 
    2 => "10111101000101101101100011111000", 
    3 => "10111101101011100100011101101010", 
    4 => "10111101001111010110101011101010", 
    5 => "00111100100111001101010100100011", 
    6 => "10111011000101000110110001011110", 
    7 => "00111101100010011001010010111101", 
    8 => "10111110001011110001011001001101", 
    9 => "10111101111011010001100100011110", 
    10 => "00111101011110101101001000111001", 
    11 => "00111101000000111111000111010101", 
    12 => "00111110001000101001110010011001", 
    13 => "00111100111111100101000011010011", 
    14 => "10111100101101011001000010100110", 
    15 => "00111110001010010111110101110011", 
    16 => "00111110001101100101011100100011", 
    17 => "00111011111011100111001101010000", 
    18 => "10111101110100110110010110101111", 
    19 => "10111101100111101101110100100001", 
    20 => "10111101000011010011101010000110", 
    21 => "00111101101001011111101101011000", 
    22 => "00111101111100011110110001010010", 
    23 => "00111101010110111000001100000110", 
    24 => "10111110001100101100000001110100", 
    25 => "00111110010110110100001000110001", 
    26 => "00111101010111111110100110000010", 
    27 => "10111101101100110100111011111101", 
    28 => "00111101110010011010010011011001", 
    29 => "00111101011100010100110111011000", 
    30 => "10111100110111011001110000101000", 
    31 => "00111100110101110000000101100100", 
    32 => "10111110000110111100101010010100", 
    33 => "10111101100100111011111011110010", 
    34 => "00111101101110000011101010011010", 
    35 => "10111101100001001011001110101010", 
    36 => "00111100110001101011000001001000", 
    37 => "10111101011011111110110011010101", 
    38 => "00111110010110000111001100111010", 
    39 => "00111110000010110001111000001000", 
    40 => "00111101101101100011101000011110", 
    41 => "00111100110000011101010010100111", 
    42 => "10111101101000001000101111000110", 
    43 => "00111100100111100001001001101010", 
    44 => "00111101111010001010001001001000", 
    45 => "00111101010010111111001001101111", 
    46 => "00111011101110001011001010111001", 
    47 => "00111101100101001111100001010100", 
    48 => "10111101001011000110100111110011", 
    49 => "00111110011100100110100111001010", 
    50 => "00111110010010000001111000011100", 
    51 => "00111100101000001100001100001110", 
    52 => "10111110011111001001111001010110", 
    53 => "00111101010001111100011111011101", 
    54 => "10111110001001100100001011010000", 
    55 => "10111110001100010010101011010001", 
    56 => "00111110000101110000101000101110", 
    57 => "10111110010001001101001011111010", 
    58 => "10111101111100001000100011101010", 
    59 => "00111101111100110110100001010011", 
    60 => "00111110000000010011001100010000", 
    61 => "00111110100101100000101100100011", 
    62 => "10111110010101100101111101010101", 
    63 => "00111110000000101011101110111010", 
    64 => "00111100111001100101000001100001", 
    65 => "10111110010011000000000010111100", 
    66 => "00111110000110111100101111001101", 
    67 => "00111110000000111111010101011011", 
    68 => "10111101100010110000011010000010", 
    69 => "10111110001011000110110101101110", 
    70 => "10111100101000010110110010011100", 
    71 => "00111110010001001110011001101111", 
    72 => "10111101101100010111101001001010", 
    73 => "00111110011101001001101110101110", 
    74 => "10111100000110110011000101111111", 
    75 => "00111100000111101000010110110010", 
    76 => "10111100110100100000010110110111", 
    77 => "00111110001010101010000011011000", 
    78 => "00111101001000000000100101010010", 
    79 => "10111110000001101110101001000100", 
    80 => "10111110001110001100111101111110", 
    81 => "00111101001000010100010011010100", 
    82 => "00111110001001110110010000000000", 
    83 => "10111110011010010000100000111000", 
    84 => "00111101010000001110110110111100", 
    85 => "10111110011000110000111000111101", 
    86 => "10111110000011111110101110001101", 
    87 => "10111101010111000010110111111100", 
    88 => "10111101101111000111100101111010", 
    89 => "10111110010110011001110000000000", 
    90 => "00111011100001011101010011010110", 
    91 => "10111110010100011110101110010101", 
    92 => "00111101000000000100011011101000", 
    93 => "00111110000110100100110000100110", 
    94 => "10111101000100110100111110111110", 
    95 => "00111101110111000000101001110110", 
    96 => "00111101001001110000001100101100", 
    97 => "00111100110111110111010001011111", 
    98 => "00111100000010110000011000001110", 
    99 => "10111110001110111011111101110000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity fc6_weights_fc6_bWhU is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 100;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of fc6_weights_fc6_bWhU is
    component fc6_weights_fc6_bWhU_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    fc6_weights_fc6_bWhU_rom_U :  component fc6_weights_fc6_bWhU_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


