-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fc6 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_0_0_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    input_0_0_0_ce0 : OUT STD_LOGIC;
    input_0_0_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_1_0_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    input_1_0_0_ce0 : OUT STD_LOGIC;
    input_1_0_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_2_0_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    input_2_0_0_ce0 : OUT STD_LOGIC;
    input_2_0_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_3_0_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    input_3_0_0_ce0 : OUT STD_LOGIC;
    input_3_0_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_4_0_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    input_4_0_0_ce0 : OUT STD_LOGIC;
    input_4_0_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_5_0_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    input_5_0_0_ce0 : OUT STD_LOGIC;
    input_5_0_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_0_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    output_0_ce0 : OUT STD_LOGIC;
    output_0_we0 : OUT STD_LOGIC;
    output_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_1_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    output_1_ce0 : OUT STD_LOGIC;
    output_1_we0 : OUT STD_LOGIC;
    output_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of fc6 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (44 downto 0) := "000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (44 downto 0) := "000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (44 downto 0) := "000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (44 downto 0) := "000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (44 downto 0) := "000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (44 downto 0) := "000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (44 downto 0) := "000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (44 downto 0) := "000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (44 downto 0) := "000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (44 downto 0) := "001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (44 downto 0) := "010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (44 downto 0) := "100000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv5_14 : STD_LOGIC_VECTOR (4 downto 0) := "10100";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv7_72 : STD_LOGIC_VECTOR (6 downto 0) := "1110010";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv7_6 : STD_LOGIC_VECTOR (6 downto 0) := "0000110";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal bias_fc6_buffer_0_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal bias_fc6_buffer_0_ce0 : STD_LOGIC;
    signal bias_fc6_buffer_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_fc6_buffer_0_5_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal weights_fc6_buffer_0_5_ce0 : STD_LOGIC;
    signal weights_fc6_buffer_0_5_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_fc6_buffer_0_4_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal weights_fc6_buffer_0_4_ce0 : STD_LOGIC;
    signal weights_fc6_buffer_0_4_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_fc6_buffer_0_3_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal weights_fc6_buffer_0_3_ce0 : STD_LOGIC;
    signal weights_fc6_buffer_0_3_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_fc6_buffer_0_2_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal weights_fc6_buffer_0_2_ce0 : STD_LOGIC;
    signal weights_fc6_buffer_0_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_fc6_buffer_0_1_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal weights_fc6_buffer_0_1_ce0 : STD_LOGIC;
    signal weights_fc6_buffer_0_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_fc6_buffer_0_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal weights_fc6_buffer_0_ce0 : STD_LOGIC;
    signal weights_fc6_buffer_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bias_fc6_buffer_1_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal bias_fc6_buffer_1_ce0 : STD_LOGIC;
    signal bias_fc6_buffer_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_fc6_buffer_1_5_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal weights_fc6_buffer_1_5_ce0 : STD_LOGIC;
    signal weights_fc6_buffer_1_5_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_fc6_buffer_1_4_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal weights_fc6_buffer_1_4_ce0 : STD_LOGIC;
    signal weights_fc6_buffer_1_4_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_fc6_buffer_1_3_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal weights_fc6_buffer_1_3_ce0 : STD_LOGIC;
    signal weights_fc6_buffer_1_3_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_fc6_buffer_1_2_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal weights_fc6_buffer_1_2_ce0 : STD_LOGIC;
    signal weights_fc6_buffer_1_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_fc6_buffer_1_1_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal weights_fc6_buffer_1_1_ce0 : STD_LOGIC;
    signal weights_fc6_buffer_1_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_fc6_buffer_1_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal weights_fc6_buffer_1_ce0 : STD_LOGIC;
    signal weights_fc6_buffer_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_416_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_454 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal grp_fu_421_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_459 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_408_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_465 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal grp_fu_412_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_470 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln202_fu_481_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln202_reg_716 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln208_fu_487_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln208_reg_721 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln202_fu_475_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln210_1_fu_503_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln210_1_reg_727 : STD_LOGIC_VECTOR (7 downto 0);
    signal input_0_0_0_addr_reg_732 : STD_LOGIC_VECTOR (4 downto 0);
    signal input_1_0_0_addr_reg_737 : STD_LOGIC_VECTOR (4 downto 0);
    signal input_2_0_0_addr_reg_742 : STD_LOGIC_VECTOR (4 downto 0);
    signal input_3_0_0_addr_reg_747 : STD_LOGIC_VECTOR (4 downto 0);
    signal input_4_0_0_addr_reg_752 : STD_LOGIC_VECTOR (4 downto 0);
    signal input_5_0_0_addr_reg_757 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln213_fu_507_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln213_reg_762 : STD_LOGIC_VECTOR (0 downto 0);
    signal lshr_ln_fu_519_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal lshr_ln_reg_771 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln203_fu_513_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln210_4_fu_564_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln210_4_reg_776 : STD_LOGIC_VECTOR (63 downto 0);
    signal n_fu_570_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal n_reg_800 : STD_LOGIC_VECTOR (3 downto 0);
    signal c_fu_576_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal weights_fc6_buffer_0_12_reg_810 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal weights_fc6_buffer_1_12_reg_815 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal zext_ln211_fu_582_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln211_reg_826 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal output_0_addr_reg_832 : STD_LOGIC_VECTOR (2 downto 0);
    signal output_1_addr_reg_837 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln208_fu_587_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln208_reg_852 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln208_1_fu_594_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln208_1_reg_857 : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_fc6_buffer_0_13_reg_862 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal weights_fc6_buffer_1_13_reg_867 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal weights_fc6_buffer_0_14_reg_888 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal weights_fc6_buffer_1_14_reg_893 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal weights_fc6_buffer_0_15_reg_914 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal weights_fc6_buffer_1_15_reg_919 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal weights_fc6_buffer_0_16_reg_950 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal weights_fc6_buffer_0_17_reg_955 : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_fc6_buffer_1_16_reg_960 : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_fc6_buffer_1_17_reg_965 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal grp_fu_434_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_4_reg_982 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_439_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_5_reg_987 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal bias_fc6_buffer_0_lo_reg_1002 : STD_LOGIC_VECTOR (31 downto 0);
    signal bias_fc6_buffer_1_lo_reg_1007 : STD_LOGIC_VECTOR (31 downto 0);
    signal biased_0_5_reg_1012 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal biased_112_5_reg_1019 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvars_iv137_reg_374 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal c_0_reg_385 : STD_LOGIC_VECTOR (6 downto 0);
    signal n_0_reg_397 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal zext_ln210_fu_493_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_408_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_408_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal grp_fu_412_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_412_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_416_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_416_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_421_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_421_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal tmp_34_fu_529_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_35_fu_541_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln210_2_fu_537_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln210_3_fu_549_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln210_fu_553_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln210_1_fu_559_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal bitcast_ln212_fu_601_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_604_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln212_fu_614_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln212_1_fu_624_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln212_fu_618_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln212_fu_630_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_444_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln212_fu_636_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln212_fu_642_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln212_1_fu_657_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_31_fu_660_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln212_1_fu_670_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln212_3_fu_680_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln212_2_fu_674_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln212_1_fu_686_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_449_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln212_1_fu_692_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln212_1_fu_698_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (44 downto 0);

    component LeNet_fadd_32ns_3hbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component LeNet_fmul_32ns_3ibs IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component LeNet_fcmp_32ns_3jbC IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component fc6_bias_fc6_buffLf8 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fc6_weights_fc6_bMgi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fc6_weights_fc6_bNgs IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fc6_weights_fc6_bOgC IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fc6_weights_fc6_bPgM IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fc6_weights_fc6_bQgW IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fc6_weights_fc6_bRg6 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fc6_bias_fc6_buffShg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fc6_weights_fc6_bThq IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fc6_weights_fc6_bUhA IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fc6_weights_fc6_bVhK IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fc6_weights_fc6_bWhU IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fc6_weights_fc6_bXh4 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fc6_weights_fc6_bYie IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    bias_fc6_buffer_0_U : component fc6_bias_fc6_buffLf8
    generic map (
        DataWidth => 32,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => bias_fc6_buffer_0_address0,
        ce0 => bias_fc6_buffer_0_ce0,
        q0 => bias_fc6_buffer_0_q0);

    weights_fc6_buffer_0_5_U : component fc6_weights_fc6_bMgi
    generic map (
        DataWidth => 32,
        AddressRange => 100,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => weights_fc6_buffer_0_5_address0,
        ce0 => weights_fc6_buffer_0_5_ce0,
        q0 => weights_fc6_buffer_0_5_q0);

    weights_fc6_buffer_0_4_U : component fc6_weights_fc6_bNgs
    generic map (
        DataWidth => 32,
        AddressRange => 100,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => weights_fc6_buffer_0_4_address0,
        ce0 => weights_fc6_buffer_0_4_ce0,
        q0 => weights_fc6_buffer_0_4_q0);

    weights_fc6_buffer_0_3_U : component fc6_weights_fc6_bOgC
    generic map (
        DataWidth => 32,
        AddressRange => 100,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => weights_fc6_buffer_0_3_address0,
        ce0 => weights_fc6_buffer_0_3_ce0,
        q0 => weights_fc6_buffer_0_3_q0);

    weights_fc6_buffer_0_2_U : component fc6_weights_fc6_bPgM
    generic map (
        DataWidth => 32,
        AddressRange => 100,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => weights_fc6_buffer_0_2_address0,
        ce0 => weights_fc6_buffer_0_2_ce0,
        q0 => weights_fc6_buffer_0_2_q0);

    weights_fc6_buffer_0_1_U : component fc6_weights_fc6_bQgW
    generic map (
        DataWidth => 32,
        AddressRange => 100,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => weights_fc6_buffer_0_1_address0,
        ce0 => weights_fc6_buffer_0_1_ce0,
        q0 => weights_fc6_buffer_0_1_q0);

    weights_fc6_buffer_0_U : component fc6_weights_fc6_bRg6
    generic map (
        DataWidth => 32,
        AddressRange => 100,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => weights_fc6_buffer_0_address0,
        ce0 => weights_fc6_buffer_0_ce0,
        q0 => weights_fc6_buffer_0_q0);

    bias_fc6_buffer_1_U : component fc6_bias_fc6_buffShg
    generic map (
        DataWidth => 32,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => bias_fc6_buffer_1_address0,
        ce0 => bias_fc6_buffer_1_ce0,
        q0 => bias_fc6_buffer_1_q0);

    weights_fc6_buffer_1_5_U : component fc6_weights_fc6_bThq
    generic map (
        DataWidth => 32,
        AddressRange => 100,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => weights_fc6_buffer_1_5_address0,
        ce0 => weights_fc6_buffer_1_5_ce0,
        q0 => weights_fc6_buffer_1_5_q0);

    weights_fc6_buffer_1_4_U : component fc6_weights_fc6_bUhA
    generic map (
        DataWidth => 32,
        AddressRange => 100,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => weights_fc6_buffer_1_4_address0,
        ce0 => weights_fc6_buffer_1_4_ce0,
        q0 => weights_fc6_buffer_1_4_q0);

    weights_fc6_buffer_1_3_U : component fc6_weights_fc6_bVhK
    generic map (
        DataWidth => 32,
        AddressRange => 100,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => weights_fc6_buffer_1_3_address0,
        ce0 => weights_fc6_buffer_1_3_ce0,
        q0 => weights_fc6_buffer_1_3_q0);

    weights_fc6_buffer_1_2_U : component fc6_weights_fc6_bWhU
    generic map (
        DataWidth => 32,
        AddressRange => 100,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => weights_fc6_buffer_1_2_address0,
        ce0 => weights_fc6_buffer_1_2_ce0,
        q0 => weights_fc6_buffer_1_2_q0);

    weights_fc6_buffer_1_1_U : component fc6_weights_fc6_bXh4
    generic map (
        DataWidth => 32,
        AddressRange => 100,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => weights_fc6_buffer_1_1_address0,
        ce0 => weights_fc6_buffer_1_1_ce0,
        q0 => weights_fc6_buffer_1_1_q0);

    weights_fc6_buffer_1_U : component fc6_weights_fc6_bYie
    generic map (
        DataWidth => 32,
        AddressRange => 100,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => weights_fc6_buffer_1_address0,
        ce0 => weights_fc6_buffer_1_ce0,
        q0 => weights_fc6_buffer_1_q0);

    LeNet_fadd_32ns_3hbi_U173 : component LeNet_fadd_32ns_3hbi
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_408_p0,
        din1 => grp_fu_408_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_408_p2);

    LeNet_fadd_32ns_3hbi_U174 : component LeNet_fadd_32ns_3hbi
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_412_p0,
        din1 => grp_fu_412_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_412_p2);

    LeNet_fmul_32ns_3ibs_U175 : component LeNet_fmul_32ns_3ibs
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_416_p0,
        din1 => grp_fu_416_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_416_p2);

    LeNet_fmul_32ns_3ibs_U176 : component LeNet_fmul_32ns_3ibs
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_421_p0,
        din1 => grp_fu_421_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_421_p2);

    LeNet_fmul_32ns_3ibs_U177 : component LeNet_fmul_32ns_3ibs
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => weights_fc6_buffer_1_16_reg_960,
        din1 => input_4_0_0_q0,
        ce => ap_const_logic_1,
        dout => grp_fu_434_p2);

    LeNet_fmul_32ns_3ibs_U178 : component LeNet_fmul_32ns_3ibs
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => weights_fc6_buffer_1_17_reg_965,
        din1 => input_5_0_0_q0,
        ce => ap_const_logic_1,
        dout => grp_fu_439_p2);

    LeNet_fcmp_32ns_3jbC_U179 : component LeNet_fcmp_32ns_3jbC
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => biased_0_5_reg_1012,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_444_p2);

    LeNet_fcmp_32ns_3jbC_U180 : component LeNet_fcmp_32ns_3jbC
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => biased_112_5_reg_1019,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_449_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((icmp_ln202_fu_475_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    c_0_reg_385_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                c_0_reg_385 <= ap_const_lv7_0;
            elsif (((icmp_ln203_fu_513_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                c_0_reg_385 <= c_fu_576_p2;
            end if; 
        end if;
    end process;

    indvars_iv137_reg_374_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvars_iv137_reg_374 <= ap_const_lv5_0;
            elsif (((icmp_ln203_fu_513_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                indvars_iv137_reg_374 <= add_ln202_reg_716;
            end if; 
        end if;
    end process;

    n_0_reg_397_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln202_fu_475_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                n_0_reg_397 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
                n_0_reg_397 <= n_reg_800;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln202_reg_716 <= add_ln202_fu_481_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln213_reg_762 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state38))) then
                bias_fc6_buffer_0_lo_reg_1002 <= bias_fc6_buffer_0_q0;
                bias_fc6_buffer_1_lo_reg_1007 <= bias_fc6_buffer_1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln213_reg_762 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state43))) then
                biased_0_5_reg_1012 <= grp_fu_408_p2;
                biased_112_5_reg_1019 <= grp_fu_412_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln202_fu_475_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                icmp_ln208_reg_721 <= icmp_ln208_fu_487_p2;
                icmp_ln213_reg_762 <= icmp_ln213_fu_507_p2;
                input_0_0_0_addr_reg_732 <= zext_ln210_fu_493_p1(5 - 1 downto 0);
                input_1_0_0_addr_reg_737 <= zext_ln210_fu_493_p1(5 - 1 downto 0);
                input_2_0_0_addr_reg_742 <= zext_ln210_fu_493_p1(5 - 1 downto 0);
                input_3_0_0_addr_reg_747 <= zext_ln210_fu_493_p1(5 - 1 downto 0);
                input_4_0_0_addr_reg_752 <= zext_ln210_fu_493_p1(5 - 1 downto 0);
                input_5_0_0_addr_reg_757 <= zext_ln210_fu_493_p1(5 - 1 downto 0);
                    zext_ln210_1_reg_727(4 downto 0) <= zext_ln210_1_fu_503_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln203_fu_513_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                lshr_ln_reg_771 <= n_0_reg_397(3 downto 1);
                n_reg_800 <= n_fu_570_p2;
                    zext_ln210_4_reg_776(7 downto 0) <= zext_ln210_4_fu_564_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                output_0_addr_reg_832 <= zext_ln211_fu_582_p1(3 - 1 downto 0);
                output_1_addr_reg_837 <= zext_ln211_fu_582_p1(3 - 1 downto 0);
                    zext_ln211_reg_826(2 downto 0) <= zext_ln211_fu_582_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state8))) then
                reg_454 <= grp_fu_416_p2;
                reg_459 <= grp_fu_421_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state13))) then
                reg_465 <= grp_fu_408_p2;
                reg_470 <= grp_fu_412_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                select_ln208_1_reg_857 <= select_ln208_1_fu_594_p3;
                select_ln208_reg_852 <= select_ln208_fu_587_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then
                tmp_1_4_reg_982 <= grp_fu_434_p2;
                tmp_1_5_reg_987 <= grp_fu_439_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                weights_fc6_buffer_0_12_reg_810 <= weights_fc6_buffer_0_5_q0;
                weights_fc6_buffer_1_12_reg_815 <= weights_fc6_buffer_1_5_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                weights_fc6_buffer_0_13_reg_862 <= weights_fc6_buffer_0_4_q0;
                weights_fc6_buffer_1_13_reg_867 <= weights_fc6_buffer_1_4_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                weights_fc6_buffer_0_14_reg_888 <= weights_fc6_buffer_0_3_q0;
                weights_fc6_buffer_1_14_reg_893 <= weights_fc6_buffer_1_3_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                weights_fc6_buffer_0_15_reg_914 <= weights_fc6_buffer_0_2_q0;
                weights_fc6_buffer_1_15_reg_919 <= weights_fc6_buffer_1_2_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                weights_fc6_buffer_0_16_reg_950 <= weights_fc6_buffer_0_1_q0;
                weights_fc6_buffer_0_17_reg_955 <= weights_fc6_buffer_0_q0;
                weights_fc6_buffer_1_16_reg_960 <= weights_fc6_buffer_1_1_q0;
                weights_fc6_buffer_1_17_reg_965 <= weights_fc6_buffer_1_q0;
            end if;
        end if;
    end process;
    zext_ln210_1_reg_727(7 downto 5) <= "000";
    zext_ln210_4_reg_776(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln211_reg_826(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln202_fu_475_p2, ap_CS_fsm_state3, icmp_ln203_fu_513_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln202_fu_475_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln203_fu_513_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln202_fu_481_p2 <= std_logic_vector(unsigned(indvars_iv137_reg_374) + unsigned(ap_const_lv5_1));
    add_ln210_1_fu_559_p2 <= std_logic_vector(unsigned(zext_ln210_1_reg_727) + unsigned(add_ln210_fu_553_p2));
    add_ln210_fu_553_p2 <= std_logic_vector(unsigned(zext_ln210_2_fu_537_p1) + unsigned(zext_ln210_3_fu_549_p1));
    and_ln212_1_fu_692_p2 <= (or_ln212_1_fu_686_p2 and grp_fu_449_p2);
    and_ln212_fu_636_p2 <= (or_ln212_fu_630_p2 and grp_fu_444_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state2, icmp_ln202_fu_475_p2)
    begin
        if (((icmp_ln202_fu_475_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln202_fu_475_p2)
    begin
        if (((icmp_ln202_fu_475_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bias_fc6_buffer_0_address0 <= zext_ln211_reg_826(3 - 1 downto 0);

    bias_fc6_buffer_0_ce0_assign_proc : process(ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            bias_fc6_buffer_0_ce0 <= ap_const_logic_1;
        else 
            bias_fc6_buffer_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bias_fc6_buffer_1_address0 <= zext_ln211_reg_826(3 - 1 downto 0);

    bias_fc6_buffer_1_ce0_assign_proc : process(ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            bias_fc6_buffer_1_ce0 <= ap_const_logic_1;
        else 
            bias_fc6_buffer_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln212_1_fu_657_p1 <= biased_112_5_reg_1019;
    bitcast_ln212_fu_601_p1 <= biased_0_5_reg_1012;
    c_fu_576_p2 <= std_logic_vector(unsigned(c_0_reg_385) + unsigned(ap_const_lv7_6));

    grp_fu_408_p0_assign_proc : process(reg_465, select_ln208_reg_852, ap_CS_fsm_state9, ap_CS_fsm_state14, ap_CS_fsm_state19, ap_CS_fsm_state24, ap_CS_fsm_state29, ap_CS_fsm_state34, ap_CS_fsm_state39)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            grp_fu_408_p0 <= reg_465;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_408_p0 <= select_ln208_reg_852;
        else 
            grp_fu_408_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_408_p1_assign_proc : process(reg_454, reg_459, ap_CS_fsm_state9, ap_CS_fsm_state14, ap_CS_fsm_state19, ap_CS_fsm_state24, bias_fc6_buffer_0_lo_reg_1002, ap_CS_fsm_state29, ap_CS_fsm_state34, ap_CS_fsm_state39)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            grp_fu_408_p1 <= bias_fc6_buffer_0_lo_reg_1002;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            grp_fu_408_p1 <= reg_459;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            grp_fu_408_p1 <= reg_454;
        else 
            grp_fu_408_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_412_p0_assign_proc : process(reg_470, select_ln208_1_reg_857, ap_CS_fsm_state9, ap_CS_fsm_state14, ap_CS_fsm_state19, ap_CS_fsm_state24, ap_CS_fsm_state29, ap_CS_fsm_state34, ap_CS_fsm_state39)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            grp_fu_412_p0 <= reg_470;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_412_p0 <= select_ln208_1_reg_857;
        else 
            grp_fu_412_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_412_p1_assign_proc : process(reg_459, ap_CS_fsm_state9, ap_CS_fsm_state14, ap_CS_fsm_state19, ap_CS_fsm_state24, tmp_1_4_reg_982, tmp_1_5_reg_987, bias_fc6_buffer_1_lo_reg_1007, ap_CS_fsm_state29, ap_CS_fsm_state34, ap_CS_fsm_state39)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            grp_fu_412_p1 <= bias_fc6_buffer_1_lo_reg_1007;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            grp_fu_412_p1 <= tmp_1_5_reg_987;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            grp_fu_412_p1 <= tmp_1_4_reg_982;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            grp_fu_412_p1 <= reg_459;
        else 
            grp_fu_412_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_416_p0_assign_proc : process(weights_fc6_buffer_0_12_reg_810, ap_CS_fsm_state5, weights_fc6_buffer_0_13_reg_862, ap_CS_fsm_state10, weights_fc6_buffer_0_14_reg_888, ap_CS_fsm_state15, weights_fc6_buffer_0_15_reg_914, ap_CS_fsm_state20, weights_fc6_buffer_0_16_reg_950, ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            grp_fu_416_p0 <= weights_fc6_buffer_0_16_reg_950;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_416_p0 <= weights_fc6_buffer_0_15_reg_914;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_416_p0 <= weights_fc6_buffer_0_14_reg_888;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_416_p0 <= weights_fc6_buffer_0_13_reg_862;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_416_p0 <= weights_fc6_buffer_0_12_reg_810;
        else 
            grp_fu_416_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_416_p1_assign_proc : process(input_0_0_0_q0, input_1_0_0_q0, input_2_0_0_q0, input_3_0_0_q0, input_4_0_0_q0, ap_CS_fsm_state5, ap_CS_fsm_state10, ap_CS_fsm_state15, ap_CS_fsm_state20, ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            grp_fu_416_p1 <= input_4_0_0_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_416_p1 <= input_3_0_0_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_416_p1 <= input_2_0_0_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_416_p1 <= input_1_0_0_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_416_p1 <= input_0_0_0_q0;
        else 
            grp_fu_416_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_421_p0_assign_proc : process(weights_fc6_buffer_1_12_reg_815, ap_CS_fsm_state5, weights_fc6_buffer_1_13_reg_867, ap_CS_fsm_state10, weights_fc6_buffer_1_14_reg_893, ap_CS_fsm_state15, weights_fc6_buffer_1_15_reg_919, ap_CS_fsm_state20, weights_fc6_buffer_0_17_reg_955, ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            grp_fu_421_p0 <= weights_fc6_buffer_0_17_reg_955;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_421_p0 <= weights_fc6_buffer_1_15_reg_919;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_421_p0 <= weights_fc6_buffer_1_14_reg_893;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_421_p0 <= weights_fc6_buffer_1_13_reg_867;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_421_p0 <= weights_fc6_buffer_1_12_reg_815;
        else 
            grp_fu_421_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_421_p1_assign_proc : process(input_0_0_0_q0, input_1_0_0_q0, input_2_0_0_q0, input_3_0_0_q0, input_5_0_0_q0, ap_CS_fsm_state5, ap_CS_fsm_state10, ap_CS_fsm_state15, ap_CS_fsm_state20, ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            grp_fu_421_p1 <= input_5_0_0_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_421_p1 <= input_3_0_0_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_421_p1 <= input_2_0_0_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_421_p1 <= input_1_0_0_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_421_p1 <= input_0_0_0_q0;
        else 
            grp_fu_421_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln202_fu_475_p2 <= "1" when (indvars_iv137_reg_374 = ap_const_lv5_14) else "0";
    icmp_ln203_fu_513_p2 <= "1" when (unsigned(n_0_reg_397) < unsigned(ap_const_lv4_A)) else "0";
    icmp_ln208_fu_487_p2 <= "1" when (c_0_reg_385 = ap_const_lv7_0) else "0";
    icmp_ln212_1_fu_624_p2 <= "1" when (trunc_ln212_fu_614_p1 = ap_const_lv23_0) else "0";
    icmp_ln212_2_fu_674_p2 <= "0" when (tmp_31_fu_660_p4 = ap_const_lv8_FF) else "1";
    icmp_ln212_3_fu_680_p2 <= "1" when (trunc_ln212_1_fu_670_p1 = ap_const_lv23_0) else "0";
    icmp_ln212_fu_618_p2 <= "0" when (tmp_s_fu_604_p4 = ap_const_lv8_FF) else "1";
    icmp_ln213_fu_507_p2 <= "1" when (c_0_reg_385 = ap_const_lv7_72) else "0";
    input_0_0_0_address0 <= input_0_0_0_addr_reg_732;

    input_0_0_0_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            input_0_0_0_ce0 <= ap_const_logic_1;
        else 
            input_0_0_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_1_0_0_address0 <= input_1_0_0_addr_reg_737;

    input_1_0_0_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            input_1_0_0_ce0 <= ap_const_logic_1;
        else 
            input_1_0_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_2_0_0_address0 <= input_2_0_0_addr_reg_742;

    input_2_0_0_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            input_2_0_0_ce0 <= ap_const_logic_1;
        else 
            input_2_0_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_3_0_0_address0 <= input_3_0_0_addr_reg_747;

    input_3_0_0_ce0_assign_proc : process(ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            input_3_0_0_ce0 <= ap_const_logic_1;
        else 
            input_3_0_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_4_0_0_address0 <= input_4_0_0_addr_reg_752;

    input_4_0_0_ce0_assign_proc : process(ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            input_4_0_0_ce0 <= ap_const_logic_1;
        else 
            input_4_0_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_5_0_0_address0 <= input_5_0_0_addr_reg_757;

    input_5_0_0_ce0_assign_proc : process(ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            input_5_0_0_ce0 <= ap_const_logic_1;
        else 
            input_5_0_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    lshr_ln_fu_519_p4 <= n_0_reg_397(3 downto 1);
    n_fu_570_p2 <= std_logic_vector(unsigned(ap_const_lv4_2) + unsigned(n_0_reg_397));
    or_ln212_1_fu_686_p2 <= (icmp_ln212_3_fu_680_p2 or icmp_ln212_2_fu_674_p2);
    or_ln212_fu_630_p2 <= (icmp_ln212_fu_618_p2 or icmp_ln212_1_fu_624_p2);

    output_0_address0_assign_proc : process(zext_ln211_fu_582_p1, ap_CS_fsm_state7, output_0_addr_reg_832, ap_CS_fsm_state45)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            output_0_address0 <= output_0_addr_reg_832;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            output_0_address0 <= zext_ln211_fu_582_p1(3 - 1 downto 0);
        else 
            output_0_address0 <= "XXX";
        end if; 
    end process;


    output_0_ce0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state45)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            output_0_ce0 <= ap_const_logic_1;
        else 
            output_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_0_d0 <= 
        select_ln212_fu_642_p3 when (icmp_ln213_reg_762(0) = '1') else 
        reg_465;

    output_0_we0_assign_proc : process(ap_CS_fsm_state45)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            output_0_we0 <= ap_const_logic_1;
        else 
            output_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    output_1_address0_assign_proc : process(zext_ln211_fu_582_p1, ap_CS_fsm_state7, output_1_addr_reg_837, ap_CS_fsm_state45)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            output_1_address0 <= output_1_addr_reg_837;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            output_1_address0 <= zext_ln211_fu_582_p1(3 - 1 downto 0);
        else 
            output_1_address0 <= "XXX";
        end if; 
    end process;


    output_1_ce0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state45)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            output_1_ce0 <= ap_const_logic_1;
        else 
            output_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_1_d0 <= 
        select_ln212_1_fu_698_p3 when (icmp_ln213_reg_762(0) = '1') else 
        reg_470;

    output_1_we0_assign_proc : process(ap_CS_fsm_state45)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            output_1_we0 <= ap_const_logic_1;
        else 
            output_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln208_1_fu_594_p3 <= 
        ap_const_lv32_0 when (icmp_ln208_reg_721(0) = '1') else 
        output_1_q0;
    select_ln208_fu_587_p3 <= 
        ap_const_lv32_0 when (icmp_ln208_reg_721(0) = '1') else 
        output_0_q0;
    select_ln212_1_fu_698_p3 <= 
        biased_112_5_reg_1019 when (and_ln212_1_fu_692_p2(0) = '1') else 
        ap_const_lv32_0;
    select_ln212_fu_642_p3 <= 
        biased_0_5_reg_1012 when (and_ln212_fu_636_p2(0) = '1') else 
        ap_const_lv32_0;
    tmp_31_fu_660_p4 <= bitcast_ln212_1_fu_657_p1(30 downto 23);
    tmp_34_fu_529_p3 <= (lshr_ln_fu_519_p4 & ap_const_lv4_0);
    tmp_35_fu_541_p3 <= (lshr_ln_fu_519_p4 & ap_const_lv2_0);
    tmp_s_fu_604_p4 <= bitcast_ln212_fu_601_p1(30 downto 23);
    trunc_ln212_1_fu_670_p1 <= bitcast_ln212_1_fu_657_p1(23 - 1 downto 0);
    trunc_ln212_fu_614_p1 <= bitcast_ln212_fu_601_p1(23 - 1 downto 0);
    weights_fc6_buffer_0_1_address0 <= zext_ln210_4_reg_776(7 - 1 downto 0);

    weights_fc6_buffer_0_1_ce0_assign_proc : process(ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            weights_fc6_buffer_0_1_ce0 <= ap_const_logic_1;
        else 
            weights_fc6_buffer_0_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weights_fc6_buffer_0_2_address0 <= zext_ln210_4_reg_776(7 - 1 downto 0);

    weights_fc6_buffer_0_2_ce0_assign_proc : process(ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            weights_fc6_buffer_0_2_ce0 <= ap_const_logic_1;
        else 
            weights_fc6_buffer_0_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weights_fc6_buffer_0_3_address0 <= zext_ln210_4_reg_776(7 - 1 downto 0);

    weights_fc6_buffer_0_3_ce0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            weights_fc6_buffer_0_3_ce0 <= ap_const_logic_1;
        else 
            weights_fc6_buffer_0_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weights_fc6_buffer_0_4_address0 <= zext_ln210_4_reg_776(7 - 1 downto 0);

    weights_fc6_buffer_0_4_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            weights_fc6_buffer_0_4_ce0 <= ap_const_logic_1;
        else 
            weights_fc6_buffer_0_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weights_fc6_buffer_0_5_address0 <= zext_ln210_4_fu_564_p1(7 - 1 downto 0);

    weights_fc6_buffer_0_5_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            weights_fc6_buffer_0_5_ce0 <= ap_const_logic_1;
        else 
            weights_fc6_buffer_0_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weights_fc6_buffer_0_address0 <= zext_ln210_4_reg_776(7 - 1 downto 0);

    weights_fc6_buffer_0_ce0_assign_proc : process(ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            weights_fc6_buffer_0_ce0 <= ap_const_logic_1;
        else 
            weights_fc6_buffer_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weights_fc6_buffer_1_1_address0 <= zext_ln210_4_reg_776(7 - 1 downto 0);

    weights_fc6_buffer_1_1_ce0_assign_proc : process(ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            weights_fc6_buffer_1_1_ce0 <= ap_const_logic_1;
        else 
            weights_fc6_buffer_1_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weights_fc6_buffer_1_2_address0 <= zext_ln210_4_reg_776(7 - 1 downto 0);

    weights_fc6_buffer_1_2_ce0_assign_proc : process(ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            weights_fc6_buffer_1_2_ce0 <= ap_const_logic_1;
        else 
            weights_fc6_buffer_1_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weights_fc6_buffer_1_3_address0 <= zext_ln210_4_reg_776(7 - 1 downto 0);

    weights_fc6_buffer_1_3_ce0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            weights_fc6_buffer_1_3_ce0 <= ap_const_logic_1;
        else 
            weights_fc6_buffer_1_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weights_fc6_buffer_1_4_address0 <= zext_ln210_4_reg_776(7 - 1 downto 0);

    weights_fc6_buffer_1_4_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            weights_fc6_buffer_1_4_ce0 <= ap_const_logic_1;
        else 
            weights_fc6_buffer_1_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weights_fc6_buffer_1_5_address0 <= zext_ln210_4_fu_564_p1(7 - 1 downto 0);

    weights_fc6_buffer_1_5_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            weights_fc6_buffer_1_5_ce0 <= ap_const_logic_1;
        else 
            weights_fc6_buffer_1_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weights_fc6_buffer_1_address0 <= zext_ln210_4_reg_776(7 - 1 downto 0);

    weights_fc6_buffer_1_ce0_assign_proc : process(ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            weights_fc6_buffer_1_ce0 <= ap_const_logic_1;
        else 
            weights_fc6_buffer_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln210_1_fu_503_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indvars_iv137_reg_374),8));
    zext_ln210_2_fu_537_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_34_fu_529_p3),8));
    zext_ln210_3_fu_549_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_35_fu_541_p3),8));
    zext_ln210_4_fu_564_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln210_1_fu_559_p2),64));
    zext_ln210_fu_493_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indvars_iv137_reg_374),64));
    zext_ln211_fu_582_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_reg_771),64));
end behav;
