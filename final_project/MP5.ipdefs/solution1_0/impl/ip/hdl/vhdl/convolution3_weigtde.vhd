-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity convolution3_weigtde_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 200
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of convolution3_weigtde_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111100101010001110000111001100", 
    1 => "10111100001110000110100110001001", 
    2 => "00111101101011001000001010100101", 
    3 => "10111101100011100101111101101111", 
    4 => "10111100110100011110101010001001", 
    5 => "10111110001110001110011101110101", 
    6 => "00111101000000011100001010001011", 
    7 => "10111101101101000110010101100001", 
    8 => "10111101110000111000111101000010", 
    9 => "10111011001101100010100011000110", 
    10 => "00111101100001100100011110010100", 
    11 => "00111100101101011101100010001010", 
    12 => "00111101011001000000001101010101", 
    13 => "00111100011110101010111000000111", 
    14 => "10111100000101010000010010111111", 
    15 => "10111101000111000100010101111011", 
    16 => "10111101100101100011100100011011", 
    17 => "00111100101101010101101000110101", 
    18 => "10111101101001101101000010010001", 
    19 => "00111100100010000101101101001001", 
    20 => "10111101100101110110111101000011", 
    21 => "10111101110101110001110001100111", 
    22 => "00111011000000001100011101100110", 
    23 => "00111100001011100110000011011100", 
    24 => "10111101011100110100010001100011", 
    25 => "10111101000100010001100001011100", 
    26 => "10111101011000111111111110010111", 
    27 => "10111101110000010000101001001011", 
    28 => "10111101110010101001101000111100", 
    29 => "10111101110101101000010011001000", 
    30 => "00111011010001100101101001000010", 
    31 => "10111101101000000110001111010000", 
    32 => "10111011110010111001000110111001", 
    33 => "10111110000110111010101010100011", 
    34 => "10111101100001101010100101000111", 
    35 => "10111101000110011011110010000010", 
    36 => "10111101100101000011000110001111", 
    37 => "00111000100000100111110000011100", 
    38 => "10111100100010110001101101110111", 
    39 => "10111101110010110010010111000101", 
    40 => "10111101010110101011001000110000", 
    41 => "10111101011000100000001111000001", 
    42 => "00111101000110110100001000001110", 
    43 => "00111101010111110010011001100100", 
    44 => "10111100110011010010111111101001", 
    45 => "00111011001000111101000111010111", 
    46 => "10111101010111110011001010001000", 
    47 => "00111101110010010000010110111011", 
    48 => "00111100001111000101101111100110", 
    49 => "00111101110100100011100011100010", 
    50 => "00111101111001101011010101000110", 
    51 => "10111100000101110101011111110110", 
    52 => "10111100000101011100010101101111", 
    53 => "00111100110110100101110100101001", 
    54 => "10111100101101010011101101111100", 
    55 => "10111101101000101111001111100010", 
    56 => "10111101101011110101110000110110", 
    57 => "00111101011110001110111000111110", 
    58 => "00111101100000000110101011000000", 
    59 => "10111101101101011100000100111100", 
    60 => "00111100101110010001110111011110", 
    61 => "10111101000001110000101110000101", 
    62 => "10111101001000100111000010000000", 
    63 => "10111101101000010100101100010100", 
    64 => "00111100100010100101001001000100", 
    65 => "00111101001110111010000011100000", 
    66 => "10111101111100101010100001100110", 
    67 => "10111101100010110000001000101110", 
    68 => "00111101010001000110010011111010", 
    69 => "10111101010111001010100011010000", 
    70 => "10111110000010100101001010000010", 
    71 => "10111101000110010101001000100001", 
    72 => "10111101110001100000011010001110", 
    73 => "00111101010100111010111011111001", 
    74 => "00111101000000010011001101111111", 
    75 => "10111110000110100001001011011000", 
    76 => "00111011110001110010101011110111", 
    77 => "10111101010001111110111000101110", 
    78 => "10111101111100011000111011011010", 
    79 => "10111101100001110000010010111101", 
    80 => "00111101100001011100101111100110", 
    81 => "00111101110001011101000101011111", 
    82 => "10111101111000110111000001101000", 
    83 => "10111101011100110100110011001001", 
    84 => "10111101110100010010011001110011", 
    85 => "00111101001100100001101100010000", 
    86 => "10111101100110000110001010000010", 
    87 => "00111101011001011101110100000111", 
    88 => "10111101011101011100111000110000", 
    89 => "10111101010100011011000100010011", 
    90 => "10111101111010010000101100111100", 
    91 => "10111101100110110010011100011100", 
    92 => "00111010011000100110011100111110", 
    93 => "10111101100101001011011101101110", 
    94 => "10111101110101110001010000100111", 
    95 => "10111110000010011101101111110111", 
    96 => "10111100001010011100001000010001", 
    97 => "10111101011111001001001101011111", 
    98 => "00111100010000101111100111110000", 
    99 => "00111101001101010010110011110110", 
    100 => "10111101101001101011010100110011", 
    101 => "10111101100010010101101110010010", 
    102 => "00111010100110100101100101011101", 
    103 => "10111101000111111101110001000110", 
    104 => "10111101100011000011001100010110", 
    105 => "10111101100011001010101110011011", 
    106 => "00111101100001101111110001010001", 
    107 => "00111101100000110101110010010100", 
    108 => "10111101011100001110011001111101", 
    109 => "10111101101010010011001100100001", 
    110 => "10111101100100110000110111101111", 
    111 => "00111101100110011010010100001110", 
    112 => "10111101100000111000101111101010", 
    113 => "10111100111101001011001011110101", 
    114 => "10111101011110010101010000000100", 
    115 => "00111101010011110111110000010100", 
    116 => "00111100011100010100011110100001", 
    117 => "00111011111011110100100110001111", 
    118 => "10111101011101111100110100100001", 
    119 => "00111101001111110101101110000011", 
    120 => "10111101011110101000010010011001", 
    121 => "10111101011111101000100111101110", 
    122 => "10111101111111111101100111010000", 
    123 => "00111011100111001111011010011011", 
    124 => "10111101001111000011100101010001", 
    125 => "00111101111110101100110110010101", 
    126 => "00111110001100001101011110111100", 
    127 => "10111101110010000101011010100011", 
    128 => "10111110000011010101101001001111", 
    129 => "10111110010011011110010111101100", 
    130 => "10111101011000110101110110100000", 
    131 => "00111110100011010010110101011010", 
    132 => "00111101010100001111011100011001", 
    133 => "00111101101010100010111011011001", 
    134 => "10111101000100000011101000101111", 
    135 => "10111110010000111010100010110011", 
    136 => "00111101000110111010100001010010", 
    137 => "10111110000101001011111001001001", 
    138 => "10111110100000000111010101010110", 
    139 => "10111101010010100000111110110001", 
    140 => "00111101101110110100100001110110", 
    141 => "10111100110010111111001100111000", 
    142 => "10111100001000010110001011011100", 
    143 => "10111110010001001110100101010110", 
    144 => "10111101101101110100101101100011", 
    145 => "00111110001001001001011111110001", 
    146 => "10111101101011000011110011111010", 
    147 => "00111101100100101110011101000000", 
    148 => "10111100100101000001011000010010", 
    149 => "10111110010011111110011110101011", 
    150 => "10111101101000000111000011101001", 
    151 => "10111110100100000010011000000110", 
    152 => "00111101110000111101111111010000", 
    153 => "00111101011011001010001010000011", 
    154 => "10111110011011101110011100110010", 
    155 => "10111110110000101011001001111001", 
    156 => "10111110101011101000010100101000", 
    157 => "10111101100010011100111101000011", 
    158 => "10111110010100101000101001001110", 
    159 => "10111101100101100110011110010100", 
    160 => "10111110011001011100110100111101", 
    161 => "10111101001011011000011101101101", 
    162 => "10111110100101111001111010110110", 
    163 => "10111110101010010010000101011010", 
    164 => "10111110100100001101101101100001", 
    165 => "10111110011100001111011110000010", 
    166 => "10111110100000000110100011110101", 
    167 => "10111110101010100100100101000111", 
    168 => "10111110101010010010010110011010", 
    169 => "10111110000110001101000010110011", 
    170 => "10111111000001111000000000011010", 
    171 => "10111110111000000111011011111110", 
    172 => "10111110100100000010001100000111", 
    173 => "10111101100000111000010111101011", 
    174 => "00111101100001011001101110100000", 
    175 => "10111101110010011110000100000111", 
    176 => "10111101110110110101001100001010", 
    177 => "00111001001101001010101101101110", 
    178 => "10111110001000100111100100011010", 
    179 => "00111100011111000100100110101000", 
    180 => "00111100111001100011000010011100", 
    181 => "10111011101100001101011100100011", 
    182 => "10111100100100110100111100110010", 
    183 => "10111110000000111001000010001111", 
    184 => "00111100101110001011100101101111", 
    185 => "00111101100100000100010011100010", 
    186 => "00111101101101111111000011000000", 
    187 => "00111101101111110111101000001010", 
    188 => "10111101100101100000111111010100", 
    189 => "10111110000100111011100111100000", 
    190 => "10111101110100001100111010011110", 
    191 => "10111101101010001110100101110011", 
    192 => "10111100000000110111111101111100", 
    193 => "10111101101011001011100011100001", 
    194 => "00111100010100001001011100100111", 
    195 => "10111100010110000011100100110010", 
    196 => "10111100101011111001001101010001", 
    197 => "10111101101001101101110101110110", 
    198 => "10111011001011110101010100011000", 
    199 => "00111100011100111110110100111000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity convolution3_weigtde is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 200;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of convolution3_weigtde is
    component convolution3_weigtde_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    convolution3_weigtde_rom_U :  component convolution3_weigtde_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


