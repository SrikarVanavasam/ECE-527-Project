-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity fc6_weights_fc6_bUhA_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 100
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of fc6_weights_fc6_bUhA_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101011001001111011010001111", 
    1 => "00111110010011011101010101010001", 
    2 => "10111110000011000110110011000001", 
    3 => "10111101110000100111010100011111", 
    4 => "00111110000001101000011000110001", 
    5 => "00111101101111010001101011010000", 
    6 => "10111011111010100001010001011011", 
    7 => "00111101100100000100100111000000", 
    8 => "10111101101100011010111011011000", 
    9 => "00111101001000011100011110111110", 
    10 => "00111101111000110101100001111110", 
    11 => "00111101110111101110111111111010", 
    12 => "10111011101100011000111110110000", 
    13 => "10111100010010010100110011011011", 
    14 => "00111110010101111111110100001001", 
    15 => "10111110001100001000100010101111", 
    16 => "10111101000100000110011011100011", 
    17 => "10111101000101001010010111100010", 
    18 => "10111101010001011110100100101110", 
    19 => "10111101111100111101100110010111", 
    20 => "10111101001001110001010000101001", 
    21 => "10111110001011001101001010111010", 
    22 => "00111101111001110011010000101000", 
    23 => "00111110001001110000110100110101", 
    24 => "10111101111111010010000000011000", 
    25 => "10111010000011111101011101001110", 
    26 => "10111110000001001010011111101000", 
    27 => "10111110000010100100000010101111", 
    28 => "10111110000111111001110011110110", 
    29 => "10111111000000101000100011011110", 
    30 => "00111101011011110001000001111111", 
    31 => "00111110010010100000001101110110", 
    32 => "10111110000000010010110000101110", 
    33 => "00111110101100011011101111010110", 
    34 => "00111101100011110100111100111000", 
    35 => "00111101000000011011011110110011", 
    36 => "10111101010000100010100000011110", 
    37 => "00111101101100010000101010010011", 
    38 => "10111101100111100011111110110000", 
    39 => "00111100111001000001100011010100", 
    40 => "10111100111011111010110111011101", 
    41 => "00111101000111100000111100011100", 
    42 => "10111101111000011101100000011000", 
    43 => "00111110001100101010100110010111", 
    44 => "00111100001000011001100010001100", 
    45 => "00111110000000110100111100001011", 
    46 => "10111110000000011100111110000000", 
    47 => "00111110001101110110111101101011", 
    48 => "10111101001100101101011100000010", 
    49 => "00111111001111100011111010010010", 
    50 => "00111110010110010110010110110110", 
    51 => "10111100000011100110011101110111", 
    52 => "00111110000010100111111111000010", 
    53 => "10111110010110000011010011111011", 
    54 => "10111110000001011100101100111001", 
    55 => "10111100111100110011000011001010", 
    56 => "10111101011000000110110101100011", 
    57 => "00111101100011001010100101011010", 
    58 => "00111110010000100011010001010000", 
    59 => "00111110011001111011000111111100", 
    60 => "00111101011010000010001110101000", 
    61 => "10111101001001101101110101010100", 
    62 => "00111101011001001001011000000111", 
    63 => "10111100101000001011000100000101", 
    64 => "00111101101011000101101000000101", 
    65 => "10111101011010011000011011010010", 
    66 => "00111110011111110011110110000111", 
    67 => "10111101001011100010011001000001", 
    68 => "10111110001000000100010110100111", 
    69 => "00111100010010001010110011100010", 
    70 => "10111101101110110100101011000110", 
    71 => "00111110001101011000010111000011", 
    72 => "00111110010100111110101111000110", 
    73 => "10111101011100011011100010110010", 
    74 => "10111101111011100000110010010100", 
    75 => "10111101100100001000100010001100", 
    76 => "10111110110001001111111111001111", 
    77 => "10111110001010001111110100110010", 
    78 => "10111100100011100010111000111100", 
    79 => "00111110001101010001010010101100", 
    80 => "10111101100000001000110011111110", 
    81 => "00111101101100100100111101010111", 
    82 => "10111100110001110110110010000110", 
    83 => "00111101111110001011011010000100", 
    84 => "00111101100000010011111100110001", 
    85 => "10111101100011011011111000111100", 
    86 => "10111101111010101011110000110010", 
    87 => "00111101011000111011000111001110", 
    88 => "00111101001101010111011111000100", 
    89 => "10111101001010100100000010011001", 
    90 => "10111100110110101010110101000000", 
    91 => "10111101111110111101101011110001", 
    92 => "00111101100110101111111010101001", 
    93 => "10111101111011101010001100100100", 
    94 => "00111110000000100001101101011110", 
    95 => "00111110000010110101101001111110", 
    96 => "10111011100001111010100110101101", 
    97 => "10111101011111000011011011111000", 
    98 => "10111100111111110110110010000111", 
    99 => "10111101101010101010011110011110" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity fc6_weights_fc6_bUhA is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 100;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of fc6_weights_fc6_bUhA is
    component fc6_weights_fc6_bUhA_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    fc6_weights_fc6_bUhA_rom_U :  component fc6_weights_fc6_bUhA_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


