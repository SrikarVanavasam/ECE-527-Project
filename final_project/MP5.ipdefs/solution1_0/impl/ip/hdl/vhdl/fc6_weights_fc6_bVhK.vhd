-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity fc6_weights_fc6_bVhK_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 100
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of fc6_weights_fc6_bVhK_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111110001111000000000101101100", 
    1 => "00111110011000011110110001011110", 
    2 => "10111101000101111011001000110001", 
    3 => "10111011101111111110101000010000", 
    4 => "00111011101110001101101011010010", 
    5 => "10111110000000101111110110011010", 
    6 => "00111110001100101101011011000101", 
    7 => "00111110100000001111011111010100", 
    8 => "10111101111100011100010011101011", 
    9 => "10111101100011011000110011101001", 
    10 => "00111101101010001101101110001110", 
    11 => "00111110011110101010101010010101", 
    12 => "00111100101011010111000010110111", 
    13 => "00111110100111010101111000101100", 
    14 => "00111101111110010001100001110100", 
    15 => "00111110001000001001110100001111", 
    16 => "10111101010011111000111000010101", 
    17 => "10111101011001100100011001001000", 
    18 => "10111101000100011111011010110101", 
    19 => "00111110001100100000100111011101", 
    20 => "10111101101110011100011001101101", 
    21 => "10111101010010000000100100111001", 
    22 => "10111101111011111101101110000110", 
    23 => "00111110001010111100100110101001", 
    24 => "00111110010001110111001110010000", 
    25 => "10111110000001110000011111010010", 
    26 => "10111110000001000100010100010101", 
    27 => "10111101111001010000000010101110", 
    28 => "00111011000101010110011110110001", 
    29 => "00111101011110011010100101000001", 
    30 => "00111110010110101000100111000011", 
    31 => "10111110000100011111110110100010", 
    32 => "10111101101101010001010011101001", 
    33 => "00111101001110110101000001100110", 
    34 => "00111110000000011000100011100011", 
    35 => "10111101110000110111010101001100", 
    36 => "10111110100100100010011111000100", 
    37 => "10111101101000110100111001011110", 
    38 => "00111101100101100000000000011010", 
    39 => "00111101101011101101110101000010", 
    40 => "00111110001111100101001110010101", 
    41 => "00111110000110010100101110011100", 
    42 => "10111110000101000011001000010000", 
    43 => "00111110000010010110110000100000", 
    44 => "10111100100011000101010011001000", 
    45 => "00111101001111111110110101111001", 
    46 => "00111101101001011011110001011010", 
    47 => "10111011000000110111010100010101", 
    48 => "00111101011111001101110100010011", 
    49 => "10111110100001101001111101001100", 
    50 => "10111110010011111010101011010111", 
    51 => "00111100111011001010011010000111", 
    52 => "00111101111001010010100110011101", 
    53 => "10111100001000000110001101000010", 
    54 => "10111110000000111000100001111001", 
    55 => "00111110001111000011100100011001", 
    56 => "10111100010111100101010011100000", 
    57 => "00111110010000001110000010011110", 
    58 => "00111110000101001011110100100011", 
    59 => "10111110100010011001000101000010", 
    60 => "00111110010100011010100011000101", 
    61 => "00111101011001011001110101011001", 
    62 => "10111101100110001010110110001011", 
    63 => "00111101110111011101101010001111", 
    64 => "00111101100001010010100010011000", 
    65 => "00111110011111110110010011100101", 
    66 => "10111101111010101010010100000111", 
    67 => "10111110000110100101111010110010", 
    68 => "00111110011101111100110011000001", 
    69 => "00111110000001111001110101001100", 
    70 => "00111110001001010011110101100010", 
    71 => "10111101001001111011010001010010", 
    72 => "00111100100101001100100001111010", 
    73 => "00111101101100000000111000011010", 
    74 => "00111101100111111000100010001111", 
    75 => "10111110010001110000000001010001", 
    76 => "10111100111010111100000111001010", 
    77 => "00111110001100110100101100010011", 
    78 => "10111101001100110110100000010100", 
    79 => "10111110000000111101000011010101", 
    80 => "10111110000100101101011111000010", 
    81 => "00111101110100100001111010011001", 
    82 => "00111110000100001110101110101110", 
    83 => "10111110010110111011100101101100", 
    84 => "10111110000001101100010010110100", 
    85 => "10111110000001111101010100011110", 
    86 => "00111101110100011010100001000001", 
    87 => "10111110011010101011110100000010", 
    88 => "10111110000101101010111000001111", 
    89 => "00111101110101110110011000000110", 
    90 => "10111101111010000011100111101010", 
    91 => "00111100000101011111011100001101", 
    92 => "10111101111001000010001111011111", 
    93 => "00111101111111101111001111001101", 
    94 => "00111110001110011100010011111101", 
    95 => "10111011011110111101001011001010", 
    96 => "10111101001100111001011000001010", 
    97 => "10111110001101001111101101110011", 
    98 => "00111110011001111000101000100111", 
    99 => "10111100101000010101101011101111" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity fc6_weights_fc6_bVhK is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 100;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of fc6_weights_fc6_bVhK is
    component fc6_weights_fc6_bVhK_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    fc6_weights_fc6_bVhK_rom_U :  component fc6_weights_fc6_bVhK_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


