// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module copy_output (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        score_int_0_V_read,
        m_axi_score_out_AWVALID,
        m_axi_score_out_AWREADY,
        m_axi_score_out_AWADDR,
        m_axi_score_out_AWID,
        m_axi_score_out_AWLEN,
        m_axi_score_out_AWSIZE,
        m_axi_score_out_AWBURST,
        m_axi_score_out_AWLOCK,
        m_axi_score_out_AWCACHE,
        m_axi_score_out_AWPROT,
        m_axi_score_out_AWQOS,
        m_axi_score_out_AWREGION,
        m_axi_score_out_AWUSER,
        m_axi_score_out_WVALID,
        m_axi_score_out_WREADY,
        m_axi_score_out_WDATA,
        m_axi_score_out_WSTRB,
        m_axi_score_out_WLAST,
        m_axi_score_out_WID,
        m_axi_score_out_WUSER,
        m_axi_score_out_ARVALID,
        m_axi_score_out_ARREADY,
        m_axi_score_out_ARADDR,
        m_axi_score_out_ARID,
        m_axi_score_out_ARLEN,
        m_axi_score_out_ARSIZE,
        m_axi_score_out_ARBURST,
        m_axi_score_out_ARLOCK,
        m_axi_score_out_ARCACHE,
        m_axi_score_out_ARPROT,
        m_axi_score_out_ARQOS,
        m_axi_score_out_ARREGION,
        m_axi_score_out_ARUSER,
        m_axi_score_out_RVALID,
        m_axi_score_out_RREADY,
        m_axi_score_out_RDATA,
        m_axi_score_out_RLAST,
        m_axi_score_out_RID,
        m_axi_score_out_RUSER,
        m_axi_score_out_RRESP,
        m_axi_score_out_BVALID,
        m_axi_score_out_BREADY,
        m_axi_score_out_BRESP,
        m_axi_score_out_BID,
        m_axi_score_out_BUSER,
        score_out_offset
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_state3 = 10'd4;
parameter    ap_ST_fsm_state4 = 10'd8;
parameter    ap_ST_fsm_state5 = 10'd16;
parameter    ap_ST_fsm_state6 = 10'd32;
parameter    ap_ST_fsm_state7 = 10'd64;
parameter    ap_ST_fsm_state8 = 10'd128;
parameter    ap_ST_fsm_state9 = 10'd256;
parameter    ap_ST_fsm_state10 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [11:0] score_int_0_V_read;
output   m_axi_score_out_AWVALID;
input   m_axi_score_out_AWREADY;
output  [31:0] m_axi_score_out_AWADDR;
output  [0:0] m_axi_score_out_AWID;
output  [31:0] m_axi_score_out_AWLEN;
output  [2:0] m_axi_score_out_AWSIZE;
output  [1:0] m_axi_score_out_AWBURST;
output  [1:0] m_axi_score_out_AWLOCK;
output  [3:0] m_axi_score_out_AWCACHE;
output  [2:0] m_axi_score_out_AWPROT;
output  [3:0] m_axi_score_out_AWQOS;
output  [3:0] m_axi_score_out_AWREGION;
output  [0:0] m_axi_score_out_AWUSER;
output   m_axi_score_out_WVALID;
input   m_axi_score_out_WREADY;
output  [63:0] m_axi_score_out_WDATA;
output  [7:0] m_axi_score_out_WSTRB;
output   m_axi_score_out_WLAST;
output  [0:0] m_axi_score_out_WID;
output  [0:0] m_axi_score_out_WUSER;
output   m_axi_score_out_ARVALID;
input   m_axi_score_out_ARREADY;
output  [31:0] m_axi_score_out_ARADDR;
output  [0:0] m_axi_score_out_ARID;
output  [31:0] m_axi_score_out_ARLEN;
output  [2:0] m_axi_score_out_ARSIZE;
output  [1:0] m_axi_score_out_ARBURST;
output  [1:0] m_axi_score_out_ARLOCK;
output  [3:0] m_axi_score_out_ARCACHE;
output  [2:0] m_axi_score_out_ARPROT;
output  [3:0] m_axi_score_out_ARQOS;
output  [3:0] m_axi_score_out_ARREGION;
output  [0:0] m_axi_score_out_ARUSER;
input   m_axi_score_out_RVALID;
output   m_axi_score_out_RREADY;
input  [63:0] m_axi_score_out_RDATA;
input   m_axi_score_out_RLAST;
input  [0:0] m_axi_score_out_RID;
input  [0:0] m_axi_score_out_RUSER;
input  [1:0] m_axi_score_out_RRESP;
input   m_axi_score_out_BVALID;
output   m_axi_score_out_BREADY;
input  [1:0] m_axi_score_out_BRESP;
input  [0:0] m_axi_score_out_BID;
input  [0:0] m_axi_score_out_BUSER;
input  [28:0] score_out_offset;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_score_out_AWVALID;
reg m_axi_score_out_WVALID;
reg m_axi_score_out_BREADY;

(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    score_out_blk_n_AW;
wire    ap_CS_fsm_state4;
reg    score_out_blk_n_W;
wire    ap_CS_fsm_state5;
reg    score_out_blk_n_B;
wire    ap_CS_fsm_state10;
wire   [0:0] icmp_ln885_fu_126_p2;
reg   [0:0] icmp_ln885_reg_437;
wire   [0:0] tmp_fu_132_p3;
reg   [0:0] tmp_reg_442;
wire   [11:0] select_ln888_fu_146_p3;
reg   [11:0] select_ln888_reg_447;
reg   [31:0] l_fu_172_p3;
reg   [31:0] l_reg_455;
wire   [10:0] trunc_ln893_fu_180_p1;
reg   [10:0] trunc_ln893_reg_460;
wire   [31:0] sub_ln894_fu_184_p2;
reg   [31:0] sub_ln894_reg_465;
wire    ap_CS_fsm_state2;
wire   [31:0] or_ln_fu_291_p3;
reg   [31:0] or_ln_reg_471;
wire   [0:0] icmp_ln908_fu_299_p2;
reg   [0:0] icmp_ln908_reg_476;
reg   [62:0] lshr_ln_reg_481;
wire    ap_CS_fsm_state3;
reg   [0:0] tmp_4_reg_486;
wire   [63:0] select_ln885_fu_430_p3;
reg   [63:0] select_ln885_reg_497;
wire   [63:0] zext_ln19_fu_375_p1;
wire   [11:0] sub_ln889_fu_140_p2;
reg   [11:0] p_Result_s_fu_154_p4;
wire   [31:0] p_Result_s_13_fu_164_p3;
wire   [31:0] add_ln894_fu_193_p2;
wire   [30:0] tmp_2_fu_199_p4;
wire   [3:0] trunc_ln897_fu_215_p1;
wire   [3:0] sub_ln897_fu_219_p2;
wire   [11:0] zext_ln897_fu_225_p1;
wire   [11:0] lshr_ln897_fu_229_p2;
wire   [11:0] and_ln897_1_fu_235_p2;
wire   [0:0] icmp_ln897_fu_209_p2;
wire   [0:0] icmp_ln897_1_fu_240_p2;
wire   [0:0] tmp_3_fu_252_p3;
wire   [11:0] trunc_ln894_fu_189_p1;
wire   [11:0] add_ln899_fu_266_p2;
wire   [0:0] p_Result_3_fu_272_p3;
wire   [0:0] xor_ln899_fu_260_p2;
wire   [0:0] and_ln899_fu_279_p2;
wire   [0:0] and_ln897_fu_246_p2;
wire   [0:0] or_ln899_fu_285_p2;
wire   [31:0] zext_ln908_fu_308_p1;
wire   [31:0] add_ln908_fu_311_p2;
wire   [31:0] lshr_ln908_fu_316_p2;
wire   [31:0] sub_ln908_fu_326_p2;
wire   [63:0] zext_ln907_fu_305_p1;
wire   [63:0] zext_ln908_1_fu_331_p1;
wire   [63:0] zext_ln908_2_fu_322_p1;
wire   [63:0] shl_ln908_fu_335_p2;
wire   [63:0] select_ln908_fu_341_p3;
wire   [63:0] zext_ln911_fu_348_p1;
wire   [63:0] add_ln911_fu_351_p2;
wire   [10:0] select_ln915_fu_389_p3;
wire   [10:0] sub_ln915_fu_396_p2;
wire   [10:0] add_ln915_fu_401_p2;
wire   [63:0] zext_ln912_fu_386_p1;
wire   [11:0] tmp_1_fu_407_p3;
wire   [63:0] p_Result_1_fu_414_p5;
wire   [63:0] bitcast_ln729_fu_426_p1;
reg   [9:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        icmp_ln885_reg_437 <= icmp_ln885_fu_126_p2;
        l_reg_455 <= l_fu_172_p3;
        select_ln888_reg_447 <= select_ln888_fu_146_p3;
        tmp_reg_442 <= score_int_0_V_read[32'd11];
        trunc_ln893_reg_460 <= trunc_ln893_fu_180_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln885_reg_437 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        icmp_ln908_reg_476 <= icmp_ln908_fu_299_p2;
        or_ln_reg_471[0] <= or_ln_fu_291_p3[0];
        sub_ln894_reg_465 <= sub_ln894_fu_184_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln885_reg_437 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        lshr_ln_reg_481 <= {{add_ln911_fu_351_p2[63:1]}};
        tmp_4_reg_486 <= add_ln911_fu_351_p2[32'd54];
    end
end

always @ (posedge ap_clk) begin
    if (((m_axi_score_out_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        select_ln885_reg_497 <= select_ln885_fu_430_p3;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((m_axi_score_out_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state10)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_score_out_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_score_out_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        m_axi_score_out_AWVALID = 1'b1;
    end else begin
        m_axi_score_out_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_score_out_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
        m_axi_score_out_BREADY = 1'b1;
    end else begin
        m_axi_score_out_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_score_out_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        m_axi_score_out_WVALID = 1'b1;
    end else begin
        m_axi_score_out_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        score_out_blk_n_AW = m_axi_score_out_AWREADY;
    end else begin
        score_out_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        score_out_blk_n_B = m_axi_score_out_BVALID;
    end else begin
        score_out_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        score_out_blk_n_W = m_axi_score_out_WREADY;
    end else begin
        score_out_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((m_axi_score_out_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((m_axi_score_out_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((m_axi_score_out_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln894_fu_193_p2 = ($signed(32'd4294967243) + $signed(sub_ln894_fu_184_p2));

assign add_ln899_fu_266_p2 = ($signed(12'd4043) + $signed(trunc_ln894_fu_189_p1));

assign add_ln908_fu_311_p2 = ($signed(32'd4294967242) + $signed(sub_ln894_reg_465));

assign add_ln911_fu_351_p2 = (select_ln908_fu_341_p3 + zext_ln911_fu_348_p1);

assign add_ln915_fu_401_p2 = (select_ln915_fu_389_p3 + sub_ln915_fu_396_p2);

assign and_ln897_1_fu_235_p2 = (select_ln888_reg_447 & lshr_ln897_fu_229_p2);

assign and_ln897_fu_246_p2 = (icmp_ln897_fu_209_p2 & icmp_ln897_1_fu_240_p2);

assign and_ln899_fu_279_p2 = (xor_ln899_fu_260_p2 & p_Result_3_fu_272_p3);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign bitcast_ln729_fu_426_p1 = p_Result_1_fu_414_p5;

assign icmp_ln885_fu_126_p2 = ((score_int_0_V_read == 12'd0) ? 1'b1 : 1'b0);

assign icmp_ln897_1_fu_240_p2 = ((and_ln897_1_fu_235_p2 != 12'd0) ? 1'b1 : 1'b0);

assign icmp_ln897_fu_209_p2 = (($signed(tmp_2_fu_199_p4) > $signed(31'd0)) ? 1'b1 : 1'b0);

assign icmp_ln908_fu_299_p2 = (($signed(add_ln894_fu_193_p2) > $signed(32'd0)) ? 1'b1 : 1'b0);


always @ (p_Result_s_13_fu_164_p3) begin
    if (p_Result_s_13_fu_164_p3[0] == 1'b1) begin
        l_fu_172_p3 = 32'd0;
    end else if (p_Result_s_13_fu_164_p3[1] == 1'b1) begin
        l_fu_172_p3 = 32'd1;
    end else if (p_Result_s_13_fu_164_p3[2] == 1'b1) begin
        l_fu_172_p3 = 32'd2;
    end else if (p_Result_s_13_fu_164_p3[3] == 1'b1) begin
        l_fu_172_p3 = 32'd3;
    end else if (p_Result_s_13_fu_164_p3[4] == 1'b1) begin
        l_fu_172_p3 = 32'd4;
    end else if (p_Result_s_13_fu_164_p3[5] == 1'b1) begin
        l_fu_172_p3 = 32'd5;
    end else if (p_Result_s_13_fu_164_p3[6] == 1'b1) begin
        l_fu_172_p3 = 32'd6;
    end else if (p_Result_s_13_fu_164_p3[7] == 1'b1) begin
        l_fu_172_p3 = 32'd7;
    end else if (p_Result_s_13_fu_164_p3[8] == 1'b1) begin
        l_fu_172_p3 = 32'd8;
    end else if (p_Result_s_13_fu_164_p3[9] == 1'b1) begin
        l_fu_172_p3 = 32'd9;
    end else if (p_Result_s_13_fu_164_p3[10] == 1'b1) begin
        l_fu_172_p3 = 32'd10;
    end else if (p_Result_s_13_fu_164_p3[11] == 1'b1) begin
        l_fu_172_p3 = 32'd11;
    end else if (p_Result_s_13_fu_164_p3[12] == 1'b1) begin
        l_fu_172_p3 = 32'd12;
    end else if (p_Result_s_13_fu_164_p3[13] == 1'b1) begin
        l_fu_172_p3 = 32'd13;
    end else if (p_Result_s_13_fu_164_p3[14] == 1'b1) begin
        l_fu_172_p3 = 32'd14;
    end else if (p_Result_s_13_fu_164_p3[15] == 1'b1) begin
        l_fu_172_p3 = 32'd15;
    end else if (p_Result_s_13_fu_164_p3[16] == 1'b1) begin
        l_fu_172_p3 = 32'd16;
    end else if (p_Result_s_13_fu_164_p3[17] == 1'b1) begin
        l_fu_172_p3 = 32'd17;
    end else if (p_Result_s_13_fu_164_p3[18] == 1'b1) begin
        l_fu_172_p3 = 32'd18;
    end else if (p_Result_s_13_fu_164_p3[19] == 1'b1) begin
        l_fu_172_p3 = 32'd19;
    end else if (p_Result_s_13_fu_164_p3[20] == 1'b1) begin
        l_fu_172_p3 = 32'd20;
    end else if (p_Result_s_13_fu_164_p3[21] == 1'b1) begin
        l_fu_172_p3 = 32'd21;
    end else if (p_Result_s_13_fu_164_p3[22] == 1'b1) begin
        l_fu_172_p3 = 32'd22;
    end else if (p_Result_s_13_fu_164_p3[23] == 1'b1) begin
        l_fu_172_p3 = 32'd23;
    end else if (p_Result_s_13_fu_164_p3[24] == 1'b1) begin
        l_fu_172_p3 = 32'd24;
    end else if (p_Result_s_13_fu_164_p3[25] == 1'b1) begin
        l_fu_172_p3 = 32'd25;
    end else if (p_Result_s_13_fu_164_p3[26] == 1'b1) begin
        l_fu_172_p3 = 32'd26;
    end else if (p_Result_s_13_fu_164_p3[27] == 1'b1) begin
        l_fu_172_p3 = 32'd27;
    end else if (p_Result_s_13_fu_164_p3[28] == 1'b1) begin
        l_fu_172_p3 = 32'd28;
    end else if (p_Result_s_13_fu_164_p3[29] == 1'b1) begin
        l_fu_172_p3 = 32'd29;
    end else if (p_Result_s_13_fu_164_p3[30] == 1'b1) begin
        l_fu_172_p3 = 32'd30;
    end else if (p_Result_s_13_fu_164_p3[31] == 1'b1) begin
        l_fu_172_p3 = 32'd31;
    end else begin
        l_fu_172_p3 = 32'd32;
    end
end

assign lshr_ln897_fu_229_p2 = 12'd4095 >> zext_ln897_fu_225_p1;

assign lshr_ln908_fu_316_p2 = zext_ln908_fu_308_p1 >> add_ln908_fu_311_p2;

assign m_axi_score_out_ARADDR = 32'd0;

assign m_axi_score_out_ARBURST = 2'd0;

assign m_axi_score_out_ARCACHE = 4'd0;

assign m_axi_score_out_ARID = 1'd0;

assign m_axi_score_out_ARLEN = 32'd0;

assign m_axi_score_out_ARLOCK = 2'd0;

assign m_axi_score_out_ARPROT = 3'd0;

assign m_axi_score_out_ARQOS = 4'd0;

assign m_axi_score_out_ARREGION = 4'd0;

assign m_axi_score_out_ARSIZE = 3'd0;

assign m_axi_score_out_ARUSER = 1'd0;

assign m_axi_score_out_ARVALID = 1'b0;

assign m_axi_score_out_AWADDR = zext_ln19_fu_375_p1;

assign m_axi_score_out_AWBURST = 2'd0;

assign m_axi_score_out_AWCACHE = 4'd0;

assign m_axi_score_out_AWID = 1'd0;

assign m_axi_score_out_AWLEN = 32'd1;

assign m_axi_score_out_AWLOCK = 2'd0;

assign m_axi_score_out_AWPROT = 3'd0;

assign m_axi_score_out_AWQOS = 4'd0;

assign m_axi_score_out_AWREGION = 4'd0;

assign m_axi_score_out_AWSIZE = 3'd0;

assign m_axi_score_out_AWUSER = 1'd0;

assign m_axi_score_out_RREADY = 1'b0;

assign m_axi_score_out_WDATA = select_ln885_reg_497;

assign m_axi_score_out_WID = 1'd0;

assign m_axi_score_out_WLAST = 1'b0;

assign m_axi_score_out_WSTRB = 8'd255;

assign m_axi_score_out_WUSER = 1'd0;

assign or_ln899_fu_285_p2 = (and_ln899_fu_279_p2 | and_ln897_fu_246_p2);

assign or_ln_fu_291_p3 = {{31'd0}, {or_ln899_fu_285_p2}};

assign p_Result_1_fu_414_p5 = {{tmp_1_fu_407_p3}, {zext_ln912_fu_386_p1[51:0]}};

assign p_Result_3_fu_272_p3 = select_ln888_reg_447[add_ln899_fu_266_p2];

assign p_Result_s_13_fu_164_p3 = {{20'd1048575}, {p_Result_s_fu_154_p4}};

integer ap_tvar_int_0;

always @ (select_ln888_fu_146_p3) begin
    for (ap_tvar_int_0 = 12 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 11 - 0) begin
            p_Result_s_fu_154_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            p_Result_s_fu_154_p4[ap_tvar_int_0] = select_ln888_fu_146_p3[11 - ap_tvar_int_0];
        end
    end
end

assign select_ln885_fu_430_p3 = ((icmp_ln885_reg_437[0:0] === 1'b1) ? 64'd0 : bitcast_ln729_fu_426_p1);

assign select_ln888_fu_146_p3 = ((tmp_fu_132_p3[0:0] === 1'b1) ? sub_ln889_fu_140_p2 : score_int_0_V_read);

assign select_ln908_fu_341_p3 = ((icmp_ln908_reg_476[0:0] === 1'b1) ? zext_ln908_2_fu_322_p1 : shl_ln908_fu_335_p2);

assign select_ln915_fu_389_p3 = ((tmp_4_reg_486[0:0] === 1'b1) ? 11'd1023 : 11'd1022);

assign shl_ln908_fu_335_p2 = zext_ln907_fu_305_p1 << zext_ln908_1_fu_331_p1;

assign sub_ln889_fu_140_p2 = (12'd0 - score_int_0_V_read);

assign sub_ln894_fu_184_p2 = (32'd12 - l_reg_455);

assign sub_ln897_fu_219_p2 = (4'd2 - trunc_ln897_fu_215_p1);

assign sub_ln908_fu_326_p2 = (32'd54 - sub_ln894_reg_465);

assign sub_ln915_fu_396_p2 = (11'd4 - trunc_ln893_reg_460);

assign tmp_1_fu_407_p3 = {{tmp_reg_442}, {add_ln915_fu_401_p2}};

assign tmp_2_fu_199_p4 = {{add_ln894_fu_193_p2[31:1]}};

assign tmp_3_fu_252_p3 = add_ln894_fu_193_p2[32'd31];

assign tmp_fu_132_p3 = score_int_0_V_read[32'd11];

assign trunc_ln893_fu_180_p1 = l_fu_172_p3[10:0];

assign trunc_ln894_fu_189_p1 = sub_ln894_fu_184_p2[11:0];

assign trunc_ln897_fu_215_p1 = sub_ln894_fu_184_p2[3:0];

assign xor_ln899_fu_260_p2 = (tmp_3_fu_252_p3 ^ 1'd1);

assign zext_ln19_fu_375_p1 = score_out_offset;

assign zext_ln897_fu_225_p1 = sub_ln897_fu_219_p2;

assign zext_ln907_fu_305_p1 = select_ln888_reg_447;

assign zext_ln908_1_fu_331_p1 = sub_ln908_fu_326_p2;

assign zext_ln908_2_fu_322_p1 = lshr_ln908_fu_316_p2;

assign zext_ln908_fu_308_p1 = select_ln888_reg_447;

assign zext_ln911_fu_348_p1 = or_ln_reg_471;

assign zext_ln912_fu_386_p1 = lshr_ln_reg_481;

always @ (posedge ap_clk) begin
    or_ln_reg_471[31:1] <= 31'b0000000000000000000000000000000;
end

endmodule //copy_output
